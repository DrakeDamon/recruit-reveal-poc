import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SqlPoolTransparentDataEncryptions } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { TransparentDataEncryption, SqlPoolTransparentDataEncryptionsListOptionalParams, TransparentDataEncryptionName, SqlPoolTransparentDataEncryptionsGetOptionalParams, SqlPoolTransparentDataEncryptionsGetResponse, SqlPoolTransparentDataEncryptionsCreateOrUpdateOptionalParams, SqlPoolTransparentDataEncryptionsCreateOrUpdateResponse } from "../models";
/** Class containing SqlPoolTransparentDataEncryptions operations. */
export declare class SqlPoolTransparentDataEncryptionsImpl implements SqlPoolTransparentDataEncryptions {
    private readonly client;
    /**
     * Initialize a new instance of the class SqlPoolTransparentDataEncryptions class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Get list of SQL pool's transparent data encryption configurations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolTransparentDataEncryptionsListOptionalParams): PagedAsyncIterableIterator<TransparentDataEncryption>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get a SQL pool's transparent data encryption configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param transparentDataEncryptionName The name of the transparent data encryption configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, transparentDataEncryptionName: TransparentDataEncryptionName, options?: SqlPoolTransparentDataEncryptionsGetOptionalParams): Promise<SqlPoolTransparentDataEncryptionsGetResponse>;
    /**
     * Creates or updates a Sql pool's transparent data encryption configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param transparentDataEncryptionName The name of the transparent data encryption configuration.
     * @param parameters The required parameters for creating or updating transparent data encryption.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, transparentDataEncryptionName: TransparentDataEncryptionName, parameters: TransparentDataEncryption, options?: SqlPoolTransparentDataEncryptionsCreateOrUpdateOptionalParams): Promise<SqlPoolTransparentDataEncryptionsCreateOrUpdateResponse>;
    /**
     * Get list of SQL pool's transparent data encryption configurations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=sqlPoolTransparentDataEncryptions.d.ts.map