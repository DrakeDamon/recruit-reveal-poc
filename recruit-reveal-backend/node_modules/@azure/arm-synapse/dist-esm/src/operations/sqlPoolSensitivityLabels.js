/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing SqlPoolSensitivityLabels operations. */
export class SqlPoolSensitivityLabelsImpl {
    /**
     * Initialize a new instance of the class SqlPoolSensitivityLabels class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets SQL pool sensitivity labels.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    listCurrent(resourceGroupName, workspaceName, sqlPoolName, options) {
        const iter = this.listCurrentPagingAll(resourceGroupName, workspaceName, sqlPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listCurrentPagingPage(resourceGroupName, workspaceName, sqlPoolName, options);
            }
        };
    }
    listCurrentPagingPage(resourceGroupName, workspaceName, sqlPoolName, options) {
        return __asyncGenerator(this, arguments, function* listCurrentPagingPage_1() {
            let result = yield __await(this._listCurrent(resourceGroupName, workspaceName, sqlPoolName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listCurrentNext(resourceGroupName, workspaceName, sqlPoolName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listCurrentPagingAll(resourceGroupName, workspaceName, sqlPoolName, options) {
        return __asyncGenerator(this, arguments, function* listCurrentPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listCurrentPagingPage(resourceGroupName, workspaceName, sqlPoolName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Gets sensitivity labels of a given SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    listRecommended(resourceGroupName, workspaceName, sqlPoolName, options) {
        const iter = this.listRecommendedPagingAll(resourceGroupName, workspaceName, sqlPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listRecommendedPagingPage(resourceGroupName, workspaceName, sqlPoolName, options);
            }
        };
    }
    listRecommendedPagingPage(resourceGroupName, workspaceName, sqlPoolName, options) {
        return __asyncGenerator(this, arguments, function* listRecommendedPagingPage_1() {
            let result = yield __await(this._listRecommended(resourceGroupName, workspaceName, sqlPoolName, options));
            yield yield __await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield __await(this._listRecommendedNext(resourceGroupName, workspaceName, sqlPoolName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield __await(result.value || []);
            }
        });
    }
    listRecommendedPagingAll(resourceGroupName, workspaceName, sqlPoolName, options) {
        return __asyncGenerator(this, arguments, function* listRecommendedPagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listRecommendedPagingPage(resourceGroupName, workspaceName, sqlPoolName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Gets SQL pool sensitivity labels.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    _listCurrent(resourceGroupName, workspaceName, sqlPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, sqlPoolName, options }, listCurrentOperationSpec);
    }
    /**
     * Update sensitivity labels of a given SQL Pool using an operations batch.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters A list of sensitivity label update operations.
     * @param options The options parameters.
     */
    update(resourceGroupName, workspaceName, sqlPoolName, parameters, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, sqlPoolName, parameters, options }, updateOperationSpec);
    }
    /**
     * Gets sensitivity labels of a given SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    _listRecommended(resourceGroupName, workspaceName, sqlPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, sqlPoolName, options }, listRecommendedOperationSpec);
    }
    /**
     * Creates or updates the sensitivity label of a given column in a Sql pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param parameters The column sensitivity label resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName, columnName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sqlPoolName,
            schemaName,
            tableName,
            columnName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes the sensitivity label of a given column in a Sql pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param options The options parameters.
     */
    delete(resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName, columnName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sqlPoolName,
            schemaName,
            tableName,
            columnName,
            options
        }, deleteOperationSpec);
    }
    /**
     * Gets the sensitivity label of a given column
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param sensitivityLabelSource The source of the sensitivity label.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName, columnName, sensitivityLabelSource, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sqlPoolName,
            schemaName,
            tableName,
            columnName,
            sensitivityLabelSource,
            options
        }, getOperationSpec);
    }
    /**
     * Enables sensitivity recommendations on a given column (recommendations are enabled by default on all
     * columns)
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param options The options parameters.
     */
    enableRecommendation(resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName, columnName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sqlPoolName,
            schemaName,
            tableName,
            columnName,
            options
        }, enableRecommendationOperationSpec);
    }
    /**
     * Disables sensitivity recommendations on a given column
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param options The options parameters.
     */
    disableRecommendation(resourceGroupName, workspaceName, sqlPoolName, schemaName, tableName, columnName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sqlPoolName,
            schemaName,
            tableName,
            columnName,
            options
        }, disableRecommendationOperationSpec);
    }
    /**
     * ListCurrentNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param nextLink The nextLink from the previous successful call to the ListCurrent method.
     * @param options The options parameters.
     */
    _listCurrentNext(resourceGroupName, workspaceName, sqlPoolName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, sqlPoolName, nextLink, options }, listCurrentNextOperationSpec);
    }
    /**
     * ListRecommendedNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param nextLink The nextLink from the previous successful call to the ListRecommended method.
     * @param options The options parameters.
     */
    _listRecommendedNext(resourceGroupName, workspaceName, sqlPoolName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, sqlPoolName, nextLink, options }, listRecommendedNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listCurrentOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/currentSensitivityLabels",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SensitivityLabelListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/currentSensitivityLabels",
    httpMethod: "PATCH",
    responses: { 200: {}, default: {} },
    requestBody: Parameters.parameters6,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName
    ],
    headerParameters: [Parameters.contentType],
    mediaType: "json",
    serializer
};
const listRecommendedOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/recommendedSensitivityLabels",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SensitivityLabelListResult
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.includeDisabledRecommendations,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.SensitivityLabel
        },
        201: {
            bodyMapper: Mappers.SensitivityLabel
        },
        default: {}
    },
    requestBody: Parameters.parameters7,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName,
        Parameters.schemaName,
        Parameters.tableName,
        Parameters.columnName,
        Parameters.sensitivityLabelSource
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
    httpMethod: "DELETE",
    responses: { 200: {}, 204: {}, default: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName,
        Parameters.schemaName,
        Parameters.tableName,
        Parameters.columnName,
        Parameters.sensitivityLabelSource
    ],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SensitivityLabel
        },
        default: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName,
        Parameters.schemaName,
        Parameters.tableName,
        Parameters.columnName,
        Parameters.sensitivityLabelSource1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const enableRecommendationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/enable",
    httpMethod: "POST",
    responses: { 200: {}, default: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName,
        Parameters.schemaName,
        Parameters.tableName,
        Parameters.columnName,
        Parameters.sensitivityLabelSource2
    ],
    serializer
};
const disableRecommendationOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/disable",
    httpMethod: "POST",
    responses: { 200: {}, default: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName,
        Parameters.schemaName,
        Parameters.tableName,
        Parameters.columnName,
        Parameters.sensitivityLabelSource2
    ],
    serializer
};
const listCurrentNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SensitivityLabelListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.nextLink,
        Parameters.sqlPoolName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listRecommendedNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SensitivityLabelListResult
        },
        default: {}
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.filter,
        Parameters.includeDisabledRecommendations,
        Parameters.skipToken
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.nextLink,
        Parameters.sqlPoolName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=sqlPoolSensitivityLabels.js.map