import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SqlPoolVulnerabilityAssessmentScans } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { VulnerabilityAssessmentScanRecord, VulnerabilityAssessmentName, SqlPoolVulnerabilityAssessmentScansListOptionalParams, SqlPoolVulnerabilityAssessmentScansInitiateScanOptionalParams, SqlPoolVulnerabilityAssessmentScansExportOptionalParams, SqlPoolVulnerabilityAssessmentScansExportResponse, SqlPoolVulnerabilityAssessmentScansGetOptionalParams, SqlPoolVulnerabilityAssessmentScansGetResponse } from "../models";
/** Class containing SqlPoolVulnerabilityAssessmentScans operations. */
export declare class SqlPoolVulnerabilityAssessmentScansImpl implements SqlPoolVulnerabilityAssessmentScans {
    private readonly client;
    /**
     * Initialize a new instance of the class SqlPoolVulnerabilityAssessmentScans class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Lists the vulnerability assessment scans of a SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, options?: SqlPoolVulnerabilityAssessmentScansListOptionalParams): PagedAsyncIterableIterator<VulnerabilityAssessmentScanRecord>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Lists the vulnerability assessment scans of a SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param options The options parameters.
     */
    private _list;
    /**
     * Executes a Vulnerability Assessment database scan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param options The options parameters.
     */
    beginInitiateScan(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, scanId: string, options?: SqlPoolVulnerabilityAssessmentScansInitiateScanOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Executes a Vulnerability Assessment database scan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param options The options parameters.
     */
    beginInitiateScanAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, scanId: string, options?: SqlPoolVulnerabilityAssessmentScansInitiateScanOptionalParams): Promise<void>;
    /**
     * Convert an existing scan result to a human readable format. If already exists nothing happens
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param options The options parameters.
     */
    export(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, scanId: string, options?: SqlPoolVulnerabilityAssessmentScansExportOptionalParams): Promise<SqlPoolVulnerabilityAssessmentScansExportResponse>;
    /**
     * Gets a vulnerability assessment scan record of a Sql pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, scanId: string, options?: SqlPoolVulnerabilityAssessmentScansGetOptionalParams): Promise<SqlPoolVulnerabilityAssessmentScansGetResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=sqlPoolVulnerabilityAssessmentScans.d.ts.map