import { SqlPoolConnectionPolicies } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { ConnectionPolicyName, SqlPoolConnectionPoliciesGetOptionalParams, SqlPoolConnectionPoliciesGetResponse } from "../models";
/** Class containing SqlPoolConnectionPolicies operations. */
export declare class SqlPoolConnectionPoliciesImpl implements SqlPoolConnectionPolicies {
    private readonly client;
    /**
     * Initialize a new instance of the class SqlPoolConnectionPolicies class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Get a Sql pool's connection policy, which is used with table auditing.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param connectionPolicyName The name of the connection policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, connectionPolicyName: ConnectionPolicyName, options?: SqlPoolConnectionPoliciesGetOptionalParams): Promise<SqlPoolConnectionPoliciesGetResponse>;
}
//# sourceMappingURL=sqlPoolConnectionPolicies.d.ts.map