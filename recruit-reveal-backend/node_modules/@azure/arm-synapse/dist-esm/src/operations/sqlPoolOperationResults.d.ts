import { SqlPoolOperationResults } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { SqlPoolOperationResultsGetLocationHeaderResultOptionalParams, SqlPoolOperationResultsGetLocationHeaderResultResponse } from "../models";
/** Class containing SqlPoolOperationResults operations. */
export declare class SqlPoolOperationResultsImpl implements SqlPoolOperationResults {
    private readonly client;
    /**
     * Initialize a new instance of the class SqlPoolOperationResults class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Get the status of a SQL pool operation
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param operationId Operation ID
     * @param options The options parameters.
     */
    getLocationHeaderResult(resourceGroupName: string, workspaceName: string, sqlPoolName: string, operationId: string, options?: SqlPoolOperationResultsGetLocationHeaderResultOptionalParams): Promise<SqlPoolOperationResultsGetLocationHeaderResultResponse>;
}
//# sourceMappingURL=sqlPoolOperationResults.d.ts.map