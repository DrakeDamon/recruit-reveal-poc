import { DataMaskingPolicies } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { DataMaskingPolicy, DataMaskingPoliciesCreateOrUpdateOptionalParams, DataMaskingPoliciesCreateOrUpdateResponse, DataMaskingPoliciesGetOptionalParams, DataMaskingPoliciesGetResponse } from "../models";
/** Class containing DataMaskingPolicies operations. */
export declare class DataMaskingPoliciesImpl implements DataMaskingPolicies {
    private readonly client;
    /**
     * Initialize a new instance of the class DataMaskingPolicies class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Creates or updates a Sql pool data masking policy
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters Parameters for creating or updating a data masking policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, parameters: DataMaskingPolicy, options?: DataMaskingPoliciesCreateOrUpdateOptionalParams): Promise<DataMaskingPoliciesCreateOrUpdateResponse>;
    /**
     * Gets a Sql pool data masking policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: DataMaskingPoliciesGetOptionalParams): Promise<DataMaskingPoliciesGetResponse>;
}
//# sourceMappingURL=dataMaskingPolicies.d.ts.map