/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await, __awaiter } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
/// <reference lib="esnext.asynciterable" />
/** Class containing KustoPools operations. */
export class KustoPoolsImpl {
    /**
     * Initialize a new instance of the class KustoPools class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists eligible SKUs for Kusto Pool resource.
     * @param options The options parameters.
     */
    listSkus(options) {
        const iter = this.listSkusPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listSkusPagingPage(options);
            }
        };
    }
    listSkusPagingPage(options) {
        return __asyncGenerator(this, arguments, function* listSkusPagingPage_1() {
            let result = yield __await(this._listSkus(options));
            yield yield __await(result.value || []);
        });
    }
    listSkusPagingAll(options) {
        return __asyncGenerator(this, arguments, function* listSkusPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listSkusPagingPage(options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Returns the SKUs available for the provided resource.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listSkusByResource(workspaceName, kustoPoolName, resourceGroupName, options) {
        const iter = this.listSkusByResourcePagingAll(workspaceName, kustoPoolName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listSkusByResourcePagingPage(workspaceName, kustoPoolName, resourceGroupName, options);
            }
        };
    }
    listSkusByResourcePagingPage(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listSkusByResourcePagingPage_1() {
            let result = yield __await(this._listSkusByResource(workspaceName, kustoPoolName, resourceGroupName, options));
            yield yield __await(result.value || []);
        });
    }
    listSkusByResourcePagingAll(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listSkusByResourcePagingAll_1() {
            var e_2, _a;
            try {
                for (var _b = __asyncValues(this.listSkusByResourcePagingPage(workspaceName, kustoPoolName, resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Returns a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listLanguageExtensions(workspaceName, kustoPoolName, resourceGroupName, options) {
        const iter = this.listLanguageExtensionsPagingAll(workspaceName, kustoPoolName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listLanguageExtensionsPagingPage(workspaceName, kustoPoolName, resourceGroupName, options);
            }
        };
    }
    listLanguageExtensionsPagingPage(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listLanguageExtensionsPagingPage_1() {
            let result = yield __await(this._listLanguageExtensions(workspaceName, kustoPoolName, resourceGroupName, options));
            yield yield __await(result.value || []);
        });
    }
    listLanguageExtensionsPagingAll(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listLanguageExtensionsPagingAll_1() {
            var e_3, _a;
            try {
                for (var _b = __asyncValues(this.listLanguageExtensionsPagingPage(workspaceName, kustoPoolName, resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_3) throw e_3.error; }
            }
        });
    }
    /**
     * Returns a list of databases that are owned by this Kusto Pool and were followed by another Kusto
     * Pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listFollowerDatabases(workspaceName, kustoPoolName, resourceGroupName, options) {
        const iter = this.listFollowerDatabasesPagingAll(workspaceName, kustoPoolName, resourceGroupName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listFollowerDatabasesPagingPage(workspaceName, kustoPoolName, resourceGroupName, options);
            }
        };
    }
    listFollowerDatabasesPagingPage(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listFollowerDatabasesPagingPage_1() {
            let result = yield __await(this._listFollowerDatabases(workspaceName, kustoPoolName, resourceGroupName, options));
            yield yield __await(result.value || []);
        });
    }
    listFollowerDatabasesPagingAll(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __asyncGenerator(this, arguments, function* listFollowerDatabasesPagingAll_1() {
            var e_4, _a;
            try {
                for (var _b = __asyncValues(this.listFollowerDatabasesPagingPage(workspaceName, kustoPoolName, resourceGroupName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_4) throw e_4.error; }
            }
        });
    }
    /**
     * Lists eligible SKUs for Kusto Pool resource.
     * @param options The options parameters.
     */
    _listSkus(options) {
        return this.client.sendOperationRequest({ options }, listSkusOperationSpec);
    }
    /**
     * Checks that the kusto pool name is valid and is not already in use.
     * @param location The name of Azure region.
     * @param kustoPoolName The name of the cluster.
     * @param options The options parameters.
     */
    checkNameAvailability(location, kustoPoolName, options) {
        return this.client.sendOperationRequest({ location, kustoPoolName, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * List all Kusto pools
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName, workspaceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, options }, listByWorkspaceOperationSpec);
    }
    /**
     * Gets a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(workspaceName, kustoPoolName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ workspaceName, kustoPoolName, resourceGroupName, options }, getOperationSpec);
    }
    /**
     * Create or update a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param parameters The Kusto pool parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(workspaceName, resourceGroupName, kustoPoolName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { workspaceName, resourceGroupName, kustoPoolName, parameters, options }, createOrUpdateOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Create or update a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param parameters The Kusto pool parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(workspaceName, resourceGroupName, kustoPoolName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginCreateOrUpdate(workspaceName, resourceGroupName, kustoPoolName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Update a Kusto Kusto Pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param parameters The Kusto pool parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(workspaceName, resourceGroupName, kustoPoolName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { workspaceName, resourceGroupName, kustoPoolName, parameters, options }, updateOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Update a Kusto Kusto Pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param parameters The Kusto pool parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(workspaceName, resourceGroupName, kustoPoolName, parameters, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginUpdate(workspaceName, resourceGroupName, kustoPoolName, parameters, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Deletes a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param options The options parameters.
     */
    beginDelete(workspaceName, resourceGroupName, kustoPoolName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { workspaceName, resourceGroupName, kustoPoolName, options }, deleteOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Deletes a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param options The options parameters.
     */
    beginDeleteAndWait(workspaceName, resourceGroupName, kustoPoolName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDelete(workspaceName, resourceGroupName, kustoPoolName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Stops a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginStop(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { workspaceName, kustoPoolName, resourceGroupName, options }, stopOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Stops a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginStopAndWait(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStop(workspaceName, kustoPoolName, resourceGroupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Starts a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginStart(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, { workspaceName, kustoPoolName, resourceGroupName, options }, startOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Starts a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginStartAndWait(workspaceName, kustoPoolName, resourceGroupName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginStart(workspaceName, kustoPoolName, resourceGroupName, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns the SKUs available for the provided resource.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listSkusByResource(workspaceName, kustoPoolName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ workspaceName, kustoPoolName, resourceGroupName, options }, listSkusByResourceOperationSpec);
    }
    /**
     * Returns a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listLanguageExtensions(workspaceName, kustoPoolName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ workspaceName, kustoPoolName, resourceGroupName, options }, listLanguageExtensionsOperationSpec);
    }
    /**
     * Add a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param languageExtensionsToAdd The language extensions to add.
     * @param options The options parameters.
     */
    beginAddLanguageExtensions(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToAdd, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                workspaceName,
                kustoPoolName,
                resourceGroupName,
                languageExtensionsToAdd,
                options
            }, addLanguageExtensionsOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Add a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param languageExtensionsToAdd The language extensions to add.
     * @param options The options parameters.
     */
    beginAddLanguageExtensionsAndWait(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToAdd, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginAddLanguageExtensions(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToAdd, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Remove a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param languageExtensionsToRemove The language extensions to remove.
     * @param options The options parameters.
     */
    beginRemoveLanguageExtensions(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToRemove, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                workspaceName,
                kustoPoolName,
                resourceGroupName,
                languageExtensionsToRemove,
                options
            }, removeLanguageExtensionsOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Remove a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param languageExtensionsToRemove The language extensions to remove.
     * @param options The options parameters.
     */
    beginRemoveLanguageExtensionsAndWait(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToRemove, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginRemoveLanguageExtensions(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToRemove, options);
            return poller.pollUntilDone();
        });
    }
    /**
     * Returns a list of databases that are owned by this Kusto Pool and were followed by another Kusto
     * Pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    _listFollowerDatabases(workspaceName, kustoPoolName, resourceGroupName, options) {
        return this.client.sendOperationRequest({ workspaceName, kustoPoolName, resourceGroupName, options }, listFollowerDatabasesOperationSpec);
    }
    /**
     * Detaches all followers of a database owned by this Kusto Pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param followerDatabaseToRemove The follower databases properties to remove.
     * @param options The options parameters.
     */
    beginDetachFollowerDatabases(workspaceName, kustoPoolName, resourceGroupName, followerDatabaseToRemove, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const directSendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                return this.client.sendOperationRequest(args, spec);
            });
            const sendOperation = (args, spec) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                let currentRawResponse = undefined;
                const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
                const callback = (rawResponse, flatResponse) => {
                    currentRawResponse = rawResponse;
                    providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
                };
                const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
                const flatResponse = yield directSendOperation(updatedArgs, spec);
                return {
                    flatResponse,
                    rawResponse: {
                        statusCode: currentRawResponse.status,
                        body: currentRawResponse.parsedBody,
                        headers: currentRawResponse.headers.toJSON()
                    }
                };
            });
            const lro = new LroImpl(sendOperation, {
                workspaceName,
                kustoPoolName,
                resourceGroupName,
                followerDatabaseToRemove,
                options
            }, detachFollowerDatabasesOperationSpec);
            return new LroEngine(lro, {
                resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
                intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
            });
        });
    }
    /**
     * Detaches all followers of a database owned by this Kusto Pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param followerDatabaseToRemove The follower databases properties to remove.
     * @param options The options parameters.
     */
    beginDetachFollowerDatabasesAndWait(workspaceName, kustoPoolName, resourceGroupName, followerDatabaseToRemove, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const poller = yield this.beginDetachFollowerDatabases(workspaceName, kustoPoolName, resourceGroupName, followerDatabaseToRemove, options);
            return poller.pollUntilDone();
        });
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listSkusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Synapse/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SkuDescriptionList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept],
    serializer
};
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/Microsoft.Synapse/locations/{location}/kustoPoolCheckNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.kustoPoolName,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.location
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listByWorkspaceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KustoPoolListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KustoPool
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.KustoPool
        },
        201: {
            bodyMapper: Mappers.KustoPool
        },
        202: {
            bodyMapper: Mappers.KustoPool
        },
        204: {
            bodyMapper: Mappers.KustoPool
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters22,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifNoneMatch,
        Parameters.ifMatch
    ],
    mediaType: "json",
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.KustoPool
        },
        201: {
            bodyMapper: Mappers.KustoPool
        },
        202: {
            bodyMapper: Mappers.KustoPool
        },
        204: {
            bodyMapper: Mappers.KustoPool
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters23,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [
        Parameters.accept,
        Parameters.contentType,
        Parameters.ifMatch
    ],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const stopOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const startOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listSkusByResourceOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/skus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ListResourceSkusResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listLanguageExtensionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listLanguageExtensions",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LanguageExtensionsList
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const addLanguageExtensionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/addLanguageExtensions",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.languageExtensionsToAdd,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const removeLanguageExtensionsOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/removeLanguageExtensions",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.languageExtensionsToRemove,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listFollowerDatabasesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listFollowerDatabases",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.FollowerDatabaseListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const detachFollowerDatabasesOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/detachFollowerDatabases",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.followerDatabaseToRemove,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.kustoPoolName1
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=kustoPools.js.map