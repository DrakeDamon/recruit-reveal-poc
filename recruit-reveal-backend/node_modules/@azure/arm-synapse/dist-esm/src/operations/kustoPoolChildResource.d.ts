import { KustoPoolChildResource } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { DatabaseCheckNameRequest, KustoPoolChildResourceCheckNameAvailabilityOptionalParams, KustoPoolChildResourceCheckNameAvailabilityResponse } from "../models";
/** Class containing KustoPoolChildResource operations. */
export declare class KustoPoolChildResourceImpl implements KustoPoolChildResource {
    private readonly client;
    /**
     * Initialize a new instance of the class KustoPoolChildResource class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Checks that the Kusto Pool child resource name is valid and is not already in use.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Kusto Pool child resource.
     * @param options The options parameters.
     */
    checkNameAvailability(workspaceName: string, kustoPoolName: string, resourceGroupName: string, resourceName: DatabaseCheckNameRequest, options?: KustoPoolChildResourceCheckNameAvailabilityOptionalParams): Promise<KustoPoolChildResourceCheckNameAvailabilityResponse>;
}
//# sourceMappingURL=kustoPoolChildResource.d.ts.map