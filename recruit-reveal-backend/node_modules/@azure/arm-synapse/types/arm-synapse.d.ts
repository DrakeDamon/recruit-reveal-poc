import * as coreAuth from '@azure/core-auth';
import * as coreClient from '@azure/core-client';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { PollerLike } from '@azure/core-lro';
import { PollOperationState } from '@azure/core-lro';

/** Class representing an attached database configuration. */
export declare type AttachedDatabaseConfiguration = ProxyResource & {
    /** Resource location. */
    location?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
    /** The name of the database which you would like to attach, use * if you want to follow all current and future databases. */
    databaseName?: string;
    /** The resource id of the kusto pool where the databases you would like to attach reside. */
    kustoPoolResourceId?: string;
    /**
     * The list of databases from the clusterResourceId which are currently attached to the kusto pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly attachedDatabaseNames?: string[];
    /** The default principals modification kind */
    defaultPrincipalsModificationKind?: DefaultPrincipalsModificationKind;
    /** Table level sharing specifications */
    tableLevelSharingProperties?: TableLevelSharingProperties;
};

/** The list attached database configurations operation response. */
export declare interface AttachedDatabaseConfigurationListResult {
    /** The list of attached database configurations. */
    value?: AttachedDatabaseConfiguration[];
}

/** Auto-pausing properties of a Big Data pool powered by Apache Spark */
export declare interface AutoPauseProperties {
    /** Number of minutes of idle time before the Big Data pool is automatically paused. */
    delayInMinutes?: number;
    /** Whether auto-pausing is enabled for the Big Data pool. */
    enabled?: boolean;
}

/** Auto-scaling properties of a Big Data pool powered by Apache Spark */
export declare interface AutoScaleProperties {
    /** The minimum number of nodes the Big Data pool can support. */
    minNodeCount?: number;
    /** Whether automatic scaling is enabled for the Big Data pool. */
    enabled?: boolean;
    /** The maximum number of nodes the Big Data pool can support. */
    maxNodeCount?: number;
}

/** An operation that is available in this resource provider */
export declare interface AvailableRpOperation {
    /** Display properties of the operation */
    display?: AvailableRpOperationDisplayInfo;
    /** Whether this operation is a data action */
    isDataAction?: string;
    /** Operation name */
    name?: string;
    /** Operation origin */
    origin?: string;
    /** Operation service specification */
    serviceSpecification?: OperationMetaServiceSpecification;
}

/** Description of an available operation */
export declare interface AvailableRpOperationDisplayInfo {
    /** Operation description */
    description?: string;
    /** Resource type */
    resource?: string;
    /** Resource provider name */
    provider?: string;
    /** Operation name */
    operation?: string;
}

/** Azure Active Directory Only Authentication Info */
export declare type AzureADOnlyAuthentication = ProxyResource & {
    /** Azure Active Directory only Authentication enabled. */
    azureADOnlyAuthentication?: boolean;
    /**
     * property configuration state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: StateValue;
    /**
     * property configuration date
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
};

/** A list of active directory only authentications. */
export declare interface AzureADOnlyAuthenticationListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: AzureADOnlyAuthentication[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for AzureADOnlyAuthenticationName. \
 * {@link KnownAzureADOnlyAuthenticationName} can be used interchangeably with AzureADOnlyAuthenticationName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type AzureADOnlyAuthenticationName = string;

/** Interface representing a AzureADOnlyAuthentications. */
export declare interface AzureADOnlyAuthentications {
    /**
     * Gets a list of Azure Active Directory only authentication property for a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: AzureADOnlyAuthenticationsListOptionalParams): PagedAsyncIterableIterator<AzureADOnlyAuthentication>;
    /**
     * Gets a Azure Active Directory only authentication property
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param azureADOnlyAuthenticationName name of the property
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, azureADOnlyAuthenticationName: AzureADOnlyAuthenticationName, options?: AzureADOnlyAuthenticationsGetOptionalParams): Promise<AzureADOnlyAuthenticationsGetResponse>;
    /**
     * Create or Update a Azure Active Directory only authentication property for the workspaces
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param azureADOnlyAuthenticationName name of the property
     * @param azureADOnlyAuthenticationInfo Azure Active Directory Property
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, workspaceName: string, azureADOnlyAuthenticationName: AzureADOnlyAuthenticationName, azureADOnlyAuthenticationInfo: AzureADOnlyAuthentication, options?: AzureADOnlyAuthenticationsCreateOptionalParams): Promise<PollerLike<PollOperationState<AzureADOnlyAuthenticationsCreateResponse>, AzureADOnlyAuthenticationsCreateResponse>>;
    /**
     * Create or Update a Azure Active Directory only authentication property for the workspaces
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param azureADOnlyAuthenticationName name of the property
     * @param azureADOnlyAuthenticationInfo Azure Active Directory Property
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, workspaceName: string, azureADOnlyAuthenticationName: AzureADOnlyAuthenticationName, azureADOnlyAuthenticationInfo: AzureADOnlyAuthentication, options?: AzureADOnlyAuthenticationsCreateOptionalParams): Promise<AzureADOnlyAuthenticationsCreateResponse>;
}

/** Optional parameters. */
export declare interface AzureADOnlyAuthenticationsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type AzureADOnlyAuthenticationsCreateResponse = AzureADOnlyAuthentication;

/** Optional parameters. */
export declare interface AzureADOnlyAuthenticationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type AzureADOnlyAuthenticationsGetResponse = AzureADOnlyAuthentication;

/** Optional parameters. */
export declare interface AzureADOnlyAuthenticationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type AzureADOnlyAuthenticationsListNextResponse = AzureADOnlyAuthenticationListResult;

/** Optional parameters. */
export declare interface AzureADOnlyAuthenticationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type AzureADOnlyAuthenticationsListResponse = AzureADOnlyAuthenticationListResult;

/** Azure capacity definition. */
export declare interface AzureCapacity {
    /** Scale type. */
    scaleType: AzureScaleType;
    /** Minimum allowed capacity. */
    minimum: number;
    /** Maximum allowed capacity. */
    maximum: number;
    /** The default capacity that would be used. */
    default: number;
}

/** The resource model definition for an Azure Resource Manager resource with an etag. */
export declare type AzureEntityResource = Resource & {
    /**
     * Resource Etag.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
};

/** Azure resource SKU definition. */
export declare interface AzureResourceSku {
    /** Resource Namespace and Type. */
    resourceType?: string;
    /** The SKU details. */
    sku?: AzureSku;
    /** The number of instances of the cluster. */
    capacity?: AzureCapacity;
}

/**
 * Defines values for AzureScaleType. \
 * {@link KnownAzureScaleType} can be used interchangeably with AzureScaleType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **automatic** \
 * **manual** \
 * **none**
 */
export declare type AzureScaleType = string;

/** Azure SKU definition. */
export declare interface AzureSku {
    /** SKU name. */
    name: SkuName;
    /** The number of instances of the cluster. */
    capacity?: number;
    /** SKU size. */
    size: SkuSize;
}

/** Properties patch for a Big Data pool */
export declare interface BigDataPoolPatchInfo {
    /** Updated tags for the Big Data pool */
    tags?: {
        [propertyName: string]: string;
    };
}

/** A Big Data pool */
export declare type BigDataPoolResourceInfo = TrackedResource & {
    /** The state of the Big Data pool. */
    provisioningState?: string;
    /** Auto-scaling properties */
    autoScale?: AutoScaleProperties;
    /**
     * The time when the Big Data pool was created.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
    /** Auto-pausing properties */
    autoPause?: AutoPauseProperties;
    /** Whether compute isolation is required or not. */
    isComputeIsolationEnabled?: boolean;
    /** Whether session level packages enabled. */
    sessionLevelPackagesEnabled?: boolean;
    /** The cache size */
    cacheSize?: number;
    /** Dynamic Executor Allocation */
    dynamicExecutorAllocation?: DynamicExecutorAllocation;
    /** The Spark events folder */
    sparkEventsFolder?: string;
    /** The number of nodes in the Big Data pool. */
    nodeCount?: number;
    /** Library version requirements */
    libraryRequirements?: LibraryRequirements;
    /** List of custom libraries/packages associated with the spark pool. */
    customLibraries?: LibraryInfo[];
    /** Spark configuration file to specify additional properties */
    sparkConfigProperties?: SparkConfigProperties;
    /** The Apache Spark version. */
    sparkVersion?: string;
    /** The default folder where Spark logs will be written. */
    defaultSparkLogFolder?: string;
    /** The level of compute power that each node in the Big Data pool has. */
    nodeSize?: NodeSize;
    /** The kind of nodes that the Big Data pool provides. */
    nodeSizeFamily?: NodeSizeFamily;
    /**
     * The time when the Big Data pool was updated successfully.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastSucceededTimestamp?: Date;
};

/** Collection of Big Data pool information */
export declare interface BigDataPoolResourceInfoListResult {
    /** Link to the next page of results */
    nextLink?: string;
    /** List of Big Data pools */
    value?: BigDataPoolResourceInfo[];
}

/** Interface representing a BigDataPools. */
export declare interface BigDataPools {
    /**
     * List Big Data pools in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: BigDataPoolsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<BigDataPoolResourceInfo>;
    /**
     * Get a Big Data pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, bigDataPoolName: string, options?: BigDataPoolsGetOptionalParams): Promise<BigDataPoolsGetResponse>;
    /**
     * Patch a Big Data pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolPatchInfo The updated Big Data pool properties
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, bigDataPoolName: string, bigDataPoolPatchInfo: BigDataPoolPatchInfo, options?: BigDataPoolsUpdateOptionalParams): Promise<BigDataPoolsUpdateResponse>;
    /**
     * Create a new Big Data pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, bigDataPoolName: string, bigDataPoolInfo: BigDataPoolResourceInfo, options?: BigDataPoolsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<BigDataPoolsCreateOrUpdateResponse>, BigDataPoolsCreateOrUpdateResponse>>;
    /**
     * Create a new Big Data pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name
     * @param bigDataPoolInfo The Big Data pool to create.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, bigDataPoolName: string, bigDataPoolInfo: BigDataPoolResourceInfo, options?: BigDataPoolsCreateOrUpdateOptionalParams): Promise<BigDataPoolsCreateOrUpdateResponse>;
    /**
     * Delete a Big Data pool from the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, bigDataPoolName: string, options?: BigDataPoolsDeleteOptionalParams): Promise<PollerLike<PollOperationState<BigDataPoolsDeleteResponse>, BigDataPoolsDeleteResponse>>;
    /**
     * Delete a Big Data pool from the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param bigDataPoolName Big Data pool name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, bigDataPoolName: string, options?: BigDataPoolsDeleteOptionalParams): Promise<BigDataPoolsDeleteResponse>;
}

/** Optional parameters. */
export declare interface BigDataPoolsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Whether to stop any running jobs in the Big Data pool */
    force?: boolean;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type BigDataPoolsCreateOrUpdateResponse = BigDataPoolResourceInfo;

/** Optional parameters. */
export declare interface BigDataPoolsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type BigDataPoolsDeleteResponse = Record<string, unknown>;

/** Optional parameters. */
export declare interface BigDataPoolsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type BigDataPoolsGetResponse = BigDataPoolResourceInfo;

/** Optional parameters. */
export declare interface BigDataPoolsListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type BigDataPoolsListByWorkspaceNextResponse = BigDataPoolResourceInfoListResult;

/** Optional parameters. */
export declare interface BigDataPoolsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type BigDataPoolsListByWorkspaceResponse = BigDataPoolResourceInfoListResult;

/** Optional parameters. */
export declare interface BigDataPoolsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type BigDataPoolsUpdateResponse = BigDataPoolResourceInfo;

/**
 * Defines values for BlobAuditingPolicyName. \
 * {@link KnownBlobAuditingPolicyName} can be used interchangeably with BlobAuditingPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type BlobAuditingPolicyName = string;

/** Defines values for BlobAuditingPolicyState. */
export declare type BlobAuditingPolicyState = "Enabled" | "Disabled";

/**
 * Defines values for BlobStorageEventType. \
 * {@link KnownBlobStorageEventType} can be used interchangeably with BlobStorageEventType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.Storage.BlobCreated** \
 * **Microsoft.Storage.BlobRenamed**
 */
export declare type BlobStorageEventType = string;

/** A request about whether a workspace name is available */
export declare interface CheckNameAvailabilityRequest {
    /** Workspace name */
    name?: string;
    /** Type: workspace */
    type?: string;
}

/** A response saying whether the workspace name is available */
export declare interface CheckNameAvailabilityResponse {
    /** Validation message */
    message?: string;
    /** Whether the workspace name is available */
    available?: boolean;
    /** Reason the workspace name is or is not available */
    reason?: string;
    /** Workspace name */
    name?: string;
}

/** The result returned from a check name availability request. */
export declare interface CheckNameResult {
    /** Specifies a Boolean value that indicates if the name is available. */
    nameAvailable?: boolean;
    /** The name that was checked. */
    name?: string;
    /** Message indicating an unavailable name due to a conflict, or a description of the naming rules that are violated. */
    message?: string;
    /** Message providing the reason why the given name is invalid. */
    reason?: Reason;
}

/** Class representing a cluster principal assignment. */
export declare type ClusterPrincipalAssignment = ProxyResource & {
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The principal ID assigned to the cluster principal. It can be a user email, application ID, or security group name. */
    principalId?: string;
    /** Cluster principal role. */
    role?: ClusterPrincipalRole;
    /** The tenant id of the principal */
    tenantId?: string;
    /** Principal type. */
    principalType?: PrincipalType;
    /**
     * The tenant name of the principal
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantName?: string;
    /**
     * The principal name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalName?: string;
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
};

/** A principal assignment check name availability request. */
export declare interface ClusterPrincipalAssignmentCheckNameRequest {
    /** Principal Assignment resource name. */
    name: string;
    /** The type of resource, Microsoft.Synapse/workspaces/kustoPools/principalAssignments. */
    type: "Microsoft.Synapse/workspaces/kustoPools/principalAssignments";
}

/** The list Kusto cluster principal assignments operation response. */
export declare interface ClusterPrincipalAssignmentListResult {
    /** The list of Kusto cluster principal assignments. */
    value?: ClusterPrincipalAssignment[];
}

/**
 * Defines values for ClusterPrincipalRole. \
 * {@link KnownClusterPrincipalRole} can be used interchangeably with ClusterPrincipalRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AllDatabasesAdmin** \
 * **AllDatabasesViewer**
 */
export declare type ClusterPrincipalRole = string;

/** The custom setup of running cmdkey commands. */
export declare type CmdkeySetup = CustomSetupBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CmdkeySetup";
    /** The server name of data source access. */
    targetName: Record<string, unknown>;
    /** The user name of data source access. */
    userName: Record<string, unknown>;
    /** The password of data source access. */
    password: SecretBaseUnion;
};

/**
 * Defines values for ColumnDataType. \
 * {@link KnownColumnDataType} can be used interchangeably with ColumnDataType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **image** \
 * **text** \
 * **uniqueidentifier** \
 * **date** \
 * **time** \
 * **datetime2** \
 * **datetimeoffset** \
 * **tinyint** \
 * **smallint** \
 * **int** \
 * **smalldatetime** \
 * **real** \
 * **money** \
 * **datetime** \
 * **float** \
 * **sql_variant** \
 * **ntext** \
 * **bit** \
 * **decimal** \
 * **numeric** \
 * **smallmoney** \
 * **bigint** \
 * **hierarchyid** \
 * **geometry** \
 * **geography** \
 * **varbinary** \
 * **varchar** \
 * **binary** \
 * **char** \
 * **timestamp** \
 * **nvarchar** \
 * **nchar** \
 * **xml** \
 * **sysname**
 */
export declare type ColumnDataType = string;

/** The custom setup of installing 3rd party components. */
export declare type ComponentSetup = CustomSetupBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "ComponentSetup";
    /** The name of the 3rd party component. */
    componentName: string;
    /** The license key to activate the component. */
    licenseKey?: SecretBaseUnion;
};

/**
 * Defines values for Compression. \
 * {@link KnownCompression} can be used interchangeably with Compression,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **GZip**
 */
export declare type Compression = string;

/**
 * Defines values for ConfigurationType. \
 * {@link KnownConfigurationType} can be used interchangeably with ConfigurationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **File** \
 * **Artifact**
 */
export declare type ConfigurationType = string;

/**
 * Defines values for ConnectionPolicyName. \
 * {@link KnownConnectionPolicyName} can be used interchangeably with ConnectionPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type ConnectionPolicyName = string;

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export declare type CreatedByType = string;

/**
 * Defines values for CreateMode. \
 * {@link KnownCreateMode} can be used interchangeably with CreateMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **PointInTimeRestore** \
 * **Recovery** \
 * **Restore**
 */
export declare type CreateMode = string;

/** Contains the information necessary to perform a create Sql pool restore point operation. */
export declare interface CreateSqlPoolRestorePointDefinition {
    /** The restore point label to apply */
    restorePointLabel: string;
}

/** Initial workspace AAD admin properties for a CSP subscription */
export declare interface CspWorkspaceAdminProperties {
    /** AAD object ID of initial workspace admin */
    initialWorkspaceAdminObjectId?: string;
}

/** Details of the customer managed key associated with the workspace */
export declare interface CustomerManagedKeyDetails {
    /**
     * The customer managed key status on the workspace
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /** The key object of the workspace */
    key?: WorkspaceKeyDetails;
    /** Key encryption key */
    kekIdentity?: KekIdentityProperties;
}

/** The base definition of the custom setup. */
export declare interface CustomSetupBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "CmdkeySetup" | "EnvironmentVariableSetup" | "ComponentSetup";
}

export declare type CustomSetupBaseUnion = CustomSetupBase | CmdkeySetup | EnvironmentVariableSetup | ComponentSetup;

/** Class representing a Kusto database. */
export declare type Database = ProxyResource & {
    /** Resource location. */
    location?: string;
    /** Kind of the database */
    kind: Kind;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
};

/** The result returned from a database check name availability request. */
export declare interface DatabaseCheckNameRequest {
    /** Resource name. */
    name: string;
    /** The type of resource, for instance Microsoft.Synapse/workspaces/kustoPools/databases. */
    type: Type;
}

/** The list Kusto databases operation response. */
export declare interface DatabaseListResult {
    /** The list of Kusto databases. */
    value?: DatabaseUnion[];
}

/** Class representing a database principal assignment. */
export declare type DatabasePrincipalAssignment = ProxyResource & {
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /** The principal ID assigned to the database principal. It can be a user email, application ID, or security group name. */
    principalId?: string;
    /** Database principal role. */
    role?: DatabasePrincipalRole;
    /** The tenant id of the principal */
    tenantId?: string;
    /** Principal type. */
    principalType?: PrincipalType;
    /**
     * The tenant name of the principal
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantName?: string;
    /**
     * The principal name
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalName?: string;
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
};

/** A principal assignment check name availability request. */
export declare interface DatabasePrincipalAssignmentCheckNameRequest {
    /** Principal Assignment resource name. */
    name: string;
    /** The type of resource, Microsoft.Synapse/workspaces/kustoPools/databases/principalAssignments. */
    type: "Microsoft.Synapse/workspaces/kustoPools/databases/principalAssignments";
}

/** The list Kusto database principal assignments operation response. */
export declare interface DatabasePrincipalAssignmentListResult {
    /** The list of Kusto database principal assignments. */
    value?: DatabasePrincipalAssignment[];
}

/**
 * Defines values for DatabasePrincipalRole. \
 * {@link KnownDatabasePrincipalRole} can be used interchangeably with DatabasePrincipalRole,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Admin** \
 * **Ingestor** \
 * **Monitor** \
 * **User** \
 * **UnrestrictedViewer** \
 * **Viewer**
 */
export declare type DatabasePrincipalRole = string;

/** A class that contains database statistics information. */
export declare interface DatabaseStatistics {
    /** The database size - the total size of compressed data and index in bytes. */
    size?: number;
}

export declare type DatabaseUnion = Database | ReadWriteDatabase | ReadOnlyFollowingDatabase;

/** Class representing a data connection. */
export declare type DataConnection = ProxyResource & {
    /** Resource location. */
    location?: string;
    /** Kind of the endpoint for the data connection */
    kind: DataConnectionKind;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
};

/** A data connection check name availability request. */
export declare interface DataConnectionCheckNameRequest {
    /** Data Connection name. */
    name: string;
    /** The type of resource, Microsoft.Synapse/workspaces/kustoPools/databases/dataConnections. */
    type: "Microsoft.Synapse/workspaces/kustoPools/databases/dataConnections";
}

/**
 * Defines values for DataConnectionKind. \
 * {@link KnownDataConnectionKind} can be used interchangeably with DataConnectionKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **EventHub** \
 * **EventGrid** \
 * **IotHub**
 */
export declare type DataConnectionKind = string;

/** The list Kusto data connections operation response. */
export declare interface DataConnectionListResult {
    /** The list of Kusto data connections. */
    value?: DataConnectionUnion[];
}

export declare type DataConnectionUnion = DataConnection | EventHubDataConnection | IotHubDataConnection | EventGridDataConnection;

/** Class representing an data connection validation. */
export declare interface DataConnectionValidation {
    /** The name of the data connection. */
    dataConnectionName?: string;
    /** The data connection properties to validate. */
    properties?: DataConnectionUnion;
}

/** The list Kusto data connection validation result. */
export declare interface DataConnectionValidationListResult {
    /** The list of Kusto data connection validation errors. */
    value?: DataConnectionValidationResult[];
}

/** The result returned from a data connection validation request. */
export declare interface DataConnectionValidationResult {
    /** A message which indicates a problem in data connection validation. */
    errorMessage?: string;
}

/**
 * Defines values for DataFlowComputeType. \
 * {@link KnownDataFlowComputeType} can be used interchangeably with DataFlowComputeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **General** \
 * **MemoryOptimized** \
 * **ComputeOptimized**
 */
export declare type DataFlowComputeType = string;

/** Details of the data lake storage account associated with the workspace */
export declare interface DataLakeStorageAccountDetails {
    /** Account URL */
    accountUrl?: string;
    /** Filesystem name */
    filesystem?: string;
    /** ARM resource Id of this storage account */
    resourceId?: string;
    /** Create managed private endpoint to this storage account or not */
    createManagedPrivateEndpoint?: boolean;
}

/** Defines values for DataMaskingFunction. */
export declare type DataMaskingFunction = "Default" | "CCN" | "Email" | "Number" | "SSN" | "Text";

/** Interface representing a DataMaskingPolicies. */
export declare interface DataMaskingPolicies {
    /**
     * Creates or updates a Sql pool data masking policy
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters Parameters for creating or updating a data masking policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, parameters: DataMaskingPolicy, options?: DataMaskingPoliciesCreateOrUpdateOptionalParams): Promise<DataMaskingPoliciesCreateOrUpdateResponse>;
    /**
     * Gets a Sql pool data masking policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: DataMaskingPoliciesGetOptionalParams): Promise<DataMaskingPoliciesGetResponse>;
}

/** Optional parameters. */
export declare interface DataMaskingPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DataMaskingPoliciesCreateOrUpdateResponse = DataMaskingPolicy;

/** Optional parameters. */
export declare interface DataMaskingPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DataMaskingPoliciesGetResponse = DataMaskingPolicy;

export declare type DataMaskingPolicy = ProxyResource & {
    /**
     * The location of the data masking policy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * The kind of data masking policy. Metadata, used for Azure portal.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /**
     * Fully qualified resource ID of the sql pool
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managedBy?: string;
    /** The state of the data masking policy. */
    dataMaskingState?: DataMaskingState;
    /** The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries. */
    exemptPrincipals?: string;
    /**
     * The list of the application principals. This is a legacy parameter and is no longer used.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly applicationPrincipals?: string;
    /**
     * The masking level. This is a legacy parameter and is no longer used.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maskingLevel?: string;
};

/** Represents a Sql pool data masking rule. */
export declare type DataMaskingRule = ProxyResource & {
    /**
     * The location of the data masking rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * The kind of Data Masking Rule. Metadata, used for Azure portal.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /**
     * The rule Id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly idPropertiesId?: string;
    /** The alias name. This is a legacy parameter and is no longer used. */
    aliasName?: string;
    /** The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState. */
    ruleState?: DataMaskingRuleState;
    /** The schema name on which the data masking rule is applied. */
    schemaName?: string;
    /** The table name on which the data masking rule is applied. */
    tableName?: string;
    /** The column name on which the data masking rule is applied. */
    columnName?: string;
    /** The masking function that is used for the data masking rule. */
    maskingFunction?: DataMaskingFunction;
    /** The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored. */
    numberFrom?: string;
    /** The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored. */
    numberTo?: string;
    /** If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored. */
    prefixSize?: string;
    /** If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored. */
    suffixSize?: string;
    /** If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored. */
    replacementString?: string;
};

/** The response to a list data masking rules request. */
export declare interface DataMaskingRuleListResult {
    /** The list of Sql pool data masking rules. */
    value?: DataMaskingRule[];
}

/** Interface representing a DataMaskingRules. */
export declare interface DataMaskingRules {
    /**
     * Gets a list of Sql pool data masking rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    listBySqlPool(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: DataMaskingRulesListBySqlPoolOptionalParams): PagedAsyncIterableIterator<DataMaskingRule>;
    /**
     * Creates or updates a Sql pool data masking rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param dataMaskingRuleName The name of the data masking rule.
     * @param parameters The required parameters for creating or updating a data masking rule.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, dataMaskingRuleName: string, parameters: DataMaskingRule, options?: DataMaskingRulesCreateOrUpdateOptionalParams): Promise<DataMaskingRulesCreateOrUpdateResponse>;
    /**
     * Gets the specific Sql pool data masking rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param dataMaskingRuleName The name of the data masking rule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, dataMaskingRuleName: string, options?: DataMaskingRulesGetOptionalParams): Promise<DataMaskingRulesGetResponse>;
}

/** Optional parameters. */
export declare interface DataMaskingRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type DataMaskingRulesCreateOrUpdateResponse = DataMaskingRule;

/** Optional parameters. */
export declare interface DataMaskingRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type DataMaskingRulesGetResponse = DataMaskingRule;

/** Optional parameters. */
export declare interface DataMaskingRulesListBySqlPoolOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySqlPool operation. */
export declare type DataMaskingRulesListBySqlPoolResponse = DataMaskingRuleListResult;

/** Defines values for DataMaskingRuleState. */
export declare type DataMaskingRuleState = "Disabled" | "Enabled";

/** Defines values for DataMaskingState. */
export declare type DataMaskingState = "Disabled" | "Enabled";

/** User activities of a data warehouse */
export declare type DataWarehouseUserActivities = ProxyResource & {
    /**
     * Count of running and suspended queries.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activeQueriesCount?: number;
};

/**
 * Defines values for DataWarehouseUserActivityName. \
 * {@link KnownDataWarehouseUserActivityName} can be used interchangeably with DataWarehouseUserActivityName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **current**
 */
export declare type DataWarehouseUserActivityName = string;

/**
 * Defines values for DayOfWeek. \
 * {@link KnownDayOfWeek} can be used interchangeably with DayOfWeek,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sunday** \
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday**
 */
export declare type DayOfWeek = string;

/**
 * Defines values for DefaultPrincipalsModificationKind. \
 * {@link KnownDefaultPrincipalsModificationKind} can be used interchangeably with DefaultPrincipalsModificationKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Union** \
 * **Replace** \
 * **None**
 */
export declare type DefaultPrincipalsModificationKind = string;

/** Dynamic Executor Allocation Properties */
export declare interface DynamicExecutorAllocation {
    /** Indicates whether Dynamic Executor Allocation is enabled or not. */
    enabled?: boolean;
    /** The minimum number of executors alloted */
    minExecutors?: number;
    /** The maximum number of executors alloted */
    maxExecutors?: number;
}

/** Details of the encryption associated with the workspace */
export declare interface EncryptionDetails {
    /**
     * Double Encryption enabled
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly doubleEncryptionEnabled?: boolean;
    /** Customer Managed Key Details */
    cmk?: CustomerManagedKeyDetails;
}

/** The server encryption protector. */
export declare type EncryptionProtector = ProxyResource & {
    /**
     * Kind of encryption protector. This is metadata used for the Azure portal experience.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /**
     * Resource location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * Subregion of the encryption protector.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subregion?: string;
    /** The name of the server key. */
    serverKeyName?: string;
    /** The encryption protector type like 'ServiceManaged', 'AzureKeyVault'. */
    serverKeyType?: ServerKeyType;
    /**
     * The URI of the server key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uri?: string;
    /**
     * Thumbprint of the server key.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly thumbprint?: string;
};

/** A list of server encryption protectors. */
export declare interface EncryptionProtectorListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: EncryptionProtector[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for EncryptionProtectorName. \
 * {@link KnownEncryptionProtectorName} can be used interchangeably with EncryptionProtectorName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **current**
 */
export declare type EncryptionProtectorName = string;

/** The entity reference. */
export declare interface EntityReference {
    /** The type of this referenced entity. */
    type?: IntegrationRuntimeEntityReferenceType;
    /** The name of this referenced entity. */
    referenceName?: string;
}

/** The custom setup of setting environment variable. */
export declare type EnvironmentVariableSetup = CustomSetupBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "EnvironmentVariableSetup";
    /** The name of the environment variable. */
    variableName: string;
    /** The value of the environment variable. */
    variableValue: string;
};

/** The resource management error additional info. */
export declare interface ErrorAdditionalInfo {
    /**
     * The additional info type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly info?: Record<string, unknown>;
}

/** The error detail. */
export declare interface ErrorDetail {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
    /**
     * The error target.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly target?: string;
    /**
     * The error details.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly details?: ErrorDetail[];
    /**
     * The error additional info.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export declare interface ErrorResponse {
    /** The error object. */
    error?: ErrorDetail;
}

/** Class representing an Event Grid data connection. */
export declare type EventGridDataConnection = DataConnection & {
    /** The resource ID of the storage account where the data resides. */
    storageAccountResourceId?: string;
    /** The resource ID where the event grid is configured to send events. */
    eventHubResourceId?: string;
    /** The event hub consumer group. */
    consumerGroup?: string;
    /** The table where the data should be ingested. Optionally the table information can be added to each message. */
    tableName?: string;
    /** The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message. */
    mappingRuleName?: string;
    /** The data format of the message. Optionally the data format can be added to each message. */
    dataFormat?: EventGridDataFormat;
    /** A Boolean value that, if set to true, indicates that ingestion should ignore the first record of every file */
    ignoreFirstRecord?: boolean;
    /** The name of blob storage event type to process. */
    blobStorageEventType?: BlobStorageEventType;
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
};

/**
 * Defines values for EventGridDataFormat. \
 * {@link KnownEventGridDataFormat} can be used interchangeably with EventGridDataFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MULTIJSON** \
 * **JSON** \
 * **CSV** \
 * **TSV** \
 * **SCSV** \
 * **SOHSV** \
 * **PSV** \
 * **TXT** \
 * **RAW** \
 * **SINGLEJSON** \
 * **AVRO** \
 * **TSVE** \
 * **PARQUET** \
 * **ORC** \
 * **APACHEAVRO** \
 * **W3CLOGFILE**
 */
export declare type EventGridDataFormat = string;

/** Class representing an event hub data connection. */
export declare type EventHubDataConnection = DataConnection & {
    /** The resource ID of the event hub to be used to create a data connection. */
    eventHubResourceId?: string;
    /** The event hub consumer group. */
    consumerGroup?: string;
    /** The table where the data should be ingested. Optionally the table information can be added to each message. */
    tableName?: string;
    /** The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message. */
    mappingRuleName?: string;
    /** The data format of the message. Optionally the data format can be added to each message. */
    dataFormat?: EventHubDataFormat;
    /** System properties of the event hub */
    eventSystemProperties?: string[];
    /** The event hub messages compression type */
    compression?: Compression;
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
    /** The resource ID of a managed identity (system or user assigned) to be used to authenticate with event hub. */
    managedIdentityResourceId?: string;
};

/**
 * Defines values for EventHubDataFormat. \
 * {@link KnownEventHubDataFormat} can be used interchangeably with EventHubDataFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MULTIJSON** \
 * **JSON** \
 * **CSV** \
 * **TSV** \
 * **SCSV** \
 * **SOHSV** \
 * **PSV** \
 * **TXT** \
 * **RAW** \
 * **SINGLEJSON** \
 * **AVRO** \
 * **TSVE** \
 * **PARQUET** \
 * **ORC** \
 * **APACHEAVRO** \
 * **W3CLOGFILE**
 */
export declare type EventHubDataFormat = string;

/** An extended server blob auditing policy. */
export declare type ExtendedServerBlobAuditingPolicy = ProxyResource & {
    /** Specifies condition of where clause when creating an audit. */
    predicateExpression?: string;
    /** Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required. */
    state?: BlobAuditingPolicyState;
    /** Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required. */
    storageEndpoint?: string;
    /**
     * Specifies the identifier key of the auditing storage account.
     * If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
     * Prerequisites for using managed identity authentication:
     * 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
     * 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.
     * For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
     */
    storageAccountAccessKey?: string;
    /** Specifies the number of days to keep in the audit logs in the storage account. */
    retentionDays?: number;
    /**
     * Specifies the Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     */
    auditActionsAndGroups?: string[];
    /** Specifies the blob storage subscription Id. */
    storageAccountSubscriptionId?: string;
    /** Specifies whether storageAccountAccessKey value is the storage's secondary key. */
    isStorageSecondaryKeyInUse?: boolean;
    /**
     * Specifies whether audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
     * Note that for server level audit you should use the 'master' database as {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     */
    isAzureMonitorTargetEnabled?: boolean;
    /**
     * Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
     * The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
     */
    queueDelayMs?: number;
    /**
     * Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled', 'IsAzureMonitorTargetEnabled' as true and 'IsDevopsAuditEnabled' as true
     *
     * When using REST API to configure auditing, Diagnostic Settings with 'DevOpsOperationsAudit' diagnostic logs category on the master database should also be created.
     *
     * Diagnostic Settings URI format:
     * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     */
    isDevopsAuditEnabled?: boolean;
};

/** A list of server extended auditing settings. */
export declare interface ExtendedServerBlobAuditingPolicyListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ExtendedServerBlobAuditingPolicy[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a ExtendedSqlPoolBlobAuditingPolicies. */
export declare interface ExtendedSqlPoolBlobAuditingPolicies {
    /**
     * Lists extended auditing settings of a Sql pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    listBySqlPool(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: ExtendedSqlPoolBlobAuditingPoliciesListBySqlPoolOptionalParams): PagedAsyncIterableIterator<ExtendedSqlPoolBlobAuditingPolicy>;
    /**
     * Gets an extended Sql pool's blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: ExtendedSqlPoolBlobAuditingPoliciesGetOptionalParams): Promise<ExtendedSqlPoolBlobAuditingPoliciesGetResponse>;
    /**
     * Creates or updates an extended Sql pool's blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters The extended Sql pool blob auditing policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, parameters: ExtendedSqlPoolBlobAuditingPolicy, options?: ExtendedSqlPoolBlobAuditingPoliciesCreateOrUpdateOptionalParams): Promise<ExtendedSqlPoolBlobAuditingPoliciesCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface ExtendedSqlPoolBlobAuditingPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type ExtendedSqlPoolBlobAuditingPoliciesCreateOrUpdateResponse = ExtendedSqlPoolBlobAuditingPolicy;

/** Optional parameters. */
export declare interface ExtendedSqlPoolBlobAuditingPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type ExtendedSqlPoolBlobAuditingPoliciesGetResponse = ExtendedSqlPoolBlobAuditingPolicy;

/** Optional parameters. */
export declare interface ExtendedSqlPoolBlobAuditingPoliciesListBySqlPoolNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySqlPoolNext operation. */
export declare type ExtendedSqlPoolBlobAuditingPoliciesListBySqlPoolNextResponse = ExtendedSqlPoolBlobAuditingPolicyListResult;

/** Optional parameters. */
export declare interface ExtendedSqlPoolBlobAuditingPoliciesListBySqlPoolOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySqlPool operation. */
export declare type ExtendedSqlPoolBlobAuditingPoliciesListBySqlPoolResponse = ExtendedSqlPoolBlobAuditingPolicyListResult;

/** An extended Sql pool blob auditing policy. */
export declare type ExtendedSqlPoolBlobAuditingPolicy = ProxyResource & {
    /** Specifies condition of where clause when creating an audit. */
    predicateExpression?: string;
    /** Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required. */
    state?: BlobAuditingPolicyState;
    /** Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required. */
    storageEndpoint?: string;
    /**
     * Specifies the identifier key of the auditing storage account.
     * If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
     * Prerequisites for using managed identity authentication:
     * 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
     * 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.
     * For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
     */
    storageAccountAccessKey?: string;
    /** Specifies the number of days to keep in the audit logs in the storage account. */
    retentionDays?: number;
    /**
     * Specifies the Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     */
    auditActionsAndGroups?: string[];
    /** Specifies the blob storage subscription Id. */
    storageAccountSubscriptionId?: string;
    /** Specifies whether storageAccountAccessKey value is the storage's secondary key. */
    isStorageSecondaryKeyInUse?: boolean;
    /**
     * Specifies whether audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
     * Note that for server level audit you should use the 'master' database as {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     */
    isAzureMonitorTargetEnabled?: boolean;
    /**
     * Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
     * The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
     */
    queueDelayMs?: number;
};

/** A list of sql pool extended auditing settings. */
export declare interface ExtendedSqlPoolBlobAuditingPolicyListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ExtendedSqlPoolBlobAuditingPolicy[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** A class representing follower database request. */
export declare interface FollowerDatabaseDefinition {
    /** Resource id of the cluster that follows a database owned by this cluster. */
    kustoPoolResourceId: string;
    /** Resource name of the attached database configuration in the follower cluster. */
    attachedDatabaseConfigurationName: string;
    /**
     * The database name owned by this cluster that was followed. * in case following all databases.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly databaseName?: string;
}

/** The list Kusto database principals operation response. */
export declare interface FollowerDatabaseListResult {
    /** The list of follower database result. */
    value?: FollowerDatabaseDefinition[];
}

/** A database geo backup policy. */
export declare type GeoBackupPolicy = ProxyResource & {
    /**
     * Kind of geo backup policy.  This is metadata used for the Azure portal experience.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /**
     * Backup policy location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** The state of the geo backup policy. */
    state: GeoBackupPolicyState;
    /**
     * The storage type of the geo backup policy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageType?: string;
};

/** The response to a list geo backup policies request. */
export declare interface GeoBackupPolicyListResult {
    /** The list of geo backup policies. */
    value?: GeoBackupPolicy[];
}

/**
 * Defines values for GeoBackupPolicyName. \
 * {@link KnownGeoBackupPolicyName} can be used interchangeably with GeoBackupPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**
 */
export declare type GeoBackupPolicyName = string;

/** Defines values for GeoBackupPolicyState. */
export declare type GeoBackupPolicyState = "Disabled" | "Enabled";

/** The request payload of get SSIS object metadata. */
export declare interface GetSsisObjectMetadataRequest {
    /** Metadata path. */
    metadataPath?: string;
}

/** Azure Synapse nested object which serves as a compute resource for activities. */
export declare interface IntegrationRuntime {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Managed" | "SelfHosted";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Integration runtime description. */
    description?: string;
}

/**
 * Defines values for IntegrationRuntimeAuthKeyName. \
 * {@link KnownIntegrationRuntimeAuthKeyName} can be used interchangeably with IntegrationRuntimeAuthKeyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **authKey1** \
 * **authKey2**
 */
export declare type IntegrationRuntimeAuthKeyName = string;

/** The integration runtime authentication keys. */
export declare interface IntegrationRuntimeAuthKeys {
    /** The primary integration runtime authentication key. */
    authKey1?: string;
    /** The secondary integration runtime authentication key. */
    authKey2?: string;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeAuthKeysListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type IntegrationRuntimeAuthKeysListResponse = IntegrationRuntimeAuthKeys;

/** Interface representing a IntegrationRuntimeAuthKeysOperations. */
export declare interface IntegrationRuntimeAuthKeysOperations {
    /**
     * Regenerate the authentication key for an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param regenerateKeyParameters The parameters for regenerating integration runtime authentication
     *                                key.
     * @param options The options parameters.
     */
    regenerate(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, regenerateKeyParameters: IntegrationRuntimeRegenerateKeyParameters, options?: IntegrationRuntimeAuthKeysRegenerateOptionalParams): Promise<IntegrationRuntimeAuthKeysRegenerateResponse>;
    /**
     * List authentication keys in an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimeAuthKeysListOptionalParams): Promise<IntegrationRuntimeAuthKeysListResponse>;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeAuthKeysRegenerateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the regenerate operation. */
export declare type IntegrationRuntimeAuthKeysRegenerateResponse = IntegrationRuntimeAuthKeys;

/**
 * Defines values for IntegrationRuntimeAutoUpdate. \
 * {@link KnownIntegrationRuntimeAutoUpdate} can be used interchangeably with IntegrationRuntimeAutoUpdate,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **On** \
 * **Off**
 */
export declare type IntegrationRuntimeAutoUpdate = string;

/** The compute resource properties for managed integration runtime. */
export declare interface IntegrationRuntimeComputeProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities */
    location?: string;
    /** The node size requirement to managed integration runtime. */
    nodeSize?: string;
    /** The required number of nodes for managed integration runtime. */
    numberOfNodes?: number;
    /** Maximum parallel executions count per node for managed integration runtime. */
    maxParallelExecutionsPerNode?: number;
    /** Data flow properties for managed integration runtime. */
    dataFlowProperties?: IntegrationRuntimeDataFlowProperties;
    /** VNet properties for managed integration runtime. */
    vNetProperties?: IntegrationRuntimeVNetProperties;
}

/** Connection information for encrypting the on-premises data source credentials. */
export declare interface IntegrationRuntimeConnectionInfo {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The token generated in service. Callers use this token to authenticate to integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceToken?: string;
    /**
     * The integration runtime SSL certificate thumbprint. Click-Once application uses it to do server validation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly identityCertThumbprint?: string;
    /**
     * The on-premises integration runtime host URL.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostServiceUri?: string;
    /**
     * The integration runtime version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The public key for encrypting a credential when transferring the credential to the integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly publicKey?: string;
    /**
     * Whether the identity certificate is expired.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isIdentityCertExprired?: boolean;
}

/** Interface representing a IntegrationRuntimeConnectionInfos. */
export declare interface IntegrationRuntimeConnectionInfos {
    /**
     * Get connection info for an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimeConnectionInfosGetOptionalParams): Promise<IntegrationRuntimeConnectionInfosGetResponse>;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeConnectionInfosGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationRuntimeConnectionInfosGetResponse = IntegrationRuntimeConnectionInfo;

/** Interface representing a IntegrationRuntimeCredentials. */
export declare interface IntegrationRuntimeCredentials {
    /**
     * Force the integration runtime to synchronize credentials across integration runtime nodes, and this
     * will override the credentials across all worker nodes with those available on the dispatcher node.
     * If you already have the latest credential backup file, you should manually import it (preferred) on
     * any self-hosted integration runtime node than using this API directly.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    sync(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimeCredentialsSyncOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeCredentialsSyncOptionalParams extends coreClient.OperationOptions {
}

/** Custom setup script properties for a managed dedicated integration runtime. */
export declare interface IntegrationRuntimeCustomSetupScriptProperties {
    /** The URI of the Azure blob container that contains the custom setup script. */
    blobContainerUri?: string;
    /** The SAS token of the Azure blob container. */
    sasToken?: SecureString;
}

/** Data flow properties for managed integration runtime. */
export declare interface IntegrationRuntimeDataFlowProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Compute type of the cluster which will execute data flow job. */
    computeType?: DataFlowComputeType;
    /** Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272. */
    coreCount?: number;
    /** Time to live (in minutes) setting of the cluster which will execute data flow job. */
    timeToLive?: number;
    /** Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if this is set as false. Default is true. */
    cleanup?: boolean;
}

/** Data proxy properties for a managed dedicated integration runtime. */
export declare interface IntegrationRuntimeDataProxyProperties {
    /** The self-hosted integration runtime reference. */
    connectVia?: EntityReference;
    /** The staging linked service reference. */
    stagingLinkedService?: EntityReference;
    /** The path to contain the staged data in the Blob storage. */
    path?: string;
}

/**
 * Defines values for IntegrationRuntimeEdition. \
 * {@link KnownIntegrationRuntimeEdition} can be used interchangeably with IntegrationRuntimeEdition,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Standard** \
 * **Enterprise**
 */
export declare type IntegrationRuntimeEdition = string;

/**
 * Defines values for IntegrationRuntimeEntityReferenceType. \
 * {@link KnownIntegrationRuntimeEntityReferenceType} can be used interchangeably with IntegrationRuntimeEntityReferenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IntegrationRuntimeReference** \
 * **LinkedServiceReference**
 */
export declare type IntegrationRuntimeEntityReferenceType = string;

/**
 * Defines values for IntegrationRuntimeInternalChannelEncryptionMode. \
 * {@link KnownIntegrationRuntimeInternalChannelEncryptionMode} can be used interchangeably with IntegrationRuntimeInternalChannelEncryptionMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NotSet** \
 * **SslEncrypted** \
 * **NotEncrypted**
 */
export declare type IntegrationRuntimeInternalChannelEncryptionMode = string;

/**
 * Defines values for IntegrationRuntimeLicenseType. \
 * {@link KnownIntegrationRuntimeLicenseType} can be used interchangeably with IntegrationRuntimeLicenseType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BasePrice** \
 * **LicenseIncluded**
 */
export declare type IntegrationRuntimeLicenseType = string;

/** A list of integration runtime resources. */
export declare interface IntegrationRuntimeListResponse {
    /** List of integration runtimes. */
    value: IntegrationRuntimeResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Get monitoring data response. */
export declare interface IntegrationRuntimeMonitoringData {
    /** Integration runtime name. */
    name?: string;
    /** Integration runtime node monitoring data. */
    nodes?: IntegrationRuntimeNodeMonitoringData[];
}

/** Optional parameters. */
export declare interface IntegrationRuntimeMonitoringDataListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type IntegrationRuntimeMonitoringDataListResponse = IntegrationRuntimeMonitoringData;

/** Interface representing a IntegrationRuntimeMonitoringDataOperations. */
export declare interface IntegrationRuntimeMonitoringDataOperations {
    /**
     * Get monitoring data for an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimeMonitoringDataListOptionalParams): Promise<IntegrationRuntimeMonitoringDataListResponse>;
}

/** The IP address of self-hosted integration runtime node. */
export declare interface IntegrationRuntimeNodeIpAddress {
    /**
     * The IP address of self-hosted integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly ipAddress?: string;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeNodeIpAddressGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationRuntimeNodeIpAddressGetResponse = IntegrationRuntimeNodeIpAddress;

/** Interface representing a IntegrationRuntimeNodeIpAddressOperations. */
export declare interface IntegrationRuntimeNodeIpAddressOperations {
    /**
     * Get the IP address of an integration runtime node
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param nodeName Integration runtime node name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, nodeName: string, options?: IntegrationRuntimeNodeIpAddressGetOptionalParams): Promise<IntegrationRuntimeNodeIpAddressGetResponse>;
}

/** Monitoring data for integration runtime node. */
export declare interface IntegrationRuntimeNodeMonitoringData {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * Name of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeName?: string;
    /**
     * Available memory (MB) on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly availableMemoryInMB?: number;
    /**
     * CPU percentage on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly cpuUtilization?: number;
    /**
     * Maximum concurrent jobs on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly concurrentJobsLimit?: number;
    /**
     * The number of jobs currently running on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly concurrentJobsRunning?: number;
    /**
     * The maximum concurrent jobs in this integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxConcurrentJobs?: number;
    /**
     * Sent bytes on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly sentBytes?: number;
    /**
     * Received bytes on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly receivedBytes?: number;
}

/** Interface representing a IntegrationRuntimeNodes. */
export declare interface IntegrationRuntimeNodes {
    /**
     * Get an integration runtime node
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param nodeName Integration runtime node name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, nodeName: string, options?: IntegrationRuntimeNodesGetOptionalParams): Promise<IntegrationRuntimeNodesGetResponse>;
    /**
     * Create an integration runtime node
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param nodeName Integration runtime node name
     * @param updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, nodeName: string, updateIntegrationRuntimeNodeRequest: UpdateIntegrationRuntimeNodeRequest, options?: IntegrationRuntimeNodesUpdateOptionalParams): Promise<IntegrationRuntimeNodesUpdateResponse>;
    /**
     * Delete an integration runtime node
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param nodeName Integration runtime node name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, nodeName: string, options?: IntegrationRuntimeNodesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeNodesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface IntegrationRuntimeNodesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationRuntimeNodesGetResponse = SelfHostedIntegrationRuntimeNode;

/** Optional parameters. */
export declare interface IntegrationRuntimeNodesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type IntegrationRuntimeNodesUpdateResponse = SelfHostedIntegrationRuntimeNode;

/** Interface representing a IntegrationRuntimeObjectMetadata. */
export declare interface IntegrationRuntimeObjectMetadata {
    /**
     * Get object metadata from an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimeObjectMetadataListOptionalParams): Promise<IntegrationRuntimeObjectMetadataListResponse>;
    /**
     * Refresh the object metadata in an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginRefresh(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimeObjectMetadataRefreshOptionalParams): Promise<PollerLike<PollOperationState<IntegrationRuntimeObjectMetadataRefreshResponse>, IntegrationRuntimeObjectMetadataRefreshResponse>>;
    /**
     * Refresh the object metadata in an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginRefreshAndWait(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimeObjectMetadataRefreshOptionalParams): Promise<IntegrationRuntimeObjectMetadataRefreshResponse>;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeObjectMetadataListOptionalParams extends coreClient.OperationOptions {
    /** The parameters for getting a SSIS object metadata. */
    getMetadataRequest?: GetSsisObjectMetadataRequest;
}

/** Contains response data for the list operation. */
export declare type IntegrationRuntimeObjectMetadataListResponse = SsisObjectMetadataListResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimeObjectMetadataRefreshOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the refresh operation. */
export declare type IntegrationRuntimeObjectMetadataRefreshResponse = SsisObjectMetadataStatusResponse;

/** Azure-SSIS integration runtime outbound network dependency endpoints for one category. */
export declare interface IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint {
    /** The category of outbound network dependency. */
    category?: string;
    /** The endpoints for outbound network dependency. */
    endpoints?: IntegrationRuntimeOutboundNetworkDependenciesEndpoint[];
}

/** The endpoint for Azure-SSIS integration runtime outbound network dependency. */
export declare interface IntegrationRuntimeOutboundNetworkDependenciesEndpoint {
    /** The domain name of endpoint. */
    domainName?: string;
    /** The details of endpoint. */
    endpointDetails?: IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails[];
}

/** The details of Azure-SSIS integration runtime outbound network dependency endpoint. */
export declare interface IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails {
    /** The port of endpoint. */
    port?: number;
}

/** Azure-SSIS integration runtime outbound network dependency endpoints. */
export declare interface IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse {
    /** The list of outbound network dependency endpoints. */
    value?: IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint[];
}

/** Parameters to regenerate the authentication key. */
export declare interface IntegrationRuntimeRegenerateKeyParameters {
    /** The name of the authentication key to regenerate. */
    keyName?: IntegrationRuntimeAuthKeyName;
}

/** Integration runtime resource type. */
export declare type IntegrationRuntimeResource = SubResource & {
    /** Integration runtime properties. */
    properties: IntegrationRuntimeUnion;
};

/** Interface representing a IntegrationRuntimes. */
export declare interface IntegrationRuntimes {
    /**
     * List all integration runtimes
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: IntegrationRuntimesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<IntegrationRuntimeResource>;
    /**
     * Update an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param updateIntegrationRuntimeRequest The parameters for updating an integration runtime.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, updateIntegrationRuntimeRequest: UpdateIntegrationRuntimeRequest, options?: IntegrationRuntimesUpdateOptionalParams): Promise<IntegrationRuntimesUpdateResponse>;
    /**
     * Get an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesGetOptionalParams): Promise<IntegrationRuntimesGetResponse>;
    /**
     * Create an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param integrationRuntime Integration runtime resource definition.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, integrationRuntime: IntegrationRuntimeResource, options?: IntegrationRuntimesCreateOptionalParams): Promise<PollerLike<PollOperationState<IntegrationRuntimesCreateResponse>, IntegrationRuntimesCreateResponse>>;
    /**
     * Create an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param integrationRuntime Integration runtime resource definition.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, integrationRuntime: IntegrationRuntimeResource, options?: IntegrationRuntimesCreateOptionalParams): Promise<IntegrationRuntimesCreateResponse>;
    /**
     * Delete an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesDeleteOptionalParams): Promise<void>;
    /**
     * Upgrade an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    upgrade(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesUpgradeOptionalParams): Promise<void>;
    /**
     * Start an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginStart(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesStartOptionalParams): Promise<PollerLike<PollOperationState<IntegrationRuntimesStartResponse>, IntegrationRuntimesStartResponse>>;
    /**
     * Start an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginStartAndWait(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesStartOptionalParams): Promise<IntegrationRuntimesStartResponse>;
    /**
     * Stop an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginStop(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stop an integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginStopAndWait(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesStopOptionalParams): Promise<void>;
    /**
     * Gets the list of outbound network dependencies for a given Azure-SSIS integration runtime.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    listOutboundNetworkDependenciesEndpoints(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesListOutboundNetworkDependenciesEndpointsOptionalParams): Promise<IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResponse>;
    /**
     * Enable interactive query in integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginEnableInteractiveQuery(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesEnableInteractiveQueryOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Enable interactive query in integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginEnableInteractiveQueryAndWait(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesEnableInteractiveQueryOptionalParams): Promise<void>;
    /**
     * Disable interactive query in integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginDisableInteractiveQuery(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesDisableInteractiveQueryOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Disable interactive query in integration runtime
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    beginDisableInteractiveQueryAndWait(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimesDisableInteractiveQueryOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface IntegrationRuntimesCreateOptionalParams extends coreClient.OperationOptions {
    /** ETag of the integration runtime entity. Should only be specified for update, for which it should match existing entity or can be * for unconditional update. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type IntegrationRuntimesCreateResponse = IntegrationRuntimeResource;

/** Optional parameters. */
export declare interface IntegrationRuntimesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface IntegrationRuntimesDisableInteractiveQueryOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface IntegrationRuntimesEnableInteractiveQueryOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface IntegrationRuntimesGetOptionalParams extends coreClient.OperationOptions {
    /** ETag of the integration runtime entity. Should only be specified for get. If the ETag matches the existing entity tag, or if * was provided, then no content will be returned. */
    ifNoneMatch?: string;
}

/** Contains response data for the get operation. */
export declare type IntegrationRuntimesGetResponse = IntegrationRuntimeResource;

/** Optional parameters. */
export declare interface IntegrationRuntimesListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type IntegrationRuntimesListByWorkspaceNextResponse = IntegrationRuntimeListResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type IntegrationRuntimesListByWorkspaceResponse = IntegrationRuntimeListResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimesListOutboundNetworkDependenciesEndpointsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listOutboundNetworkDependenciesEndpoints operation. */
export declare type IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResponse = IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse;

/** Catalog information for managed dedicated integration runtime. */
export declare interface IntegrationRuntimeSsisCatalogInfo {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The catalog database server URL. */
    catalogServerEndpoint?: string;
    /** The administrator user name of catalog database. */
    catalogAdminUserName?: string;
    /** The password of the administrator user account of the catalog database. */
    catalogAdminPassword?: SecureString;
    /** The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/ */
    catalogPricingTier?: IntegrationRuntimeSsisCatalogPricingTier;
}

/**
 * Defines values for IntegrationRuntimeSsisCatalogPricingTier. \
 * {@link KnownIntegrationRuntimeSsisCatalogPricingTier} can be used interchangeably with IntegrationRuntimeSsisCatalogPricingTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard** \
 * **Premium** \
 * **PremiumRS**
 */
export declare type IntegrationRuntimeSsisCatalogPricingTier = string;

/** SSIS properties for managed integration runtime. */
export declare interface IntegrationRuntimeSsisProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Catalog information for managed dedicated integration runtime. */
    catalogInfo?: IntegrationRuntimeSsisCatalogInfo;
    /** License type for bringing your own license scenario. */
    licenseType?: IntegrationRuntimeLicenseType;
    /** Custom setup script properties for a managed dedicated integration runtime. */
    customSetupScriptProperties?: IntegrationRuntimeCustomSetupScriptProperties;
    /** Data proxy properties for a managed dedicated integration runtime. */
    dataProxyProperties?: IntegrationRuntimeDataProxyProperties;
    /** The edition for the SSIS Integration Runtime */
    edition?: IntegrationRuntimeEdition;
    /** Custom setup without script properties for a SSIS integration runtime. */
    expressCustomSetupProperties?: CustomSetupBaseUnion[];
}

/** Optional parameters. */
export declare interface IntegrationRuntimesStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the start operation. */
export declare type IntegrationRuntimesStartResponse = IntegrationRuntimeStatusResponse;

/** Optional parameters. */
export declare interface IntegrationRuntimesStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/**
 * Defines values for IntegrationRuntimeState. \
 * {@link KnownIntegrationRuntimeState} can be used interchangeably with IntegrationRuntimeState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Stopped** \
 * **Started** \
 * **Starting** \
 * **Stopping** \
 * **NeedRegistration** \
 * **Online** \
 * **Limited** \
 * **Offline** \
 * **AccessDenied**
 */
export declare type IntegrationRuntimeState = string;

/** Integration runtime status. */
export declare interface IntegrationRuntimeStatus {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Managed" | "SelfHosted";
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The workspace name which the integration runtime belong to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataFactoryName?: string;
    /**
     * The state of integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: IntegrationRuntimeState;
}

/** Optional parameters. */
export declare interface IntegrationRuntimeStatusGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IntegrationRuntimeStatusGetResponse = IntegrationRuntimeStatusResponse;

/** Interface representing a IntegrationRuntimeStatusOperations. */
export declare interface IntegrationRuntimeStatusOperations {
    /**
     * Get the integration runtime status
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, options?: IntegrationRuntimeStatusGetOptionalParams): Promise<IntegrationRuntimeStatusGetResponse>;
}

/** Integration runtime status response. */
export declare interface IntegrationRuntimeStatusResponse {
    /**
     * The integration runtime name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /** Integration runtime properties. */
    properties: IntegrationRuntimeStatusUnion;
}

export declare type IntegrationRuntimeStatusUnion = IntegrationRuntimeStatus | ManagedIntegrationRuntimeStatus | SelfHostedIntegrationRuntimeStatus;

/** Optional parameters. */
export declare interface IntegrationRuntimesUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type IntegrationRuntimesUpdateResponse = IntegrationRuntimeResource;

/** Optional parameters. */
export declare interface IntegrationRuntimesUpgradeOptionalParams extends coreClient.OperationOptions {
}

/**
 * Defines values for IntegrationRuntimeType. \
 * {@link KnownIntegrationRuntimeType} can be used interchangeably with IntegrationRuntimeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Managed** \
 * **SelfHosted**
 */
export declare type IntegrationRuntimeType = string;

export declare type IntegrationRuntimeUnion = IntegrationRuntime | ManagedIntegrationRuntime | SelfHostedIntegrationRuntime;

/**
 * Defines values for IntegrationRuntimeUpdateResult. \
 * {@link KnownIntegrationRuntimeUpdateResult} can be used interchangeably with IntegrationRuntimeUpdateResult,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Succeed** \
 * **Fail**
 */
export declare type IntegrationRuntimeUpdateResult = string;

/** VNet properties for managed integration runtime. */
export declare interface IntegrationRuntimeVNetProperties {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** The ID of the VNet that this integration runtime will join. */
    vNetId?: string;
    /** The name of the subnet this integration runtime will join. */
    subnet?: string;
    /** Resource IDs of the public IP addresses that this integration runtime will use. */
    publicIPs?: string[];
    /** The ID of subnet, to which this Azure-SSIS integration runtime will be joined. */
    subnetId?: string;
}

/** Class representing an iot hub data connection. */
export declare type IotHubDataConnection = DataConnection & {
    /** The resource ID of the Iot hub to be used to create a data connection. */
    iotHubResourceId?: string;
    /** The iot hub consumer group. */
    consumerGroup?: string;
    /** The table where the data should be ingested. Optionally the table information can be added to each message. */
    tableName?: string;
    /** The mapping rule to be used to ingest the data. Optionally the mapping information can be added to each message. */
    mappingRuleName?: string;
    /** The data format of the message. Optionally the data format can be added to each message. */
    dataFormat?: IotHubDataFormat;
    /** System properties of the iot hub */
    eventSystemProperties?: string[];
    /** The name of the share access policy */
    sharedAccessPolicyName?: string;
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
};

/**
 * Defines values for IotHubDataFormat. \
 * {@link KnownIotHubDataFormat} can be used interchangeably with IotHubDataFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MULTIJSON** \
 * **JSON** \
 * **CSV** \
 * **TSV** \
 * **SCSV** \
 * **SOHSV** \
 * **PSV** \
 * **TXT** \
 * **RAW** \
 * **SINGLEJSON** \
 * **AVRO** \
 * **TSVE** \
 * **PARQUET** \
 * **ORC** \
 * **APACHEAVRO** \
 * **W3CLOGFILE**
 */
export declare type IotHubDataFormat = string;

/** IP firewall rule */
export declare type IpFirewallRuleInfo = ProxyResource & {
    /** The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress */
    endIpAddress?: string;
    /**
     * Resource provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The start IP address of the firewall rule. Must be IPv4 format */
    startIpAddress?: string;
};

/** List of IP firewall rules */
export declare interface IpFirewallRuleInfoListResult {
    /** Link to next page of results */
    nextLink?: string;
    /** List of IP firewall rules */
    value?: IpFirewallRuleInfo[];
}

/** IP firewall rule properties */
export declare interface IpFirewallRuleProperties {
    /** The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress */
    endIpAddress?: string;
    /**
     * Resource provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ProvisioningState;
    /** The start IP address of the firewall rule. Must be IPv4 format */
    startIpAddress?: string;
}

/** Interface representing a IpFirewallRules. */
export declare interface IpFirewallRules {
    /**
     * Returns a list of firewall rules
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: IpFirewallRulesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<IpFirewallRuleInfo>;
    /**
     * Creates or updates a firewall rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleName The IP firewall rule name
     * @param ipFirewallRuleInfo IP firewall rule properties
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, ruleName: string, ipFirewallRuleInfo: IpFirewallRuleInfo, options?: IpFirewallRulesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<IpFirewallRulesCreateOrUpdateResponse>, IpFirewallRulesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a firewall rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleName The IP firewall rule name
     * @param ipFirewallRuleInfo IP firewall rule properties
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, ruleName: string, ipFirewallRuleInfo: IpFirewallRuleInfo, options?: IpFirewallRulesCreateOrUpdateOptionalParams): Promise<IpFirewallRulesCreateOrUpdateResponse>;
    /**
     * Deletes a firewall rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleName The IP firewall rule name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, ruleName: string, options?: IpFirewallRulesDeleteOptionalParams): Promise<PollerLike<PollOperationState<IpFirewallRulesDeleteResponse>, IpFirewallRulesDeleteResponse>>;
    /**
     * Deletes a firewall rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleName The IP firewall rule name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, ruleName: string, options?: IpFirewallRulesDeleteOptionalParams): Promise<IpFirewallRulesDeleteResponse>;
    /**
     * Get a firewall rule
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param ruleName The IP firewall rule name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, ruleName: string, options?: IpFirewallRulesGetOptionalParams): Promise<IpFirewallRulesGetResponse>;
    /**
     * Replaces firewall rules
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param request Replace all IP firewall rules request
     * @param options The options parameters.
     */
    beginReplaceAll(resourceGroupName: string, workspaceName: string, request: ReplaceAllIpFirewallRulesRequest, options?: IpFirewallRulesReplaceAllOptionalParams): Promise<PollerLike<PollOperationState<IpFirewallRulesReplaceAllResponse>, IpFirewallRulesReplaceAllResponse>>;
    /**
     * Replaces firewall rules
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param request Replace all IP firewall rules request
     * @param options The options parameters.
     */
    beginReplaceAllAndWait(resourceGroupName: string, workspaceName: string, request: ReplaceAllIpFirewallRulesRequest, options?: IpFirewallRulesReplaceAllOptionalParams): Promise<IpFirewallRulesReplaceAllResponse>;
}

/** Optional parameters. */
export declare interface IpFirewallRulesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type IpFirewallRulesCreateOrUpdateResponse = IpFirewallRuleInfo;

/** Optional parameters. */
export declare interface IpFirewallRulesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type IpFirewallRulesDeleteResponse = Record<string, unknown>;

/** Optional parameters. */
export declare interface IpFirewallRulesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type IpFirewallRulesGetResponse = IpFirewallRuleInfo;

/** Optional parameters. */
export declare interface IpFirewallRulesListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type IpFirewallRulesListByWorkspaceNextResponse = IpFirewallRuleInfoListResult;

/** Optional parameters. */
export declare interface IpFirewallRulesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type IpFirewallRulesListByWorkspaceResponse = IpFirewallRuleInfoListResult;

/** Optional parameters. */
export declare interface IpFirewallRulesReplaceAllOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the replaceAll operation. */
export declare type IpFirewallRulesReplaceAllResponse = ReplaceAllFirewallRulesOperationResponse;

/** Key encryption key properties */
export declare interface KekIdentityProperties {
    /** User assigned identity resource Id */
    userAssignedIdentity?: string;
    /** Boolean specifying whether to use system assigned identity or not */
    useSystemAssignedIdentity?: any;
}

/** A workspace key */
export declare type Key = ProxyResource & {
    /** Used to activate the workspace after a customer managed key is provided. */
    isActiveCMK?: boolean;
    /** The Key Vault Url of the workspace key. */
    keyVaultUrl?: string;
};

/** List of keys */
export declare interface KeyInfoListResult {
    /** Link to the next page of results */
    nextLink?: string;
    /** List of keys */
    value?: Key[];
}

/** Interface representing a Keys. */
export declare interface Keys {
    /**
     * Returns a list of keys in a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: KeysListByWorkspaceOptionalParams): PagedAsyncIterableIterator<Key>;
    /**
     * Gets a workspace key
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param keyName The name of the workspace key
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, keyName: string, options?: KeysGetOptionalParams): Promise<KeysGetResponse>;
    /**
     * Creates or updates a workspace key
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param keyName The name of the workspace key
     * @param keyProperties Key put request properties
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, keyName: string, keyProperties: Key, options?: KeysCreateOrUpdateOptionalParams): Promise<KeysCreateOrUpdateResponse>;
    /**
     * Deletes a workspace key
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param keyName The name of the workspace key
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, keyName: string, options?: KeysDeleteOptionalParams): Promise<KeysDeleteResponse>;
}

/** Optional parameters. */
export declare interface KeysCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type KeysCreateOrUpdateResponse = Key;

/** Optional parameters. */
export declare interface KeysDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the delete operation. */
export declare type KeysDeleteResponse = Key;

/** Optional parameters. */
export declare interface KeysGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type KeysGetResponse = Key;

/** Optional parameters. */
export declare interface KeysListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type KeysListByWorkspaceNextResponse = KeyInfoListResult;

/** Optional parameters. */
export declare interface KeysListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type KeysListByWorkspaceResponse = KeyInfoListResult;

/**
 * Defines values for Kind. \
 * {@link KnownKind} can be used interchangeably with Kind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ReadWrite** \
 * **ReadOnlyFollowing**
 */
export declare type Kind = string;

/** Known values of {@link AzureADOnlyAuthenticationName} that the service accepts. */
export declare enum KnownAzureADOnlyAuthenticationName {
    Default = "default"
}

/** Known values of {@link AzureScaleType} that the service accepts. */
export declare enum KnownAzureScaleType {
    Automatic = "automatic",
    Manual = "manual",
    None = "none"
}

/** Known values of {@link BlobAuditingPolicyName} that the service accepts. */
export declare enum KnownBlobAuditingPolicyName {
    Default = "default"
}

/** Known values of {@link BlobStorageEventType} that the service accepts. */
export declare enum KnownBlobStorageEventType {
    MicrosoftStorageBlobCreated = "Microsoft.Storage.BlobCreated",
    MicrosoftStorageBlobRenamed = "Microsoft.Storage.BlobRenamed"
}

/** Known values of {@link ClusterPrincipalRole} that the service accepts. */
export declare enum KnownClusterPrincipalRole {
    AllDatabasesAdmin = "AllDatabasesAdmin",
    AllDatabasesViewer = "AllDatabasesViewer"
}

/** Known values of {@link ColumnDataType} that the service accepts. */
export declare enum KnownColumnDataType {
    Image = "image",
    Text = "text",
    Uniqueidentifier = "uniqueidentifier",
    Date = "date",
    Time = "time",
    Datetime2 = "datetime2",
    Datetimeoffset = "datetimeoffset",
    Tinyint = "tinyint",
    Smallint = "smallint",
    Int = "int",
    Smalldatetime = "smalldatetime",
    Real = "real",
    Money = "money",
    Datetime = "datetime",
    Float = "float",
    SqlVariant = "sql_variant",
    Ntext = "ntext",
    Bit = "bit",
    Decimal = "decimal",
    Numeric = "numeric",
    Smallmoney = "smallmoney",
    Bigint = "bigint",
    Hierarchyid = "hierarchyid",
    Geometry = "geometry",
    Geography = "geography",
    Varbinary = "varbinary",
    Varchar = "varchar",
    Binary = "binary",
    Char = "char",
    Timestamp = "timestamp",
    Nvarchar = "nvarchar",
    Nchar = "nchar",
    Xml = "xml",
    Sysname = "sysname"
}

/** Known values of {@link Compression} that the service accepts. */
export declare enum KnownCompression {
    None = "None",
    GZip = "GZip"
}

/** Known values of {@link ConfigurationType} that the service accepts. */
export declare enum KnownConfigurationType {
    File = "File",
    Artifact = "Artifact"
}

/** Known values of {@link ConnectionPolicyName} that the service accepts. */
export declare enum KnownConnectionPolicyName {
    Default = "default"
}

/** Known values of {@link CreatedByType} that the service accepts. */
export declare enum KnownCreatedByType {
    User = "User",
    Application = "Application",
    ManagedIdentity = "ManagedIdentity",
    Key = "Key"
}

/** Known values of {@link CreateMode} that the service accepts. */
export declare enum KnownCreateMode {
    Default = "Default",
    PointInTimeRestore = "PointInTimeRestore",
    Recovery = "Recovery",
    Restore = "Restore"
}

/** Known values of {@link DatabasePrincipalRole} that the service accepts. */
export declare enum KnownDatabasePrincipalRole {
    Admin = "Admin",
    Ingestor = "Ingestor",
    Monitor = "Monitor",
    User = "User",
    UnrestrictedViewer = "UnrestrictedViewer",
    Viewer = "Viewer"
}

/** Known values of {@link DataConnectionKind} that the service accepts. */
export declare enum KnownDataConnectionKind {
    EventHub = "EventHub",
    EventGrid = "EventGrid",
    IotHub = "IotHub"
}

/** Known values of {@link DataFlowComputeType} that the service accepts. */
export declare enum KnownDataFlowComputeType {
    General = "General",
    MemoryOptimized = "MemoryOptimized",
    ComputeOptimized = "ComputeOptimized"
}

/** Known values of {@link DataWarehouseUserActivityName} that the service accepts. */
export declare enum KnownDataWarehouseUserActivityName {
    Current = "current"
}

/** Known values of {@link DayOfWeek} that the service accepts. */
export declare enum KnownDayOfWeek {
    Sunday = "Sunday",
    Monday = "Monday",
    Tuesday = "Tuesday",
    Wednesday = "Wednesday",
    Thursday = "Thursday",
    Friday = "Friday",
    Saturday = "Saturday"
}

/** Known values of {@link DefaultPrincipalsModificationKind} that the service accepts. */
export declare enum KnownDefaultPrincipalsModificationKind {
    Union = "Union",
    Replace = "Replace",
    None = "None"
}

/** Known values of {@link EncryptionProtectorName} that the service accepts. */
export declare enum KnownEncryptionProtectorName {
    Current = "current"
}

/** Known values of {@link EventGridDataFormat} that the service accepts. */
export declare enum KnownEventGridDataFormat {
    Multijson = "MULTIJSON",
    Json = "JSON",
    CSV = "CSV",
    TSV = "TSV",
    Scsv = "SCSV",
    Sohsv = "SOHSV",
    PSV = "PSV",
    TXT = "TXT",
    RAW = "RAW",
    Singlejson = "SINGLEJSON",
    Avro = "AVRO",
    Tsve = "TSVE",
    Parquet = "PARQUET",
    ORC = "ORC",
    Apacheavro = "APACHEAVRO",
    W3Clogfile = "W3CLOGFILE"
}

/** Known values of {@link EventHubDataFormat} that the service accepts. */
export declare enum KnownEventHubDataFormat {
    Multijson = "MULTIJSON",
    Json = "JSON",
    CSV = "CSV",
    TSV = "TSV",
    Scsv = "SCSV",
    Sohsv = "SOHSV",
    PSV = "PSV",
    TXT = "TXT",
    RAW = "RAW",
    Singlejson = "SINGLEJSON",
    Avro = "AVRO",
    Tsve = "TSVE",
    Parquet = "PARQUET",
    ORC = "ORC",
    Apacheavro = "APACHEAVRO",
    W3Clogfile = "W3CLOGFILE"
}

/** Known values of {@link GeoBackupPolicyName} that the service accepts. */
export declare enum KnownGeoBackupPolicyName {
    Default = "Default"
}

/** Known values of {@link IntegrationRuntimeAuthKeyName} that the service accepts. */
export declare enum KnownIntegrationRuntimeAuthKeyName {
    AuthKey1 = "authKey1",
    AuthKey2 = "authKey2"
}

/** Known values of {@link IntegrationRuntimeAutoUpdate} that the service accepts. */
export declare enum KnownIntegrationRuntimeAutoUpdate {
    On = "On",
    Off = "Off"
}

/** Known values of {@link IntegrationRuntimeEdition} that the service accepts. */
export declare enum KnownIntegrationRuntimeEdition {
    Standard = "Standard",
    Enterprise = "Enterprise"
}

/** Known values of {@link IntegrationRuntimeEntityReferenceType} that the service accepts. */
export declare enum KnownIntegrationRuntimeEntityReferenceType {
    IntegrationRuntimeReference = "IntegrationRuntimeReference",
    LinkedServiceReference = "LinkedServiceReference"
}

/** Known values of {@link IntegrationRuntimeInternalChannelEncryptionMode} that the service accepts. */
export declare enum KnownIntegrationRuntimeInternalChannelEncryptionMode {
    NotSet = "NotSet",
    SslEncrypted = "SslEncrypted",
    NotEncrypted = "NotEncrypted"
}

/** Known values of {@link IntegrationRuntimeLicenseType} that the service accepts. */
export declare enum KnownIntegrationRuntimeLicenseType {
    BasePrice = "BasePrice",
    LicenseIncluded = "LicenseIncluded"
}

/** Known values of {@link IntegrationRuntimeSsisCatalogPricingTier} that the service accepts. */
export declare enum KnownIntegrationRuntimeSsisCatalogPricingTier {
    Basic = "Basic",
    Standard = "Standard",
    Premium = "Premium",
    PremiumRS = "PremiumRS"
}

/** Known values of {@link IntegrationRuntimeState} that the service accepts. */
export declare enum KnownIntegrationRuntimeState {
    Initial = "Initial",
    Stopped = "Stopped",
    Started = "Started",
    Starting = "Starting",
    Stopping = "Stopping",
    NeedRegistration = "NeedRegistration",
    Online = "Online",
    Limited = "Limited",
    Offline = "Offline",
    AccessDenied = "AccessDenied"
}

/** Known values of {@link IntegrationRuntimeType} that the service accepts. */
export declare enum KnownIntegrationRuntimeType {
    Managed = "Managed",
    SelfHosted = "SelfHosted"
}

/** Known values of {@link IntegrationRuntimeUpdateResult} that the service accepts. */
export declare enum KnownIntegrationRuntimeUpdateResult {
    None = "None",
    Succeed = "Succeed",
    Fail = "Fail"
}

/** Known values of {@link IotHubDataFormat} that the service accepts. */
export declare enum KnownIotHubDataFormat {
    Multijson = "MULTIJSON",
    Json = "JSON",
    CSV = "CSV",
    TSV = "TSV",
    Scsv = "SCSV",
    Sohsv = "SOHSV",
    PSV = "PSV",
    TXT = "TXT",
    RAW = "RAW",
    Singlejson = "SINGLEJSON",
    Avro = "AVRO",
    Tsve = "TSVE",
    Parquet = "PARQUET",
    ORC = "ORC",
    Apacheavro = "APACHEAVRO",
    W3Clogfile = "W3CLOGFILE"
}

/** Known values of {@link Kind} that the service accepts. */
export declare enum KnownKind {
    ReadWrite = "ReadWrite",
    ReadOnlyFollowing = "ReadOnlyFollowing"
}

/** Known values of {@link LanguageExtensionName} that the service accepts. */
export declare enum KnownLanguageExtensionName {
    Python = "PYTHON",
    R = "R"
}

/** Known values of {@link ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityActualState} that the service accepts. */
export declare enum KnownManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityActualState {
    Enabling = "Enabling",
    Enabled = "Enabled",
    Disabling = "Disabling",
    Disabled = "Disabled",
    Unknown = "Unknown"
}

/** Known values of {@link ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityDesiredState} that the service accepts. */
export declare enum KnownManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityDesiredState {
    Enabled = "Enabled",
    Disabled = "Disabled"
}

/** Known values of {@link ManagedIntegrationRuntimeNodeStatus} that the service accepts. */
export declare enum KnownManagedIntegrationRuntimeNodeStatus {
    Starting = "Starting",
    Available = "Available",
    Recycling = "Recycling",
    Unavailable = "Unavailable"
}

/** Known values of {@link ManagementOperationState} that the service accepts. */
export declare enum KnownManagementOperationState {
    Pending = "Pending",
    InProgress = "InProgress",
    Succeeded = "Succeeded",
    Failed = "Failed",
    CancelInProgress = "CancelInProgress",
    Cancelled = "Cancelled"
}

/** Known values of {@link NodeSize} that the service accepts. */
export declare enum KnownNodeSize {
    None = "None",
    Small = "Small",
    Medium = "Medium",
    Large = "Large",
    XLarge = "XLarge",
    XXLarge = "XXLarge",
    XXXLarge = "XXXLarge"
}

/** Known values of {@link NodeSizeFamily} that the service accepts. */
export declare enum KnownNodeSizeFamily {
    None = "None",
    MemoryOptimized = "MemoryOptimized",
    HardwareAcceleratedFpga = "HardwareAcceleratedFPGA",
    HardwareAcceleratedGPU = "HardwareAcceleratedGPU"
}

/** Known values of {@link OperationStatus} that the service accepts. */
export declare enum KnownOperationStatus {
    InProgress = "InProgress",
    Succeeded = "Succeeded",
    Failed = "Failed",
    Canceled = "Canceled"
}

/** Known values of {@link PrincipalsModificationKind} that the service accepts. */
export declare enum KnownPrincipalsModificationKind {
    Union = "Union",
    Replace = "Replace",
    None = "None"
}

/** Known values of {@link PrincipalType} that the service accepts. */
export declare enum KnownPrincipalType {
    App = "App",
    Group = "Group",
    User = "User"
}

/** Known values of {@link ProvisioningState} that the service accepts. */
export declare enum KnownProvisioningState {
    Provisioning = "Provisioning",
    Succeeded = "Succeeded",
    Deleting = "Deleting",
    Failed = "Failed",
    DeleteError = "DeleteError"
}

/** Known values of {@link Reason} that the service accepts. */
export declare enum KnownReason {
    Invalid = "Invalid",
    AlreadyExists = "AlreadyExists"
}

/** Known values of {@link ReplicationState} that the service accepts. */
export declare enum KnownReplicationState {
    Pending = "PENDING",
    Seeding = "SEEDING",
    CatchUP = "CATCH_UP",
    Suspended = "SUSPENDED"
}

/** Known values of {@link ResourceProvisioningState} that the service accepts. */
export declare enum KnownResourceProvisioningState {
    Running = "Running",
    Creating = "Creating",
    Deleting = "Deleting",
    Succeeded = "Succeeded",
    Failed = "Failed",
    Moving = "Moving",
    Canceled = "Canceled"
}

/** Known values of {@link SecurityAlertPolicyName} that the service accepts. */
export declare enum KnownSecurityAlertPolicyName {
    Default = "default"
}

/** Known values of {@link SecurityAlertPolicyNameAutoGenerated} that the service accepts. */
export declare enum KnownSecurityAlertPolicyNameAutoGenerated {
    Default = "Default"
}

/** Known values of {@link SelfHostedIntegrationRuntimeNodeStatus} that the service accepts. */
export declare enum KnownSelfHostedIntegrationRuntimeNodeStatus {
    NeedRegistration = "NeedRegistration",
    Online = "Online",
    Limited = "Limited",
    Offline = "Offline",
    Upgrading = "Upgrading",
    Initializing = "Initializing",
    InitializeFailed = "InitializeFailed"
}

/** Known values of {@link ServerKeyType} that the service accepts. */
export declare enum KnownServerKeyType {
    ServiceManaged = "ServiceManaged",
    AzureKeyVault = "AzureKeyVault"
}

/** Known values of {@link SkuName} that the service accepts. */
export declare enum KnownSkuName {
    ComputeOptimized = "Compute optimized",
    StorageOptimized = "Storage optimized"
}

/** Known values of {@link SkuSize} that the service accepts. */
export declare enum KnownSkuSize {
    ExtraSmall = "Extra small",
    Small = "Small",
    Medium = "Medium",
    Large = "Large"
}

/** Known values of {@link SsisObjectMetadataType} that the service accepts. */
export declare enum KnownSsisObjectMetadataType {
    Folder = "Folder",
    Project = "Project",
    Package = "Package",
    Environment = "Environment"
}

/** Known values of {@link State} that the service accepts. */
export declare enum KnownState {
    Creating = "Creating",
    Unavailable = "Unavailable",
    Running = "Running",
    Deleting = "Deleting",
    Deleted = "Deleted",
    Stopping = "Stopping",
    Stopped = "Stopped",
    Starting = "Starting",
    Updating = "Updating"
}

/** Known values of {@link StateValue} that the service accepts. */
export declare enum KnownStateValue {
    Consistent = "Consistent",
    InConsistent = "InConsistent",
    Updating = "Updating"
}

/** Known values of {@link StorageAccountType} that the service accepts. */
export declare enum KnownStorageAccountType {
    GRS = "GRS",
    LRS = "LRS"
}

/** Known values of {@link TransparentDataEncryptionName} that the service accepts. */
export declare enum KnownTransparentDataEncryptionName {
    Current = "current"
}

/** Known values of {@link VulnerabilityAssessmentName} that the service accepts. */
export declare enum KnownVulnerabilityAssessmentName {
    Default = "default"
}

/** Known values of {@link VulnerabilityAssessmentScanState} that the service accepts. */
export declare enum KnownVulnerabilityAssessmentScanState {
    Passed = "Passed",
    Failed = "Failed",
    FailedToRun = "FailedToRun",
    InProgress = "InProgress"
}

/** Known values of {@link VulnerabilityAssessmentScanTriggerType} that the service accepts. */
export declare enum KnownVulnerabilityAssessmentScanTriggerType {
    OnDemand = "OnDemand",
    Recurring = "Recurring"
}

/** Known values of {@link WorkspacePublicNetworkAccess} that the service accepts. */
export declare enum KnownWorkspacePublicNetworkAccess {
    Enabled = "Enabled",
    Disabled = "Disabled"
}

/** Interface representing a KustoOperations. */
export declare interface KustoOperations {
    /**
     * Lists available operations for the Kusto sub-resources inside Microsoft.Synapse provider.
     * @param options The options parameters.
     */
    list(options?: KustoOperationsListOptionalParams): PagedAsyncIterableIterator<Operation>;
}

/** Optional parameters. */
export declare interface KustoOperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type KustoOperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export declare interface KustoOperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type KustoOperationsListResponse = OperationListResult;

/** Class representing a Kusto kusto pool. */
export declare type KustoPool = TrackedResource & {
    /** The SKU of the kusto pool. */
    sku: AzureSku;
    /**
     * A unique read-only string that changes whenever the resource is updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly etag?: string;
    /**
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly systemData?: SystemData;
    /**
     * The state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: State;
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
    /**
     * The Kusto Pool URI.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uri?: string;
    /**
     * The Kusto Pool data ingestion URI.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataIngestionUri?: string;
    /**
     * The reason for the Kusto Pool's current state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stateReason?: string;
    /** Optimized auto scale definition. */
    optimizedAutoscale?: OptimizedAutoscale;
    /** A boolean value that indicates if the streaming ingest is enabled. */
    enableStreamingIngest?: boolean;
    /** A boolean value that indicates if the purge operations are enabled. */
    enablePurge?: boolean;
    /**
     * List of the Kusto Pool's language extensions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly languageExtensions?: LanguageExtensionsList;
    /** The workspace unique identifier. */
    workspaceUID?: string;
};

/** Interface representing a KustoPoolAttachedDatabaseConfigurations. */
export declare interface KustoPoolAttachedDatabaseConfigurations {
    /**
     * Returns the list of attached database configurations of the given Kusto Pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByKustoPool(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolAttachedDatabaseConfigurationsListByKustoPoolOptionalParams): PagedAsyncIterableIterator<AttachedDatabaseConfiguration>;
    /**
     * Returns an attached database configuration.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(workspaceName: string, kustoPoolName: string, attachedDatabaseConfigurationName: string, resourceGroupName: string, options?: KustoPoolAttachedDatabaseConfigurationsGetOptionalParams): Promise<KustoPoolAttachedDatabaseConfigurationsGetResponse>;
    /**
     * Creates or updates an attached database configuration.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The database parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(workspaceName: string, kustoPoolName: string, attachedDatabaseConfigurationName: string, resourceGroupName: string, parameters: AttachedDatabaseConfiguration, options?: KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResponse>, KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResponse>>;
    /**
     * Creates or updates an attached database configuration.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The database parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(workspaceName: string, kustoPoolName: string, attachedDatabaseConfigurationName: string, resourceGroupName: string, parameters: AttachedDatabaseConfiguration, options?: KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateOptionalParams): Promise<KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResponse>;
    /**
     * Deletes the attached database configuration with the given name.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginDelete(workspaceName: string, kustoPoolName: string, attachedDatabaseConfigurationName: string, resourceGroupName: string, options?: KustoPoolAttachedDatabaseConfigurationsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the attached database configuration with the given name.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param attachedDatabaseConfigurationName The name of the attached database configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginDeleteAndWait(workspaceName: string, kustoPoolName: string, attachedDatabaseConfigurationName: string, resourceGroupName: string, options?: KustoPoolAttachedDatabaseConfigurationsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type KustoPoolAttachedDatabaseConfigurationsCreateOrUpdateResponse = AttachedDatabaseConfiguration;

/** Optional parameters. */
export declare interface KustoPoolAttachedDatabaseConfigurationsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolAttachedDatabaseConfigurationsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type KustoPoolAttachedDatabaseConfigurationsGetResponse = AttachedDatabaseConfiguration;

/** Optional parameters. */
export declare interface KustoPoolAttachedDatabaseConfigurationsListByKustoPoolOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByKustoPool operation. */
export declare type KustoPoolAttachedDatabaseConfigurationsListByKustoPoolResponse = AttachedDatabaseConfigurationListResult;

/** The object sent for a kusto pool check name availability request. */
export declare interface KustoPoolCheckNameRequest {
    /** Kusto Pool name. */
    name: string;
    /** The type of resource, Microsoft.Synapse/workspaces/kustoPools. */
    type: "Microsoft.Synapse/workspaces/kustoPools";
}

/** Interface representing a KustoPoolChildResource. */
export declare interface KustoPoolChildResource {
    /**
     * Checks that the Kusto Pool child resource name is valid and is not already in use.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName The name of the Kusto Pool child resource.
     * @param options The options parameters.
     */
    checkNameAvailability(workspaceName: string, kustoPoolName: string, resourceGroupName: string, resourceName: DatabaseCheckNameRequest, options?: KustoPoolChildResourceCheckNameAvailabilityOptionalParams): Promise<KustoPoolChildResourceCheckNameAvailabilityResponse>;
}

/** Optional parameters. */
export declare interface KustoPoolChildResourceCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type KustoPoolChildResourceCheckNameAvailabilityResponse = CheckNameResult;

/** Interface representing a KustoPoolDatabasePrincipalAssignments. */
export declare interface KustoPoolDatabasePrincipalAssignments {
    /**
     * Lists all Kusto pool database principalAssignments.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(workspaceName: string, kustoPoolName: string, databaseName: string, resourceGroupName: string, options?: KustoPoolDatabasePrincipalAssignmentsListOptionalParams): PagedAsyncIterableIterator<DatabasePrincipalAssignment>;
    /**
     * Checks that the database principal assignment is valid and is not already in use.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param principalAssignmentName The name of the resource.
     * @param options The options parameters.
     */
    checkNameAvailability(workspaceName: string, kustoPoolName: string, databaseName: string, resourceGroupName: string, principalAssignmentName: DatabasePrincipalAssignmentCheckNameRequest, options?: KustoPoolDatabasePrincipalAssignmentsCheckNameAvailabilityOptionalParams): Promise<KustoPoolDatabasePrincipalAssignmentsCheckNameAvailabilityResponse>;
    /**
     * Gets a Kusto pool database principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(workspaceName: string, kustoPoolName: string, databaseName: string, principalAssignmentName: string, resourceGroupName: string, options?: KustoPoolDatabasePrincipalAssignmentsGetOptionalParams): Promise<KustoPoolDatabasePrincipalAssignmentsGetResponse>;
    /**
     * Creates a Kusto pool database principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The Kusto principalAssignments parameters supplied for the operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(workspaceName: string, kustoPoolName: string, databaseName: string, principalAssignmentName: string, resourceGroupName: string, parameters: DatabasePrincipalAssignment, options?: KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResponse>, KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResponse>>;
    /**
     * Creates a Kusto pool database principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The Kusto principalAssignments parameters supplied for the operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(workspaceName: string, kustoPoolName: string, databaseName: string, principalAssignmentName: string, resourceGroupName: string, parameters: DatabasePrincipalAssignment, options?: KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateOptionalParams): Promise<KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResponse>;
    /**
     * Deletes a Kusto pool principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginDelete(workspaceName: string, kustoPoolName: string, databaseName: string, principalAssignmentName: string, resourceGroupName: string, options?: KustoPoolDatabasePrincipalAssignmentsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a Kusto pool principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginDeleteAndWait(workspaceName: string, kustoPoolName: string, databaseName: string, principalAssignmentName: string, resourceGroupName: string, options?: KustoPoolDatabasePrincipalAssignmentsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface KustoPoolDatabasePrincipalAssignmentsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type KustoPoolDatabasePrincipalAssignmentsCheckNameAvailabilityResponse = CheckNameResult;

/** Optional parameters. */
export declare interface KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type KustoPoolDatabasePrincipalAssignmentsCreateOrUpdateResponse = DatabasePrincipalAssignment;

/** Optional parameters. */
export declare interface KustoPoolDatabasePrincipalAssignmentsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolDatabasePrincipalAssignmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type KustoPoolDatabasePrincipalAssignmentsGetResponse = DatabasePrincipalAssignment;

/** Optional parameters. */
export declare interface KustoPoolDatabasePrincipalAssignmentsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type KustoPoolDatabasePrincipalAssignmentsListResponse = DatabasePrincipalAssignmentListResult;

/** Interface representing a KustoPoolDatabases. */
export declare interface KustoPoolDatabases {
    /**
     * Returns the list of databases of the given Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param options The options parameters.
     */
    listByKustoPool(resourceGroupName: string, workspaceName: string, kustoPoolName: string, options?: KustoPoolDatabasesListByKustoPoolOptionalParams): PagedAsyncIterableIterator<DatabaseUnion>;
    /**
     * Returns a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, options?: KustoPoolDatabasesGetOptionalParams): Promise<KustoPoolDatabasesGetResponse>;
    /**
     * Creates or updates a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param parameters The database parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, parameters: DatabaseUnion, options?: KustoPoolDatabasesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolDatabasesCreateOrUpdateResponse>, KustoPoolDatabasesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param parameters The database parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, parameters: DatabaseUnion, options?: KustoPoolDatabasesCreateOrUpdateOptionalParams): Promise<KustoPoolDatabasesCreateOrUpdateResponse>;
    /**
     * Updates a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param parameters The database parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, parameters: DatabaseUnion, options?: KustoPoolDatabasesUpdateOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolDatabasesUpdateResponse>, KustoPoolDatabasesUpdateResponse>>;
    /**
     * Updates a database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param parameters The database parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, parameters: DatabaseUnion, options?: KustoPoolDatabasesUpdateOptionalParams): Promise<KustoPoolDatabasesUpdateResponse>;
    /**
     * Deletes the database with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, options?: KustoPoolDatabasesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the database with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, options?: KustoPoolDatabasesDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface KustoPoolDatabasesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type KustoPoolDatabasesCreateOrUpdateResponse = DatabaseUnion;

/** Optional parameters. */
export declare interface KustoPoolDatabasesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolDatabasesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type KustoPoolDatabasesGetResponse = DatabaseUnion;

/** Optional parameters. */
export declare interface KustoPoolDatabasesListByKustoPoolOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByKustoPool operation. */
export declare type KustoPoolDatabasesListByKustoPoolResponse = DatabaseListResult;

/** Optional parameters. */
export declare interface KustoPoolDatabasesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type KustoPoolDatabasesUpdateResponse = DatabaseUnion;

/** Interface representing a KustoPoolDataConnections. */
export declare interface KustoPoolDataConnections {
    /**
     * Returns the list of data connections of the given Kusto pool database.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param options The options parameters.
     */
    listByDatabase(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, options?: KustoPoolDataConnectionsListByDatabaseOptionalParams): PagedAsyncIterableIterator<DataConnectionUnion>;
    /**
     * Checks that the data connection name is valid and is not already in use.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param dataConnectionName The name of the data connection.
     * @param options The options parameters.
     */
    checkNameAvailability(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, dataConnectionName: DataConnectionCheckNameRequest, options?: KustoPoolDataConnectionsCheckNameAvailabilityOptionalParams): Promise<KustoPoolDataConnectionsCheckNameAvailabilityResponse>;
    /**
     * Checks that the data connection parameters are valid.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginDataConnectionValidation(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, parameters: DataConnectionValidation, options?: KustoPoolDataConnectionsDataConnectionValidationOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolDataConnectionsDataConnectionValidationResponse>, KustoPoolDataConnectionsDataConnectionValidationResponse>>;
    /**
     * Checks that the data connection parameters are valid.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginDataConnectionValidationAndWait(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, parameters: DataConnectionValidation, options?: KustoPoolDataConnectionsDataConnectionValidationOptionalParams): Promise<KustoPoolDataConnectionsDataConnectionValidationResponse>;
    /**
     * Returns a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param dataConnectionName The name of the data connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, dataConnectionName: string, options?: KustoPoolDataConnectionsGetOptionalParams): Promise<KustoPoolDataConnectionsGetResponse>;
    /**
     * Creates or updates a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param dataConnectionName The name of the data connection.
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, dataConnectionName: string, parameters: DataConnectionUnion, options?: KustoPoolDataConnectionsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolDataConnectionsCreateOrUpdateResponse>, KustoPoolDataConnectionsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param dataConnectionName The name of the data connection.
     * @param parameters The data connection parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, dataConnectionName: string, parameters: DataConnectionUnion, options?: KustoPoolDataConnectionsCreateOrUpdateOptionalParams): Promise<KustoPoolDataConnectionsCreateOrUpdateResponse>;
    /**
     * Updates a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param dataConnectionName The name of the data connection.
     * @param parameters The data connection parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, dataConnectionName: string, parameters: DataConnectionUnion, options?: KustoPoolDataConnectionsUpdateOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolDataConnectionsUpdateResponse>, KustoPoolDataConnectionsUpdateResponse>>;
    /**
     * Updates a data connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param dataConnectionName The name of the data connection.
     * @param parameters The data connection parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, dataConnectionName: string, parameters: DataConnectionUnion, options?: KustoPoolDataConnectionsUpdateOptionalParams): Promise<KustoPoolDataConnectionsUpdateResponse>;
    /**
     * Deletes the data connection with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param dataConnectionName The name of the data connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, dataConnectionName: string, options?: KustoPoolDataConnectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes the data connection with the given name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param databaseName The name of the database in the Kusto pool.
     * @param dataConnectionName The name of the data connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, kustoPoolName: string, databaseName: string, dataConnectionName: string, options?: KustoPoolDataConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface KustoPoolDataConnectionsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type KustoPoolDataConnectionsCheckNameAvailabilityResponse = CheckNameResult;

/** Optional parameters. */
export declare interface KustoPoolDataConnectionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type KustoPoolDataConnectionsCreateOrUpdateResponse = DataConnectionUnion;

/** Optional parameters. */
export declare interface KustoPoolDataConnectionsDataConnectionValidationOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the dataConnectionValidation operation. */
export declare type KustoPoolDataConnectionsDataConnectionValidationResponse = DataConnectionValidationListResult;

/** Optional parameters. */
export declare interface KustoPoolDataConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolDataConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type KustoPoolDataConnectionsGetResponse = DataConnectionUnion;

/** Optional parameters. */
export declare interface KustoPoolDataConnectionsListByDatabaseOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByDatabase operation. */
export declare type KustoPoolDataConnectionsListByDatabaseResponse = DataConnectionListResult;

/** Optional parameters. */
export declare interface KustoPoolDataConnectionsUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type KustoPoolDataConnectionsUpdateResponse = DataConnectionUnion;

/** The list Kusto pools operation response. */
export declare interface KustoPoolListResult {
    /** The list of Kusto pools. */
    value?: KustoPool[];
}

/** Interface representing a KustoPoolPrincipalAssignments. */
export declare interface KustoPoolPrincipalAssignments {
    /**
     * Lists all Kusto pool principalAssignments.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    list(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolPrincipalAssignmentsListOptionalParams): PagedAsyncIterableIterator<ClusterPrincipalAssignment>;
    /**
     * Checks that the principal assignment name is valid and is not already in use.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param principalAssignmentName The name of the principal assignment.
     * @param options The options parameters.
     */
    checkNameAvailability(workspaceName: string, kustoPoolName: string, resourceGroupName: string, principalAssignmentName: ClusterPrincipalAssignmentCheckNameRequest, options?: KustoPoolPrincipalAssignmentsCheckNameAvailabilityOptionalParams): Promise<KustoPoolPrincipalAssignmentsCheckNameAvailabilityResponse>;
    /**
     * Gets a Kusto pool principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(workspaceName: string, kustoPoolName: string, principalAssignmentName: string, resourceGroupName: string, options?: KustoPoolPrincipalAssignmentsGetOptionalParams): Promise<KustoPoolPrincipalAssignmentsGetResponse>;
    /**
     * Create a Kusto pool principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The Kusto pool principalAssignment's parameters supplied for the operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(workspaceName: string, kustoPoolName: string, principalAssignmentName: string, resourceGroupName: string, parameters: ClusterPrincipalAssignment, options?: KustoPoolPrincipalAssignmentsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolPrincipalAssignmentsCreateOrUpdateResponse>, KustoPoolPrincipalAssignmentsCreateOrUpdateResponse>>;
    /**
     * Create a Kusto pool principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param parameters The Kusto pool principalAssignment's parameters supplied for the operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(workspaceName: string, kustoPoolName: string, principalAssignmentName: string, resourceGroupName: string, parameters: ClusterPrincipalAssignment, options?: KustoPoolPrincipalAssignmentsCreateOrUpdateOptionalParams): Promise<KustoPoolPrincipalAssignmentsCreateOrUpdateResponse>;
    /**
     * Deletes a Kusto pool principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginDelete(workspaceName: string, kustoPoolName: string, principalAssignmentName: string, resourceGroupName: string, options?: KustoPoolPrincipalAssignmentsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a Kusto pool principalAssignment.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param principalAssignmentName The name of the Kusto principalAssignment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginDeleteAndWait(workspaceName: string, kustoPoolName: string, principalAssignmentName: string, resourceGroupName: string, options?: KustoPoolPrincipalAssignmentsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface KustoPoolPrincipalAssignmentsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type KustoPoolPrincipalAssignmentsCheckNameAvailabilityResponse = CheckNameResult;

/** Optional parameters. */
export declare interface KustoPoolPrincipalAssignmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type KustoPoolPrincipalAssignmentsCreateOrUpdateResponse = ClusterPrincipalAssignment;

/** Optional parameters. */
export declare interface KustoPoolPrincipalAssignmentsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolPrincipalAssignmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type KustoPoolPrincipalAssignmentsGetResponse = ClusterPrincipalAssignment;

/** Optional parameters. */
export declare interface KustoPoolPrincipalAssignmentsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type KustoPoolPrincipalAssignmentsListResponse = ClusterPrincipalAssignmentListResult;

/** Interface representing a KustoPools. */
export declare interface KustoPools {
    /**
     * Lists eligible SKUs for Kusto Pool resource.
     * @param options The options parameters.
     */
    listSkus(options?: KustoPoolsListSkusOptionalParams): PagedAsyncIterableIterator<SkuDescription>;
    /**
     * Returns the SKUs available for the provided resource.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listSkusByResource(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolsListSkusByResourceOptionalParams): PagedAsyncIterableIterator<AzureResourceSku>;
    /**
     * Returns a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolsListLanguageExtensionsOptionalParams): PagedAsyncIterableIterator<LanguageExtension>;
    /**
     * Returns a list of databases that are owned by this Kusto Pool and were followed by another Kusto
     * Pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listFollowerDatabases(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolsListFollowerDatabasesOptionalParams): PagedAsyncIterableIterator<FollowerDatabaseDefinition>;
    /**
     * Checks that the kusto pool name is valid and is not already in use.
     * @param location The name of Azure region.
     * @param kustoPoolName The name of the cluster.
     * @param options The options parameters.
     */
    checkNameAvailability(location: string, kustoPoolName: KustoPoolCheckNameRequest, options?: KustoPoolsCheckNameAvailabilityOptionalParams): Promise<KustoPoolsCheckNameAvailabilityResponse>;
    /**
     * List all Kusto pools
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: KustoPoolsListByWorkspaceOptionalParams): Promise<KustoPoolsListByWorkspaceResponse>;
    /**
     * Gets a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    get(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolsGetOptionalParams): Promise<KustoPoolsGetResponse>;
    /**
     * Create or update a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param parameters The Kusto pool parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(workspaceName: string, resourceGroupName: string, kustoPoolName: string, parameters: KustoPool, options?: KustoPoolsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolsCreateOrUpdateResponse>, KustoPoolsCreateOrUpdateResponse>>;
    /**
     * Create or update a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param parameters The Kusto pool parameters supplied to the CreateOrUpdate operation.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(workspaceName: string, resourceGroupName: string, kustoPoolName: string, parameters: KustoPool, options?: KustoPoolsCreateOrUpdateOptionalParams): Promise<KustoPoolsCreateOrUpdateResponse>;
    /**
     * Update a Kusto Kusto Pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param parameters The Kusto pool parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdate(workspaceName: string, resourceGroupName: string, kustoPoolName: string, parameters: KustoPoolUpdate, options?: KustoPoolsUpdateOptionalParams): Promise<PollerLike<PollOperationState<KustoPoolsUpdateResponse>, KustoPoolsUpdateResponse>>;
    /**
     * Update a Kusto Kusto Pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param parameters The Kusto pool parameters supplied to the Update operation.
     * @param options The options parameters.
     */
    beginUpdateAndWait(workspaceName: string, resourceGroupName: string, kustoPoolName: string, parameters: KustoPoolUpdate, options?: KustoPoolsUpdateOptionalParams): Promise<KustoPoolsUpdateResponse>;
    /**
     * Deletes a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param options The options parameters.
     */
    beginDelete(workspaceName: string, resourceGroupName: string, kustoPoolName: string, options?: KustoPoolsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param kustoPoolName The name of the Kusto pool.
     * @param options The options parameters.
     */
    beginDeleteAndWait(workspaceName: string, resourceGroupName: string, kustoPoolName: string, options?: KustoPoolsDeleteOptionalParams): Promise<void>;
    /**
     * Stops a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginStop(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolsStopOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Stops a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginStopAndWait(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolsStopOptionalParams): Promise<void>;
    /**
     * Starts a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginStart(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolsStartOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Starts a Kusto pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    beginStartAndWait(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: KustoPoolsStartOptionalParams): Promise<void>;
    /**
     * Add a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param languageExtensionsToAdd The language extensions to add.
     * @param options The options parameters.
     */
    beginAddLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, languageExtensionsToAdd: LanguageExtensionsList, options?: KustoPoolsAddLanguageExtensionsOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Add a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param languageExtensionsToAdd The language extensions to add.
     * @param options The options parameters.
     */
    beginAddLanguageExtensionsAndWait(workspaceName: string, kustoPoolName: string, resourceGroupName: string, languageExtensionsToAdd: LanguageExtensionsList, options?: KustoPoolsAddLanguageExtensionsOptionalParams): Promise<void>;
    /**
     * Remove a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param languageExtensionsToRemove The language extensions to remove.
     * @param options The options parameters.
     */
    beginRemoveLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, languageExtensionsToRemove: LanguageExtensionsList, options?: KustoPoolsRemoveLanguageExtensionsOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Remove a list of language extensions that can run within KQL queries.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param languageExtensionsToRemove The language extensions to remove.
     * @param options The options parameters.
     */
    beginRemoveLanguageExtensionsAndWait(workspaceName: string, kustoPoolName: string, resourceGroupName: string, languageExtensionsToRemove: LanguageExtensionsList, options?: KustoPoolsRemoveLanguageExtensionsOptionalParams): Promise<void>;
    /**
     * Detaches all followers of a database owned by this Kusto Pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param followerDatabaseToRemove The follower databases properties to remove.
     * @param options The options parameters.
     */
    beginDetachFollowerDatabases(workspaceName: string, kustoPoolName: string, resourceGroupName: string, followerDatabaseToRemove: FollowerDatabaseDefinition, options?: KustoPoolsDetachFollowerDatabasesOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Detaches all followers of a database owned by this Kusto Pool.
     * @param workspaceName The name of the workspace.
     * @param kustoPoolName The name of the Kusto pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param followerDatabaseToRemove The follower databases properties to remove.
     * @param options The options parameters.
     */
    beginDetachFollowerDatabasesAndWait(workspaceName: string, kustoPoolName: string, resourceGroupName: string, followerDatabaseToRemove: FollowerDatabaseDefinition, options?: KustoPoolsDetachFollowerDatabasesOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface KustoPoolsAddLanguageExtensionsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type KustoPoolsCheckNameAvailabilityResponse = CheckNameResult;

/** Optional parameters. */
export declare interface KustoPoolsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Set to '*' to allow a new Kusto Pool to be created, but to prevent updating an existing Kusto Pool. Other values will result in a 412 Pre-condition Failed response. */
    ifNoneMatch?: string;
    /** The ETag of the Kusto Pool. Omit this value to always overwrite the current Kusto Pool. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type KustoPoolsCreateOrUpdateResponse = KustoPool;

/** Optional parameters. */
export declare interface KustoPoolsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolsDetachFollowerDatabasesOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type KustoPoolsGetResponse = KustoPool;

/** Optional parameters. */
export declare interface KustoPoolsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type KustoPoolsListByWorkspaceResponse = KustoPoolListResult;

/** Optional parameters. */
export declare interface KustoPoolsListFollowerDatabasesOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listFollowerDatabases operation. */
export declare type KustoPoolsListFollowerDatabasesResponse = FollowerDatabaseListResult;

/** Optional parameters. */
export declare interface KustoPoolsListLanguageExtensionsOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listLanguageExtensions operation. */
export declare type KustoPoolsListLanguageExtensionsResponse = LanguageExtensionsList;

/** Optional parameters. */
export declare interface KustoPoolsListSkusByResourceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSkusByResource operation. */
export declare type KustoPoolsListSkusByResourceResponse = ListResourceSkusResult;

/** Optional parameters. */
export declare interface KustoPoolsListSkusOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listSkus operation. */
export declare type KustoPoolsListSkusResponse = SkuDescriptionList;

/** Optional parameters. */
export declare interface KustoPoolsRemoveLanguageExtensionsOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolsStartOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolsStopOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface KustoPoolsUpdateOptionalParams extends coreClient.OperationOptions {
    /** The ETag of the Kusto Pool. Omit this value to always overwrite the current Kusto Pool. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. */
    ifMatch?: string;
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type KustoPoolsUpdateResponse = KustoPool;

/** Class representing an update to a Kusto kusto pool. */
export declare type KustoPoolUpdate = Resource & {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The SKU of the kusto pool. */
    sku?: AzureSku;
    /**
     * The state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: State;
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
    /**
     * The Kusto Pool URI.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly uri?: string;
    /**
     * The Kusto Pool data ingestion URI.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataIngestionUri?: string;
    /**
     * The reason for the Kusto Pool's current state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly stateReason?: string;
    /** Optimized auto scale definition. */
    optimizedAutoscale?: OptimizedAutoscale;
    /** A boolean value that indicates if the streaming ingest is enabled. */
    enableStreamingIngest?: boolean;
    /** A boolean value that indicates if the purge operations are enabled. */
    enablePurge?: boolean;
    /**
     * List of the Kusto Pool's language extensions.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly languageExtensions?: LanguageExtensionsList;
    /** The workspace unique identifier. */
    workspaceUID?: string;
};

/** The language extension object. */
export declare interface LanguageExtension {
    /** The language extension name. */
    languageExtensionName?: LanguageExtensionName;
}

/**
 * Defines values for LanguageExtensionName. \
 * {@link KnownLanguageExtensionName} can be used interchangeably with LanguageExtensionName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PYTHON** \
 * **R**
 */
export declare type LanguageExtensionName = string;

/** The list of language extension objects. */
export declare interface LanguageExtensionsList {
    /** The list of language extensions. */
    value?: LanguageExtension[];
}

/** Interface representing a Libraries. */
export declare interface Libraries {
    /**
     * List libraries in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: LibrariesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<LibraryResource>;
}

/** Optional parameters. */
export declare interface LibrariesListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type LibrariesListByWorkspaceNextResponse = LibraryListResponse;

/** Optional parameters. */
export declare interface LibrariesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type LibrariesListByWorkspaceResponse = LibraryListResponse;

/** Interface representing a Library. */
export declare interface Library {
    /**
     * Get library by name in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param libraryName Library name
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, libraryName: string, workspaceName: string, options?: LibraryGetOptionalParams): Promise<LibraryGetResponse>;
}

/** Optional parameters. */
export declare interface LibraryGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type LibraryGetResponse = LibraryResource;

/** Library/package information of a Big Data pool powered by Apache Spark */
export declare interface LibraryInfo {
    /** Name of the library. */
    name?: string;
    /** Storage blob path of library. */
    path?: string;
    /** Storage blob container name. */
    containerName?: string;
    /** The last update time of the library. */
    uploadedTimestamp?: Date;
    /** Type of the library. */
    type?: string;
    /**
     * Provisioning status of the library/package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningStatus?: string;
    /**
     * Creator Id of the library/package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creatorId?: string;
}

/** A list of Library resources. */
export declare interface LibraryListResponse {
    /** List of Library. */
    value: LibraryResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** Library requirements for a Big Data pool powered by Apache Spark */
export declare interface LibraryRequirements {
    /**
     * The last update time of the library requirements file.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly time?: Date;
    /** The library requirements. */
    content?: string;
    /** The filename of the library requirements file. */
    filename?: string;
}

/** Library response details */
export declare type LibraryResource = SubResource & {
    /** Name of the library. */
    namePropertiesName?: string;
    /** Storage blob path of library. */
    path?: string;
    /** Storage blob container name. */
    containerName?: string;
    /** The last update time of the library. */
    uploadedTimestamp?: Date;
    /** Type of the library. */
    typePropertiesType?: string;
    /**
     * Provisioning status of the library/package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningStatus?: string;
    /**
     * Creator Id of the library/package.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creatorId?: string;
};

/** The linked integration runtime information. */
export declare interface LinkedIntegrationRuntime {
    /**
     * The name of the linked integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The subscription ID for which the linked integration runtime belong to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly subscriptionId?: string;
    /**
     * The name of the workspace for which the linked integration runtime belong to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataFactoryName?: string;
    /**
     * The location of the workspace for which the linked integration runtime belong to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly dataFactoryLocation?: string;
    /**
     * The creating time of the linked integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createTime?: Date;
}

/** The key authorization type integration runtime. */
export declare type LinkedIntegrationRuntimeKeyAuthorization = LinkedIntegrationRuntimeType & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authorizationType: "Key";
    /** The key used for authorization. */
    key: SecureString;
};

/** The role based access control (RBAC) authorization type integration runtime. */
export declare type LinkedIntegrationRuntimeRbacAuthorization = LinkedIntegrationRuntimeType & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authorizationType: "RBAC";
    /** The resource identifier of the integration runtime to be shared. */
    resourceId: string;
};

/** The base definition of a linked integration runtime. */
export declare interface LinkedIntegrationRuntimeType {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    authorizationType: "Key" | "RBAC";
}

export declare type LinkedIntegrationRuntimeTypeUnion = LinkedIntegrationRuntimeType | LinkedIntegrationRuntimeKeyAuthorization | LinkedIntegrationRuntimeRbacAuthorization;

/** List of available SKUs for a Kusto Pool. */
export declare interface ListResourceSkusResult {
    /** The collection of available SKUs for an existing resource. */
    value?: AzureResourceSku[];
}

/** A list of SQL pool security alert policies. */
export declare interface ListSqlPoolSecurityAlertPolicies {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlPoolSecurityAlertPolicy[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Maintenance window options. */
export declare type MaintenanceWindowOptions = ProxyResource & {
    /** Whether maintenance windows are enabled for the database. */
    isEnabled?: boolean;
    /** Available maintenance cycles e.g. {Saturday, 0, 48*60}, {Wednesday, 0, 24*60}. */
    maintenanceWindowCycles?: MaintenanceWindowTimeRange[];
    /** Minimum duration of maintenance window. */
    minDurationInMinutes?: number;
    /** Default duration for maintenance window. */
    defaultDurationInMinutes?: number;
    /** Minimum number of maintenance windows cycles to be set on the database. */
    minCycles?: number;
    /** Time granularity in minutes for maintenance windows. */
    timeGranularityInMinutes?: number;
    /** Whether we allow multiple maintenance windows per cycle. */
    allowMultipleMaintenanceWindowsPerCycle?: boolean;
};

/** Maintenance windows. */
export declare type MaintenanceWindows = ProxyResource & {
    timeRanges?: MaintenanceWindowTimeRange[];
};

/** Maintenance window time range. */
export declare interface MaintenanceWindowTimeRange {
    /** Day of maintenance window. */
    dayOfWeek?: DayOfWeek;
    /** Start time minutes offset from 12am. */
    startTime?: string;
    /** Duration of maintenance window in minutes. */
    duration?: string;
}

/** The workspace managed identity */
export declare interface ManagedIdentity {
    /**
     * The principal ID of the workspace managed identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
    /**
     * The tenant ID of the workspace managed identity
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tenantId?: string;
    /** The type of managed identity for the workspace */
    type?: ResourceIdentityType;
    /** The user assigned managed identities. */
    userAssignedIdentities?: {
        [propertyName: string]: UserAssignedManagedIdentity;
    };
}

/** Sql Control Settings for workspace managed identity */
export declare type ManagedIdentitySqlControlSettingsModel = ProxyResource & {
    /** Grant sql control to managed identity */
    grantSqlControlToManagedIdentity?: ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity;
};

/** Grant sql control to managed identity */
export declare interface ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity {
    /** Desired state */
    desiredState?: ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityDesiredState;
    /**
     * Actual state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actualState?: ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityActualState;
}

/**
 * Defines values for ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityActualState. \
 * {@link KnownManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityActualState} can be used interchangeably with ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityActualState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabling** \
 * **Enabled** \
 * **Disabling** \
 * **Disabled** \
 * **Unknown**
 */
export declare type ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityActualState = string;

/**
 * Defines values for ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityDesiredState. \
 * {@link KnownManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityDesiredState} can be used interchangeably with ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityDesiredState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentityDesiredState = string;

/** Managed integration runtime, including managed elastic and managed dedicated integration runtimes. */
export declare type ManagedIntegrationRuntime = IntegrationRuntime & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Managed";
    /**
     * Integration runtime state, only valid for managed dedicated integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: IntegrationRuntimeState;
    /** The reference name of the managed virtual network. */
    referenceName?: string;
    /** The type of the managed virtual network. */
    typeManagedVirtualNetworkType?: string;
    /** The id of the managed virtual network. */
    id?: string;
    /** The compute resource for managed integration runtime. */
    computeProperties?: IntegrationRuntimeComputeProperties;
    /** SSIS properties for managed integration runtime. */
    ssisProperties?: IntegrationRuntimeSsisProperties;
};

/** Error definition for managed integration runtime. */
export declare interface ManagedIntegrationRuntimeError {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The time when the error occurred.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly time?: Date;
    /**
     * Error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * Managed integration runtime error parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parameters?: string[];
    /**
     * Error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** Properties of integration runtime node. */
export declare interface ManagedIntegrationRuntimeNode {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The managed integration runtime node id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeId?: string;
    /**
     * The managed integration runtime node status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: ManagedIntegrationRuntimeNodeStatus;
    /** The errors that occurred on this integration runtime node. */
    errors?: ManagedIntegrationRuntimeError[];
}

/**
 * Defines values for ManagedIntegrationRuntimeNodeStatus. \
 * {@link KnownManagedIntegrationRuntimeNodeStatus} can be used interchangeably with ManagedIntegrationRuntimeNodeStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Starting** \
 * **Available** \
 * **Recycling** \
 * **Unavailable**
 */
export declare type ManagedIntegrationRuntimeNodeStatus = string;

/** Properties of managed integration runtime operation result. */
export declare interface ManagedIntegrationRuntimeOperationResult {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * The operation type. Could be start or stop.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
    /**
     * The start time of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The operation result.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly result?: string;
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: string;
    /**
     * Managed integration runtime error parameters.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly parameters?: string[];
    /**
     * The activity id for the operation request.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly activityId?: string;
}

/** Managed integration runtime status. */
export declare type ManagedIntegrationRuntimeStatus = IntegrationRuntimeStatus & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Managed";
    /**
     * The time at which the integration runtime was created, in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createTime?: Date;
    /**
     * The list of nodes for managed integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodes?: ManagedIntegrationRuntimeNode[];
    /**
     * The errors that occurred on this integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly otherErrors?: ManagedIntegrationRuntimeError[];
    /**
     * The last operation result that occurred on this integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastOperation?: ManagedIntegrationRuntimeOperationResult;
};

/** Managed Virtual Network Settings */
export declare interface ManagedVirtualNetworkSettings {
    /** Prevent Data Exfiltration */
    preventDataExfiltration?: boolean;
    /** Linked Access Check On Target Resource */
    linkedAccessCheckOnTargetResource?: boolean;
    /** Allowed Aad Tenant Ids For Linking */
    allowedAadTenantIdsForLinking?: string[];
}

/**
 * Defines values for ManagementOperationState. \
 * {@link KnownManagementOperationState} can be used interchangeably with ManagementOperationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Pending** \
 * **InProgress** \
 * **Succeeded** \
 * **Failed** \
 * **CancelInProgress** \
 * **Cancelled**
 */
export declare type ManagementOperationState = string;

/** Configuration for metadata sync */
export declare type MetadataSyncConfig = ProxyResource & {
    /** Indicates whether the metadata sync is enabled or disabled */
    enabled?: boolean;
    /** The Sync Interval in minutes. */
    syncIntervalInMinutes?: number;
};

/**
 * Defines values for NodeSize. \
 * {@link KnownNodeSize} can be used interchangeably with NodeSize,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Small** \
 * **Medium** \
 * **Large** \
 * **XLarge** \
 * **XXLarge** \
 * **XXXLarge**
 */
export declare type NodeSize = string;

/**
 * Defines values for NodeSizeFamily. \
 * {@link KnownNodeSizeFamily} can be used interchangeably with NodeSizeFamily,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **MemoryOptimized** \
 * **HardwareAcceleratedFPGA** \
 * **HardwareAcceleratedGPU**
 */
export declare type NodeSizeFamily = string;

/** A REST API operation */
export declare interface Operation {
    /** This is of the format {provider}/{resource}/{operation}. */
    name?: string;
    /** The object that describes the operation. */
    display?: OperationDisplay;
    /** The intended executor of the operation. */
    origin?: string;
    /** Any object */
    properties?: Record<string, unknown>;
}

/** The object that describes the operation. */
export declare interface OperationDisplay {
    /** Friendly name of the resource provider. */
    provider?: string;
    /** For example: read, write, delete. */
    operation?: string;
    /** The resource type on which the operation is performed. */
    resource?: string;
    /** The friendly name of the operation. */
    description?: string;
}

/** Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results. */
export declare interface OperationListResult {
    /** The list of operations supported by the resource provider. */
    value?: Operation[];
    /**
     * The URL to get the next set of operation list results if there are any.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** What is this? */
export declare interface OperationMetaLogSpecification {
    /** Log display name */
    displayName?: string;
    /** Time range the log covers */
    blobDuration?: string;
    /** Log unique name */
    name?: string;
}

/** What is this? */
export declare interface OperationMetaMetricDimensionSpecification {
    /** Dimension display name */
    displayName?: string;
    /** Dimension unique name */
    name?: string;
    /** Whether this metric should be exported for Shoebox */
    toBeExportedForShoebox?: boolean;
}

/** What is this? */
export declare interface OperationMetaMetricSpecification {
    /** The source MDM namespace */
    sourceMdmNamespace?: string;
    /** Metric display name */
    displayName?: string;
    /** Metric unique name */
    name?: string;
    /** Metric aggregation type */
    aggregationType?: string;
    /** Metric description */
    displayDescription?: string;
    /** The source MDM account */
    sourceMdmAccount?: string;
    /** Whether the regional MDM account is enabled */
    enableRegionalMdmAccount?: boolean;
    /** Metric units */
    unit?: string;
    /** Metric dimensions */
    dimensions?: OperationMetaMetricDimensionSpecification[];
    /** Whether the metric supports instance-level aggregation */
    supportsInstanceLevelAggregation?: boolean;
    /** Metric filter */
    metricFilterPattern?: string;
}

/** What is this? */
export declare interface OperationMetaServiceSpecification {
    /** Service metric specifications */
    metricSpecifications?: OperationMetaMetricSpecification[];
    /** Service log specifications */
    logSpecifications?: OperationMetaLogSpecification[];
}

/** An operation */
export declare interface OperationResource {
    /** Operation ID */
    id?: string;
    /** Operation name */
    name?: string;
    /** Operation status */
    status?: OperationStatus;
    /** Operation properties */
    properties?: Record<string, unknown>;
    /** Errors from the operation */
    error?: ErrorDetail;
    /** Operation start time */
    startTime?: Date;
    /** Operation start time */
    endTime?: Date;
    /** Completion percentage of the operation */
    percentComplete?: number;
}

/** Interface representing a Operations. */
export declare interface Operations {
    /**
     * Check whether a workspace name is available
     * @param request The check request
     * @param options The options parameters.
     */
    checkNameAvailability(request: CheckNameAvailabilityRequest, options?: OperationsCheckNameAvailabilityOptionalParams): Promise<OperationsCheckNameAvailabilityResponse>;
    /**
     * Get all available operations
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
    /**
     * Get the result of an operation
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param operationId Operation ID
     * @param options The options parameters.
     */
    getLocationHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options?: OperationsGetLocationHeaderResultOptionalParams): Promise<void>;
    /**
     * Get the status of an operation
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param operationId Operation ID
     * @param options The options parameters.
     */
    getAzureAsyncHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options?: OperationsGetAzureAsyncHeaderResultOptionalParams): Promise<OperationsGetAzureAsyncHeaderResultResponse>;
}

/** Optional parameters. */
export declare interface OperationsCheckNameAvailabilityOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the checkNameAvailability operation. */
export declare type OperationsCheckNameAvailabilityResponse = CheckNameAvailabilityResponse;

/** Optional parameters. */
export declare interface OperationsGetAzureAsyncHeaderResultOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getAzureAsyncHeaderResult operation. */
export declare type OperationsGetAzureAsyncHeaderResultResponse = OperationResource;

/** Optional parameters. */
export declare interface OperationsGetLocationHeaderResultOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface OperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type OperationsListResponse = AvailableRpOperation[];

/**
 * Defines values for OperationStatus. \
 * {@link KnownOperationStatus} can be used interchangeably with OperationStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export declare type OperationStatus = string;

/** A class that contains the optimized auto scale definition. */
export declare interface OptimizedAutoscale {
    /** The version of the template defined, for instance 1. */
    version: number;
    /** A boolean value that indicate if the optimized autoscale feature is enabled or not. */
    isEnabled: boolean;
    /** Minimum allowed instances count. */
    minimum: number;
    /** Maximum allowed instances count. */
    maximum: number;
}

/**
 * Defines values for PrincipalsModificationKind. \
 * {@link KnownPrincipalsModificationKind} can be used interchangeably with PrincipalsModificationKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Union** \
 * **Replace** \
 * **None**
 */
export declare type PrincipalsModificationKind = string;

/**
 * Defines values for PrincipalType. \
 * {@link KnownPrincipalType} can be used interchangeably with PrincipalType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **App** \
 * **Group** \
 * **User**
 */
export declare type PrincipalType = string;

/** Private endpoint details */
export declare interface PrivateEndpoint {
    /**
     * Resource id of the private endpoint.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
}

/** A private endpoint connection */
export declare type PrivateEndpointConnection = ProxyResource & {
    /** The private endpoint which the connection belongs to. */
    privateEndpoint?: PrivateEndpoint;
    /** Connection state of the private endpoint connection. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * Provisioning state of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
};

export declare type PrivateEndpointConnectionForPrivateLinkHub = PrivateEndpointConnectionForPrivateLinkHubBasicAutoGenerated & {
    name?: string;
    type?: string;
};

/** Private Endpoint Connection For Private Link Hub - Basic */
export declare interface PrivateEndpointConnectionForPrivateLinkHubBasic {
    /**
     * identifier
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /** The private endpoint which the connection belongs to. */
    privateEndpoint?: PrivateEndpoint;
    /** Connection state of the private endpoint connection. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * Provisioning state of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

export declare interface PrivateEndpointConnectionForPrivateLinkHubBasicAutoGenerated {
    id?: string;
    /** Properties of a private endpoint connection. */
    properties?: PrivateEndpointConnectionProperties;
}

export declare interface PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse {
    value?: PrivateEndpointConnectionForPrivateLinkHub[];
    nextLink?: string;
}

/** A list of private endpoint connections */
export declare interface PrivateEndpointConnectionList {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PrivateEndpointConnection[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Properties of a private endpoint connection. */
export declare interface PrivateEndpointConnectionProperties {
    /** The private endpoint which the connection belongs to. */
    privateEndpoint?: PrivateEndpoint;
    /** Connection state of the private endpoint connection. */
    privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
    /**
     * Provisioning state of the private endpoint connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
}

/** Interface representing a PrivateEndpointConnections. */
export declare interface PrivateEndpointConnections {
    /**
     * Lists private endpoint connection in workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: PrivateEndpointConnectionsListOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnection>;
    /**
     * Gets a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsGetOptionalParams): Promise<PrivateEndpointConnectionsGetResponse>;
    /**
     * Approve or reject a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param request Request body of private endpoint connection to create.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, request: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOptionalParams): Promise<PollerLike<PollOperationState<PrivateEndpointConnectionsCreateResponse>, PrivateEndpointConnectionsCreateResponse>>;
    /**
     * Approve or reject a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param request Request body of private endpoint connection to create.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, request: PrivateEndpointConnection, options?: PrivateEndpointConnectionsCreateOptionalParams): Promise<PrivateEndpointConnectionsCreateResponse>;
    /**
     * Delete a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Delete a private endpoint connection.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateEndpointConnectionName The name of the private endpoint connection.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type PrivateEndpointConnectionsCreateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateEndpointConnectionsListNextResponse = PrivateEndpointConnectionList;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionList;

/** Interface representing a PrivateEndpointConnectionsPrivateLinkHub. */
export declare interface PrivateEndpointConnectionsPrivateLinkHub {
    /**
     * Get all PrivateEndpointConnections in the PrivateLinkHub
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateLinkHubName Name of the privateLinkHub
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateLinkHubName: string, options?: PrivateEndpointConnectionsPrivateLinkHubListOptionalParams): PagedAsyncIterableIterator<PrivateEndpointConnectionForPrivateLinkHub>;
    /**
     * Get all PrivateEndpointConnection in the PrivateLinkHub by name
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateLinkHubName Name of the privateLinkHub
     * @param privateEndpointConnectionName Name of the privateEndpointConnection
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateLinkHubName: string, privateEndpointConnectionName: string, options?: PrivateEndpointConnectionsPrivateLinkHubGetOptionalParams): Promise<PrivateEndpointConnectionsPrivateLinkHubGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsPrivateLinkHubGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateEndpointConnectionsPrivateLinkHubGetResponse = PrivateEndpointConnectionForPrivateLinkHub;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsPrivateLinkHubListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateEndpointConnectionsPrivateLinkHubListNextResponse = PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse;

/** Optional parameters. */
export declare interface PrivateEndpointConnectionsPrivateLinkHubListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateEndpointConnectionsPrivateLinkHubListResponse = PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse;

/** A privateLinkHub */
export declare type PrivateLinkHub = TrackedResource & {
    /** PrivateLinkHub provisioning state */
    provisioningState?: string;
    /**
     * List of private endpoint connections
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly privateEndpointConnections?: PrivateEndpointConnectionForPrivateLinkHubBasic[];
};

/** List of privateLinkHubs */
export declare interface PrivateLinkHubInfoListResult {
    /** Link to the next page of results */
    nextLink?: string;
    /** List of privateLinkHubs */
    value?: PrivateLinkHub[];
}

/** PrivateLinkHub patch details */
export declare interface PrivateLinkHubPatchInfo {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
}

/** Interface representing a PrivateLinkHubPrivateLinkResources. */
export declare interface PrivateLinkHubPrivateLinkResources {
    /**
     * Get all private link resources for a private link hub
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateLinkHubName The name of the private link hub
     * @param options The options parameters.
     */
    list(resourceGroupName: string, privateLinkHubName: string, options?: PrivateLinkHubPrivateLinkResourcesListOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * Get private link resource in private link hub
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateLinkHubName The name of the private link hub
     * @param privateLinkResourceName The name of the private link resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateLinkHubName: string, privateLinkResourceName: string, options?: PrivateLinkHubPrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkHubPrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkHubPrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkHubPrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkHubPrivateLinkResourcesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateLinkHubPrivateLinkResourcesListNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export declare interface PrivateLinkHubPrivateLinkResourcesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateLinkHubPrivateLinkResourcesListResponse = PrivateLinkResourceListResult;

/** Interface representing a PrivateLinkHubs. */
export declare interface PrivateLinkHubs {
    /**
     * Returns a list of privateLinkHubs in a resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: PrivateLinkHubsListByResourceGroupOptionalParams): PagedAsyncIterableIterator<PrivateLinkHub>;
    /**
     * Returns a list of privateLinkHubs in a subscription
     * @param options The options parameters.
     */
    list(options?: PrivateLinkHubsListOptionalParams): PagedAsyncIterableIterator<PrivateLinkHub>;
    /**
     * Gets a privateLinkHub
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateLinkHubName Name of the privateLinkHub
     * @param options The options parameters.
     */
    get(resourceGroupName: string, privateLinkHubName: string, options?: PrivateLinkHubsGetOptionalParams): Promise<PrivateLinkHubsGetResponse>;
    /**
     * Updates a privateLinkHub
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateLinkHubName Name of the privateLinkHub
     * @param privateLinkHubPatchInfo PrivateLinkHub patch request properties
     * @param options The options parameters.
     */
    update(resourceGroupName: string, privateLinkHubName: string, privateLinkHubPatchInfo: PrivateLinkHubPatchInfo, options?: PrivateLinkHubsUpdateOptionalParams): Promise<PrivateLinkHubsUpdateResponse>;
    /**
     * Creates or updates a privateLinkHub
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateLinkHubName Name of the privateLinkHub
     * @param privateLinkHubInfo PrivateLinkHub create or update request properties
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, privateLinkHubName: string, privateLinkHubInfo: PrivateLinkHub, options?: PrivateLinkHubsCreateOrUpdateOptionalParams): Promise<PrivateLinkHubsCreateOrUpdateResponse>;
    /**
     * Deletes a privateLinkHub
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateLinkHubName Name of the privateLinkHub
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, privateLinkHubName: string, options?: PrivateLinkHubsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a privateLinkHub
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateLinkHubName Name of the privateLinkHub
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, privateLinkHubName: string, options?: PrivateLinkHubsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface PrivateLinkHubsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type PrivateLinkHubsCreateOrUpdateResponse = PrivateLinkHub;

/** Optional parameters. */
export declare interface PrivateLinkHubsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface PrivateLinkHubsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkHubsGetResponse = PrivateLinkHub;

/** Optional parameters. */
export declare interface PrivateLinkHubsListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type PrivateLinkHubsListByResourceGroupNextResponse = PrivateLinkHubInfoListResult;

/** Optional parameters. */
export declare interface PrivateLinkHubsListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type PrivateLinkHubsListByResourceGroupResponse = PrivateLinkHubInfoListResult;

/** Optional parameters. */
export declare interface PrivateLinkHubsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateLinkHubsListNextResponse = PrivateLinkHubInfoListResult;

/** Optional parameters. */
export declare interface PrivateLinkHubsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateLinkHubsListResponse = PrivateLinkHubInfoListResult;

/** Optional parameters. */
export declare interface PrivateLinkHubsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type PrivateLinkHubsUpdateResponse = PrivateLinkHub;

/** A private link resource */
export declare type PrivateLinkResource = ProxyResource & {
    /**
     * The private link resource properties.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly properties?: PrivateLinkResourceProperties;
};

/** A list of private link resources */
export declare interface PrivateLinkResourceListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: PrivateLinkResource[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Properties of a private link resource. */
export declare interface PrivateLinkResourceProperties {
    /**
     * The private link resource group id.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly groupId?: string;
    /**
     * The private link resource required member names.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredMembers?: string[];
    /**
     * Required DNS zone names of the the private link resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly requiredZoneNames?: string[];
}

/** Interface representing a PrivateLinkResources. */
export declare interface PrivateLinkResources {
    /**
     * Get all private link resources for a workspaces
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: PrivateLinkResourcesListOptionalParams): PagedAsyncIterableIterator<PrivateLinkResource>;
    /**
     * Get private link resource in workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param privateLinkResourceName The name of the private link resource
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, privateLinkResourceName: string, options?: PrivateLinkResourcesGetOptionalParams): Promise<PrivateLinkResourcesGetResponse>;
}

/** Optional parameters. */
export declare interface PrivateLinkResourcesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type PrivateLinkResourcesGetResponse = PrivateLinkResource;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type PrivateLinkResourcesListNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export declare interface PrivateLinkResourcesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type PrivateLinkResourcesListResponse = PrivateLinkResourceListResult;

/** Connection state details of the private endpoint */
export declare interface PrivateLinkServiceConnectionState {
    /** The private link service connection status. */
    status?: string;
    /** The private link service connection description. */
    description?: string;
    /**
     * The actions required for private link service connection.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly actionsRequired?: string;
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Succeeded** \
 * **Deleting** \
 * **Failed** \
 * **DeleteError**
 */
export declare type ProvisioningState = string;

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export declare type ProxyResource = Resource & {};

/** Purview Configuration */
export declare interface PurviewConfiguration {
    /** Purview Resource ID */
    purviewResourceId?: string;
}

/** Defines values for QueryAggregationFunction. */
export declare type QueryAggregationFunction = "min" | "max" | "avg" | "sum";

/** Defines values for QueryExecutionType. */
export declare type QueryExecutionType = "any" | "regular" | "irregular" | "aborted" | "exception";

/** A database query. */
export declare interface QueryInterval {
    /**
     * The start time of the measurement interval (ISO8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly intervalStartTime?: Date;
    /**
     * The number of times the query was executed during this interval.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly executionCount?: number;
    /**
     * The list of query metrics during this interval.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly metrics?: QueryMetric[];
}

/** A database query. */
export declare interface QueryMetric {
    /**
     * The name of the metric
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The name of the metric for display in user interface
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The unit of measurement
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: QueryMetricUnit;
    /**
     * The measured value
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: number;
}

/** Defines values for QueryMetricUnit. */
export declare type QueryMetricUnit = "percentage" | "KB" | "microseconds";

/** Defines values for QueryObservedMetricType. */
export declare type QueryObservedMetricType = "cpu" | "io" | "logio" | "duration" | "executionCount";

/** A database query. */
export declare interface QueryStatistic {
    /**
     * The id of the query
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly queryId?: string;
    /**
     * The list of query intervals.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly intervals?: QueryInterval[];
}

/** Class representing a read only following database. */
export declare type ReadOnlyFollowingDatabase = Database & {
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
    /**
     * The time the data should be kept before it stops being accessible to queries in TimeSpan.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly softDeletePeriod?: string;
    /** The time the data should be kept in cache for fast queries in TimeSpan. */
    hotCachePeriod?: string;
    /**
     * The statistics of the database.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statistics?: DatabaseStatistics;
    /**
     * The name of the leader cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly leaderClusterResourceId?: string;
    /**
     * The name of the attached database configuration cluster
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly attachedDatabaseConfigurationName?: string;
    /**
     * The principals modification kind of the database
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalsModificationKind?: PrincipalsModificationKind;
};

/** Class representing a read write database. */
export declare type ReadWriteDatabase = Database & {
    /**
     * The provisioned state of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: ResourceProvisioningState;
    /** The time the data should be kept before it stops being accessible to queries in TimeSpan. */
    softDeletePeriod?: string;
    /** The time the data should be kept in cache for fast queries in TimeSpan. */
    hotCachePeriod?: string;
    /**
     * The statistics of the database.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly statistics?: DatabaseStatistics;
    /**
     * Indicates whether the database is followed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isFollowed?: boolean;
};

/**
 * Defines values for Reason. \
 * {@link KnownReason} can be used interchangeably with Reason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export declare type Reason = string;

/** A recommended sensitivity label update operation. */
export declare type RecommendedSensitivityLabelUpdate = ProxyResource & {
    op?: RecommendedSensitivityLabelUpdateKind;
    /** Schema name of the column to update. */
    schema?: string;
    /** Table name of the column to update. */
    table?: string;
    /** Column name to update. */
    column?: string;
};

/** Defines values for RecommendedSensitivityLabelUpdateKind. */
export declare type RecommendedSensitivityLabelUpdateKind = "enable" | "disable";

/** A list of recommended sensitivity label update operations. */
export declare interface RecommendedSensitivityLabelUpdateList {
    operations?: RecommendedSensitivityLabelUpdate[];
}

/** A recoverable sql pool */
export declare type RecoverableSqlPool = ProxyResource & {
    /**
     * The edition of the database
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly edition?: string;
    /**
     * The service level objective name of the database
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceLevelObjective?: string;
    /**
     * The elastic pool name of the database
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly elasticPoolName?: string;
    /**
     * The last available backup date of the database (ISO8601 format)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastAvailableBackupDate?: Date;
};

/** The response to a list recoverable sql pools request */
export declare interface RecoverableSqlPoolListResult {
    /**
     * A list of recoverable sql pool
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RecoverableSqlPool[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** An existing operation for replacing the firewall rules */
export declare interface ReplaceAllFirewallRulesOperationResponse {
    /** The operation ID */
    operationId?: string;
}

/** Replace all IP firewall rules request */
export declare interface ReplaceAllIpFirewallRulesRequest {
    /** IP firewall rule properties */
    ipFirewallRules?: {
        [propertyName: string]: IpFirewallRuleProperties;
    };
}

/** Represents a Sql pool replication link. */
export declare type ReplicationLink = ProxyResource & {
    /**
     * Location of the workspace that contains this firewall rule.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * Legacy value indicating whether termination is allowed.  Currently always returns true.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isTerminationAllowed?: boolean;
    /**
     * Replication mode of this replication link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly replicationMode?: string;
    /**
     * The name of the workspace hosting the partner Sql pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly partnerServer?: string;
    /**
     * The name of the partner Sql pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly partnerDatabase?: string;
    /**
     * The Azure Region of the partner Sql pool.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly partnerLocation?: string;
    /**
     * The role of the Sql pool in the replication link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly role?: ReplicationRole;
    /**
     * The role of the partner Sql pool in the replication link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly partnerRole?: ReplicationRole;
    /**
     * The start time for the replication link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The percentage of seeding complete for the replication link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentComplete?: number;
    /**
     * The replication state for the replication link.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly replicationState?: ReplicationState;
};

/** Represents the response to a List Sql pool replication link request. */
export declare interface ReplicationLinkListResult {
    /** The list of Sql pool replication links housed in the Sql pool. */
    value?: ReplicationLink[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Defines values for ReplicationRole. */
export declare type ReplicationRole = "Primary" | "Secondary" | "NonReadableSecondary" | "Source" | "Copy";

/**
 * Defines values for ReplicationState. \
 * {@link KnownReplicationState} can be used interchangeably with ReplicationState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PENDING** \
 * **SEEDING** \
 * **CATCH_UP** \
 * **SUSPENDED**
 */
export declare type ReplicationState = string;

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export declare interface Resource {
    /**
     * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly id?: string;
    /**
     * The name of the resource
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly type?: string;
}

/** Defines values for ResourceIdentityType. */
export declare type ResourceIdentityType = "None" | "SystemAssigned" | "SystemAssigned,UserAssigned";

/** Contains the information necessary to perform a resource move (rename). */
export declare interface ResourceMoveDefinition {
    /** The target ID for the resource */
    id: string;
}

/**
 * Defines values for ResourceProvisioningState. \
 * {@link KnownResourceProvisioningState} can be used interchangeably with ResourceProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Running** \
 * **Creating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Moving** \
 * **Canceled**
 */
export declare type ResourceProvisioningState = string;

/** A restorable dropped Sql pool */
export declare type RestorableDroppedSqlPool = ProxyResource & {
    /**
     * The geo-location where the resource lives
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * The name of the database
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly databaseName?: string;
    /**
     * The edition of the database
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly edition?: string;
    /**
     * The max size in bytes of the database
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxSizeBytes?: string;
    /**
     * The service level objective name of the database
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceLevelObjective?: string;
    /**
     * The elastic pool name of the database
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly elasticPoolName?: string;
    /**
     * The creation date of the database (ISO8601 format)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
    /**
     * The deletion date of the database (ISO8601 format)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly deletionDate?: Date;
    /**
     * The earliest restore date of the database (ISO8601 format)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly earliestRestoreDate?: Date;
};

/** The response to a list restorable dropped Sql pools request */
export declare interface RestorableDroppedSqlPoolListResult {
    /** A list of restorable dropped Sql pools */
    value: RestorableDroppedSqlPool[];
}

/** Interface representing a RestorableDroppedSqlPools. */
export declare interface RestorableDroppedSqlPools {
    /**
     * Gets a list of deleted Sql pools that can be restored
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: RestorableDroppedSqlPoolsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<RestorableDroppedSqlPool>;
    /**
     * Gets a deleted sql pool that can be restored
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param restorableDroppedSqlPoolId The id of the deleted Sql Pool in the form of
     *                                   sqlPoolName,deletionTimeInFileTimeFormat
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, restorableDroppedSqlPoolId: string, options?: RestorableDroppedSqlPoolsGetOptionalParams): Promise<RestorableDroppedSqlPoolsGetResponse>;
}

/** Optional parameters. */
export declare interface RestorableDroppedSqlPoolsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type RestorableDroppedSqlPoolsGetResponse = RestorableDroppedSqlPool;

/** Optional parameters. */
export declare interface RestorableDroppedSqlPoolsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type RestorableDroppedSqlPoolsListByWorkspaceResponse = RestorableDroppedSqlPoolListResult;

/** Database restore points. */
export declare type RestorePoint = ProxyResource & {
    /**
     * Resource location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /**
     * The type of restore point
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restorePointType?: RestorePointType;
    /**
     * The earliest time to which this database can be restored
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly earliestRestoreDate?: Date;
    /**
     * The time the backup was taken
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restorePointCreationDate?: Date;
    /**
     * The label of restore point for backup request by user
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restorePointLabel?: string;
};

/** A list of long term retention backups. */
export declare interface RestorePointListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: RestorePoint[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Defines values for RestorePointType. */
export declare type RestorePointType = "CONTINUOUS" | "DISCRETE";

/** The base definition of a secret type. */
export declare interface SecretBase {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SecureString";
}

export declare type SecretBaseUnion = SecretBase | SecureString;

/** Azure Synapse secure string definition. The string value will be masked with asterisks '*' during Get or List API calls. */
export declare type SecureString = SecretBase & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SecureString";
    /** Value of secure string. */
    value: string;
};

/**
 * Defines values for SecurityAlertPolicyName. \
 * {@link KnownSecurityAlertPolicyName} can be used interchangeably with SecurityAlertPolicyName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type SecurityAlertPolicyName = string;

/**
 * Defines values for SecurityAlertPolicyNameAutoGenerated. \
 * {@link KnownSecurityAlertPolicyNameAutoGenerated} can be used interchangeably with SecurityAlertPolicyNameAutoGenerated,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default**
 */
export declare type SecurityAlertPolicyNameAutoGenerated = string;

/** Defines values for SecurityAlertPolicyState. */
export declare type SecurityAlertPolicyState = "New" | "Enabled" | "Disabled";

/** Self-hosted integration runtime. */
export declare type SelfHostedIntegrationRuntime = IntegrationRuntime & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SelfHosted";
    /** Linked integration runtime type from data factory */
    linkedInfo?: LinkedIntegrationRuntimeTypeUnion;
};

/** Properties of Self-hosted integration runtime node. */
export declare interface SelfHostedIntegrationRuntimeNode {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /**
     * Name of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeName?: string;
    /**
     * Machine name of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly machineName?: string;
    /**
     * URI for the host machine of the integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly hostServiceUri?: string;
    /**
     * Status of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: SelfHostedIntegrationRuntimeNodeStatus;
    /**
     * The integration runtime capabilities dictionary
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: {
        [propertyName: string]: string;
    };
    /**
     * Status of the integration runtime node version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly versionStatus?: string;
    /**
     * Version of the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /**
     * The time at which the integration runtime node was registered in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly registerTime?: Date;
    /**
     * The most recent time at which the integration runtime was connected in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastConnectTime?: Date;
    /**
     * The time at which the integration runtime will expire in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly expiryTime?: Date;
    /**
     * The time the node last started up.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastStartTime?: Date;
    /**
     * The integration runtime node last stop time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastStopTime?: Date;
    /**
     * The result of the last integration runtime node update.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastUpdateResult?: IntegrationRuntimeUpdateResult;
    /**
     * The last time for the integration runtime node update start.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastStartUpdateTime?: Date;
    /**
     * The last time for the integration runtime node update end.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly lastEndUpdateTime?: Date;
    /**
     * Indicates whether this node is the active dispatcher for integration runtime requests.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isActiveDispatcher?: boolean;
    /**
     * Maximum concurrent jobs on the integration runtime node.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly concurrentJobsLimit?: number;
    /**
     * The maximum concurrent jobs in this integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly maxConcurrentJobs?: number;
}

/**
 * Defines values for SelfHostedIntegrationRuntimeNodeStatus. \
 * {@link KnownSelfHostedIntegrationRuntimeNodeStatus} can be used interchangeably with SelfHostedIntegrationRuntimeNodeStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NeedRegistration** \
 * **Online** \
 * **Limited** \
 * **Offline** \
 * **Upgrading** \
 * **Initializing** \
 * **InitializeFailed**
 */
export declare type SelfHostedIntegrationRuntimeNodeStatus = string;

/** Self-hosted integration runtime status. */
export declare type SelfHostedIntegrationRuntimeStatus = IntegrationRuntimeStatus & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "SelfHosted";
    /**
     * The time at which the integration runtime was created, in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly createTime?: Date;
    /**
     * The task queue id of the integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly taskQueueId?: string;
    /**
     * The node communication Channel encryption mode
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nodeCommunicationChannelEncryptionMode?: string;
    /**
     * It is used to set the encryption mode for node-node communication channel (when more than 2 self-hosted integration runtime nodes exist).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly internalChannelEncryption?: IntegrationRuntimeInternalChannelEncryptionMode;
    /**
     * Version of the integration runtime.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly version?: string;
    /** The list of nodes for this integration runtime. */
    nodes?: SelfHostedIntegrationRuntimeNode[];
    /**
     * The date at which the integration runtime will be scheduled to update, in ISO8601 format.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scheduledUpdateDate?: Date;
    /**
     * The time in the date scheduled by service to update the integration runtime, e.g., PT03H is 3 hours
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly updateDelayOffset?: string;
    /**
     * The local time zone offset in hours.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly localTimeZoneOffset?: string;
    /**
     * Object with additional information about integration runtime capabilities.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly capabilities?: {
        [propertyName: string]: string;
    };
    /**
     * The URLs for the services used in integration runtime backend service.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serviceUrls?: string[];
    /**
     * Whether Self-hosted integration runtime auto update has been turned on.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly autoUpdate?: IntegrationRuntimeAutoUpdate;
    /**
     * Status of the integration runtime version.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly versionStatus?: string;
    /** The list of linked integration runtimes that are created to share with this integration runtime. */
    links?: LinkedIntegrationRuntime[];
    /**
     * The version that the integration runtime is going to update to.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly pushedVersion?: string;
    /**
     * The latest version on download center.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly latestVersion?: string;
    /**
     * The estimated time when the self-hosted integration runtime will be updated.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly autoUpdateETA?: Date;
    /** The service region of the integration runtime */
    serviceRegion?: string;
    /** The newer versions on download center. */
    newerVersions?: string[];
};

/** A sensitivity label. */
export declare type SensitivityLabel = ProxyResource & {
    /**
     * managed by
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly managedBy?: string;
    /**
     * The schema name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly schemaName?: string;
    /**
     * The table name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly tableName?: string;
    /**
     * The column name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly columnName?: string;
    /** The label name. */
    labelName?: string;
    /** The label ID. */
    labelId?: string;
    /** The information type. */
    informationType?: string;
    /** The information type ID. */
    informationTypeId?: string;
    /**
     * Is sensitivity recommendation disabled. Applicable for recommended sensitivity label only. Specifies whether the sensitivity recommendation on this column is disabled (dismissed) or not.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isDisabled?: boolean;
    rank?: SensitivityLabelRank;
};

/** A list of sensitivity labels. */
export declare interface SensitivityLabelListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SensitivityLabel[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Defines values for SensitivityLabelRank. */
export declare type SensitivityLabelRank = "None" | "Low" | "Medium" | "High" | "Critical";

/** Defines values for SensitivityLabelSource. */
export declare type SensitivityLabelSource = "current" | "recommended";

/** A sensitivity label update operation. */
export declare type SensitivityLabelUpdate = ProxyResource & {
    op?: SensitivityLabelUpdateKind;
    /** Schema name of the column to update. */
    schema?: string;
    /** Table name of the column to update. */
    table?: string;
    /** Column name to update. */
    column?: string;
    /** The sensitivity label information to apply on a column. */
    sensitivityLabel?: SensitivityLabel;
};

/** Defines values for SensitivityLabelUpdateKind. */
export declare type SensitivityLabelUpdateKind = "set" | "remove";

/** A list of sensitivity label update operations. */
export declare interface SensitivityLabelUpdateList {
    operations?: SensitivityLabelUpdate[];
}

/** A server blob auditing policy. */
export declare type ServerBlobAuditingPolicy = ProxyResource & {
    /** Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required. */
    state?: BlobAuditingPolicyState;
    /** Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required. */
    storageEndpoint?: string;
    /**
     * Specifies the identifier key of the auditing storage account.
     * If state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.
     * Prerequisites for using managed identity authentication:
     * 1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).
     * 2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.
     * For more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)
     */
    storageAccountAccessKey?: string;
    /** Specifies the number of days to keep in the audit logs in the storage account. */
    retentionDays?: number;
    /**
     * Specifies the Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     */
    auditActionsAndGroups?: string[];
    /** Specifies the blob storage subscription Id. */
    storageAccountSubscriptionId?: string;
    /** Specifies whether storageAccountAccessKey value is the storage's secondary key. */
    isStorageSecondaryKeyInUse?: boolean;
    /**
     * Specifies whether audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
     * Note that for server level audit you should use the 'master' database as {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     */
    isAzureMonitorTargetEnabled?: boolean;
    /**
     * Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.
     * The default minimum value is 1000 (1 second). The maximum is 2,147,483,647.
     */
    queueDelayMs?: number;
    /**
     * Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'State' as 'Enabled', 'IsAzureMonitorTargetEnabled' as true and 'IsDevopsAuditEnabled' as true
     *
     * When using REST API to configure auditing, Diagnostic Settings with 'DevOpsOperationsAudit' diagnostic logs category on the master database should also be created.
     *
     * Diagnostic Settings URI format:
     * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     */
    isDevopsAuditEnabled?: boolean;
};

/** A list of server auditing settings. */
export declare interface ServerBlobAuditingPolicyListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ServerBlobAuditingPolicy[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for ServerKeyType. \
 * {@link KnownServerKeyType} can be used interchangeably with ServerKeyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ServiceManaged** \
 * **AzureKeyVault**
 */
export declare type ServerKeyType = string;

/** Workspace managed Sql server security alert policy. */
export declare type ServerSecurityAlertPolicy = ProxyResource & {
    /** Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific server */
    state?: SecurityAlertPolicyState;
    /** Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action */
    disabledAlerts?: string[];
    /** Specifies an array of e-mail addresses to which the alert is sent. */
    emailAddresses?: string[];
    /** Specifies that the alert is sent to the account administrators. */
    emailAccountAdmins?: boolean;
    /** Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. */
    storageEndpoint?: string;
    /** Specifies the identifier key of the Threat Detection audit storage account. */
    storageAccountAccessKey?: string;
    /** Specifies the number of days to keep in the Threat Detection audit logs. */
    retentionDays?: number;
    /**
     * Specifies the UTC creation time of the policy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
};

/** A list of the workspace managed sql server's security alert policies. */
export declare interface ServerSecurityAlertPolicyListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ServerSecurityAlertPolicy[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Represents server metrics. */
export declare interface ServerUsage {
    /**
     * Name of the server usage metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceName?: string;
    /**
     * The metric display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The current value of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentValue?: number;
    /**
     * The current limit of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly limit?: number;
    /**
     * The units of the metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: string;
    /**
     * The next reset time for the metric (ISO8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextResetTime?: Date;
}

/** Represents the response to a list server metrics request. */
export declare interface ServerUsageListResult {
    /** The list of server metrics for the server. */
    value: ServerUsage[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** A server vulnerability assessment. */
export declare type ServerVulnerabilityAssessment = ProxyResource & {
    /** A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/). */
    storageContainerPath?: string;
    /** A shared access signature (SAS Key) that has read and write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required. */
    storageContainerSasKey?: string;
    /** Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required. */
    storageAccountAccessKey?: string;
    /** The recurring scans settings */
    recurringScans?: VulnerabilityAssessmentRecurringScansProperties;
};

/** A list of the server's vulnerability assessments. */
export declare interface ServerVulnerabilityAssessmentListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: ServerVulnerabilityAssessment[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** SQL pool SKU */
export declare interface Sku {
    /** The service tier */
    tier?: string;
    /** The SKU name */
    name?: string;
    /** If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted. */
    capacity?: number;
}

/** The Kusto SKU description of given resource type */
export declare interface SkuDescription {
    /**
     * The resource type
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceType?: string;
    /**
     * The name of the SKU
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The size of the SKU
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly size?: string;
    /**
     * The set of locations that the SKU is available
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locations?: string[];
    /**
     * Locations and zones
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly locationInfo?: SkuLocationInfoItem[];
    /**
     * The restrictions because of which SKU cannot be used
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly restrictions?: Record<string, unknown>[];
}

/** The list of the SKU descriptions */
export declare interface SkuDescriptionList {
    /**
     * SKU descriptions
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SkuDescription[];
}

/** The locations and zones info for SKU. */
export declare interface SkuLocationInfoItem {
    /** The available location of the SKU. */
    location: string;
    /** The available zone of the SKU. */
    zones?: string[];
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Compute optimized** \
 * **Storage optimized**
 */
export declare type SkuName = string;

/**
 * Defines values for SkuSize. \
 * {@link KnownSkuSize} can be used interchangeably with SkuSize,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Extra small** \
 * **Small** \
 * **Medium** \
 * **Large**
 */
export declare type SkuSize = string;

/** SparkConfig Properties for a Big Data pool powered by Apache Spark */
export declare interface SparkConfigProperties {
    /**
     * The last update time of the spark config properties file.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly time?: Date;
    /** The spark config properties. */
    content?: string;
    /** The filename of the spark config properties file. */
    filename?: string;
    /** The type of the spark config properties file. */
    configurationType?: ConfigurationType;
}

/** Interface representing a SparkConfiguration. */
export declare interface SparkConfiguration {
    /**
     * Get SparkConfiguration by name in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param sparkConfigurationName SparkConfiguration name
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, sparkConfigurationName: string, workspaceName: string, options?: SparkConfigurationGetOptionalParams): Promise<SparkConfigurationGetResponse>;
}

/** Optional parameters. */
export declare interface SparkConfigurationGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SparkConfigurationGetResponse = SparkConfigurationResource;

/** A list of SparkConfiguration resources. */
export declare interface SparkConfigurationListResponse {
    /** List of SparkConfiguration. */
    value: SparkConfigurationResource[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** SparkConfiguration response details */
export declare type SparkConfigurationResource = SubResource & {
    /** Description about the SparkConfiguration. */
    description?: string;
    /** SparkConfiguration configs. */
    configs: {
        [propertyName: string]: string;
    };
    /** Annotations for SparkConfiguration. */
    annotations?: string[];
    /** additional Notes. */
    notes?: string;
    /** The identity that created the resource. */
    createdBy?: string;
    /** The timestamp of resource creation. */
    created?: Date;
};

/** Interface representing a SparkConfigurations. */
export declare interface SparkConfigurations {
    /**
     * List sparkConfigurations in a workspace.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: SparkConfigurationsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<SparkConfigurationResource>;
}

/** Optional parameters. */
export declare interface SparkConfigurationsListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type SparkConfigurationsListByWorkspaceNextResponse = SparkConfigurationListResponse;

/** Optional parameters. */
export declare interface SparkConfigurationsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type SparkConfigurationsListByWorkspaceResponse = SparkConfigurationListResponse;

/** A SQL Analytics pool */
export declare type SqlPool = TrackedResource & {
    /** SQL pool SKU */
    sku?: Sku;
    /** Maximum size in bytes */
    maxSizeBytes?: number;
    /** Collation mode */
    collation?: string;
    /** Source database to create from */
    sourceDatabaseId?: string;
    /** Backup database to restore from */
    recoverableDatabaseId?: string;
    /** Resource state */
    provisioningState?: string;
    /**
     * Resource status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /** Snapshot time to restore */
    restorePointInTime?: Date;
    /**
     * Specifies the mode of sql pool creation.
     *
     * Default: regular sql pool creation.
     *
     * PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
     *
     * Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
     *
     * Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool's original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
     */
    createMode?: CreateMode;
    /**
     * Date the SQL pool was created
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
    /** The storage account type used to store backups for this sql pool. */
    storageAccountType?: StorageAccountType;
    /** Specifies the time that the sql pool was deleted */
    sourceDatabaseDeletionDate?: Date;
};

/** Interface representing a SqlPoolBlobAuditingPolicies. */
export declare interface SqlPoolBlobAuditingPolicies {
    /**
     * Lists auditing settings of a Sql pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    listBySqlPool(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolBlobAuditingPoliciesListBySqlPoolOptionalParams): PagedAsyncIterableIterator<SqlPoolBlobAuditingPolicy>;
    /**
     * Get a SQL pool's blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolBlobAuditingPoliciesGetOptionalParams): Promise<SqlPoolBlobAuditingPoliciesGetResponse>;
    /**
     * Creates or updates a SQL pool's blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters The database blob auditing policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, parameters: SqlPoolBlobAuditingPolicy, options?: SqlPoolBlobAuditingPoliciesCreateOrUpdateOptionalParams): Promise<SqlPoolBlobAuditingPoliciesCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolBlobAuditingPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SqlPoolBlobAuditingPoliciesCreateOrUpdateResponse = SqlPoolBlobAuditingPolicy;

/** Optional parameters. */
export declare interface SqlPoolBlobAuditingPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolBlobAuditingPoliciesGetResponse = SqlPoolBlobAuditingPolicy;

/** Optional parameters. */
export declare interface SqlPoolBlobAuditingPoliciesListBySqlPoolNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySqlPoolNext operation. */
export declare type SqlPoolBlobAuditingPoliciesListBySqlPoolNextResponse = SqlPoolBlobAuditingPolicyListResult;

/** Optional parameters. */
export declare interface SqlPoolBlobAuditingPoliciesListBySqlPoolOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listBySqlPool operation. */
export declare type SqlPoolBlobAuditingPoliciesListBySqlPoolResponse = SqlPoolBlobAuditingPolicyListResult;

/** A Sql pool blob auditing policy. */
export declare type SqlPoolBlobAuditingPolicy = ProxyResource & {
    /**
     * Resource kind.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /** Specifies the state of the policy. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required. */
    state?: BlobAuditingPolicyState;
    /** Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint is required. */
    storageEndpoint?: string;
    /** Specifies the identifier key of the auditing storage account. If state is Enabled and storageEndpoint is specified, storageAccountAccessKey is required. */
    storageAccountAccessKey?: string;
    /** Specifies the number of days to keep in the audit logs in the storage account. */
    retentionDays?: number;
    /**
     * Specifies the Actions-Groups and Actions to audit.
     *
     * The recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:
     *
     * BATCH_COMPLETED_GROUP,
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
     * FAILED_DATABASE_AUTHENTICATION_GROUP.
     *
     * This above combination is also the set that is configured by default when enabling auditing from the Azure portal.
     *
     * The supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):
     *
     * APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
     * BACKUP_RESTORE_GROUP
     * DATABASE_LOGOUT_GROUP
     * DATABASE_OBJECT_CHANGE_GROUP
     * DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
     * DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
     * DATABASE_OPERATION_GROUP
     * DATABASE_PERMISSION_CHANGE_GROUP
     * DATABASE_PRINCIPAL_CHANGE_GROUP
     * DATABASE_PRINCIPAL_IMPERSONATION_GROUP
     * DATABASE_ROLE_MEMBER_CHANGE_GROUP
     * FAILED_DATABASE_AUTHENTICATION_GROUP
     * SCHEMA_OBJECT_ACCESS_GROUP
     * SCHEMA_OBJECT_CHANGE_GROUP
     * SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
     * SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
     * SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
     * USER_CHANGE_PASSWORD_GROUP
     * BATCH_STARTED_GROUP
     * BATCH_COMPLETED_GROUP
     *
     * These are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.
     *
     * For more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
     *
     * For Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:
     * SELECT
     * UPDATE
     * INSERT
     * DELETE
     * EXECUTE
     * RECEIVE
     * REFERENCES
     *
     * The general form for defining an action to be audited is:
     * {action} ON {object} BY {principal}
     *
     * Note that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.
     *
     * For example:
     * SELECT on dbo.myTable by public
     * SELECT on DATABASE::myDatabase by public
     * SELECT on SCHEMA::mySchema by public
     *
     * For more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
     */
    auditActionsAndGroups?: string[];
    /** Specifies the blob storage subscription Id. */
    storageAccountSubscriptionId?: string;
    /** Specifies whether storageAccountAccessKey value is the storage's secondary key. */
    isStorageSecondaryKeyInUse?: boolean;
    /**
     * Specifies whether audit events are sent to Azure Monitor.
     * In order to send the events to Azure Monitor, specify 'state' as 'Enabled' and 'isAzureMonitorTargetEnabled' as true.
     *
     * When using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.
     * Note that for server level audit you should use the 'master' database as {databaseName}.
     *
     * Diagnostic Settings URI format:
     * PUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
     *
     * For more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)
     * or [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
     *
     */
    isAzureMonitorTargetEnabled?: boolean;
};

/** A list of Sql pool auditing settings. */
export declare interface SqlPoolBlobAuditingPolicyListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlPoolBlobAuditingPolicy[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** The response to a list Sql pool operations request */
export declare interface SqlPoolBlobAuditingPolicySqlPoolOperationListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlPoolOperation[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** A Sql pool column resource. */
export declare type SqlPoolColumn = ProxyResource & {
    /** The column data type. */
    columnType?: ColumnDataType;
    /**
     * Indicates whether column value is computed or not
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isComputed?: boolean;
};

/** A list of Sql pool columns. */
export declare interface SqlPoolColumnListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlPoolColumn[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a SqlPoolColumns. */
export declare interface SqlPoolColumns {
    /**
     * Get Sql pool column
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, tableName: string, columnName: string, options?: SqlPoolColumnsGetOptionalParams): Promise<SqlPoolColumnsGetResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolColumnsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolColumnsGetResponse = SqlPoolColumn;

/** Interface representing a SqlPoolConnectionPolicies. */
export declare interface SqlPoolConnectionPolicies {
    /**
     * Get a Sql pool's connection policy, which is used with table auditing.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param connectionPolicyName The name of the connection policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, connectionPolicyName: ConnectionPolicyName, options?: SqlPoolConnectionPoliciesGetOptionalParams): Promise<SqlPoolConnectionPoliciesGetResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolConnectionPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolConnectionPoliciesGetResponse = SqlPoolConnectionPolicy;

/** A Sql pool connection policy. */
export declare type SqlPoolConnectionPolicy = ProxyResource & {
    /**
     * Resource kind.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly kind?: string;
    /**
     * Resource location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** The state of security access. */
    securityEnabledAccess?: string;
    /** The fully qualified host name of the auditing proxy. */
    proxyDnsName?: string;
    /** The port number of the auditing proxy. */
    proxyPort?: string;
    /** The visibility of the auditing proxy. */
    visibility?: string;
    /** Whether server default is enabled or disabled. */
    useServerDefault?: string;
    /** The state of proxy redirection. */
    redirectionState?: string;
    /** The connection policy state. */
    state?: string;
};

/** Interface representing a SqlPoolDataWarehouseUserActivities. */
export declare interface SqlPoolDataWarehouseUserActivities {
    /**
     * Gets the user activities of a SQL pool which includes running and suspended queries
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param dataWarehouseUserActivityName The activity name of the Sql pool.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, dataWarehouseUserActivityName: DataWarehouseUserActivityName, options?: SqlPoolDataWarehouseUserActivitiesGetOptionalParams): Promise<SqlPoolDataWarehouseUserActivitiesGetResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolDataWarehouseUserActivitiesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolDataWarehouseUserActivitiesGetResponse = DataWarehouseUserActivities;

/** Interface representing a SqlPoolGeoBackupPolicies. */
export declare interface SqlPoolGeoBackupPolicies {
    /**
     * Get list of SQL pool geo backup policies
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolGeoBackupPoliciesListOptionalParams): PagedAsyncIterableIterator<GeoBackupPolicy>;
    /**
     * Updates a SQL Pool geo backup policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param geoBackupPolicyName The name of the geo backup policy.
     * @param parameters The required parameters for creating or updating the geo backup policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, geoBackupPolicyName: GeoBackupPolicyName, parameters: GeoBackupPolicy, options?: SqlPoolGeoBackupPoliciesCreateOrUpdateOptionalParams): Promise<SqlPoolGeoBackupPoliciesCreateOrUpdateResponse>;
    /**
     * Get the specified SQL pool geo backup policy
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param geoBackupPolicyName The name of the geo backup policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, geoBackupPolicyName: GeoBackupPolicyName, options?: SqlPoolGeoBackupPoliciesGetOptionalParams): Promise<SqlPoolGeoBackupPoliciesGetResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolGeoBackupPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SqlPoolGeoBackupPoliciesCreateOrUpdateResponse = GeoBackupPolicy;

/** Optional parameters. */
export declare interface SqlPoolGeoBackupPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolGeoBackupPoliciesGetResponse = GeoBackupPolicy;

/** Optional parameters. */
export declare interface SqlPoolGeoBackupPoliciesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolGeoBackupPoliciesListResponse = GeoBackupPolicyListResult;

/** List of SQL pools */
export declare interface SqlPoolInfoListResult {
    /** Link to the next page of results */
    nextLink?: string;
    /** List of SQL pools */
    value?: SqlPool[];
}

/** Interface representing a SqlPoolMaintenanceWindowOptions. */
export declare interface SqlPoolMaintenanceWindowOptions {
    /**
     * Get list of SQL pool's available maintenance windows.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param maintenanceWindowOptionsName Maintenance window options name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, maintenanceWindowOptionsName: string, options?: SqlPoolMaintenanceWindowOptionsGetOptionalParams): Promise<SqlPoolMaintenanceWindowOptionsGetResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolMaintenanceWindowOptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolMaintenanceWindowOptionsGetResponse = MaintenanceWindowOptions;

/** Interface representing a SqlPoolMaintenanceWindows. */
export declare interface SqlPoolMaintenanceWindows {
    /**
     * Get a SQL pool's Maintenance Windows.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param maintenanceWindowName Maintenance window name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, maintenanceWindowName: string, options?: SqlPoolMaintenanceWindowsGetOptionalParams): Promise<SqlPoolMaintenanceWindowsGetResponse>;
    /**
     * Creates or updates a Sql pool's maintenance windows settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param maintenanceWindowName Maintenance window name.
     * @param parameters The required parameters for creating or updating Maintenance Windows settings
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, maintenanceWindowName: string, parameters: MaintenanceWindows, options?: SqlPoolMaintenanceWindowsCreateOrUpdateOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SqlPoolMaintenanceWindowsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SqlPoolMaintenanceWindowsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolMaintenanceWindowsGetResponse = MaintenanceWindows;

/** Interface representing a SqlPoolMetadataSyncConfigs. */
export declare interface SqlPoolMetadataSyncConfigs {
    /**
     * Get the metadata sync configuration for a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolMetadataSyncConfigsGetOptionalParams): Promise<SqlPoolMetadataSyncConfigsGetResponse>;
    /**
     * Set the metadata sync configuration for a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param metadataSyncConfiguration Metadata sync configuration
     * @param options The options parameters.
     */
    create(resourceGroupName: string, workspaceName: string, sqlPoolName: string, metadataSyncConfiguration: MetadataSyncConfig, options?: SqlPoolMetadataSyncConfigsCreateOptionalParams): Promise<SqlPoolMetadataSyncConfigsCreateResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolMetadataSyncConfigsCreateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the create operation. */
export declare type SqlPoolMetadataSyncConfigsCreateResponse = MetadataSyncConfig;

/** Optional parameters. */
export declare interface SqlPoolMetadataSyncConfigsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolMetadataSyncConfigsGetResponse = MetadataSyncConfig;

/** A Sql pool operation. */
export declare type SqlPoolOperation = ProxyResource & {
    /**
     * The name of the Sql pool the operation is being performed on.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly databaseName?: string;
    /**
     * The name of operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operation?: string;
    /**
     * The friendly name of operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly operationFriendlyName?: string;
    /**
     * The percentage of the operation completed.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly percentComplete?: number;
    /**
     * The name of the server.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly serverName?: string;
    /**
     * The operation start time.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The operation state.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: ManagementOperationState;
    /**
     * The operation error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorCode?: number;
    /**
     * The operation error description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorDescription?: string;
    /**
     * The operation error severity.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errorSeverity?: number;
    /**
     * Whether or not the error is a user error.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isUserError?: boolean;
    /**
     * The estimated completion time of the operation.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly estimatedCompletionTime?: Date;
    /**
     * The operation description.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly description?: string;
    /**
     * Whether the operation can be cancelled.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly isCancellable?: boolean;
};

/** Interface representing a SqlPoolOperationResults. */
export declare interface SqlPoolOperationResults {
    /**
     * Get the status of a SQL pool operation
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param operationId Operation ID
     * @param options The options parameters.
     */
    getLocationHeaderResult(resourceGroupName: string, workspaceName: string, sqlPoolName: string, operationId: string, options?: SqlPoolOperationResultsGetLocationHeaderResultOptionalParams): Promise<SqlPoolOperationResultsGetLocationHeaderResultResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolOperationResultsGetLocationHeaderResultOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getLocationHeaderResult operation. */
export declare type SqlPoolOperationResultsGetLocationHeaderResultResponse = Record<string, unknown>;

/** Interface representing a SqlPoolOperations. */
export declare interface SqlPoolOperations {
    /**
     * Gets a list of operations performed on the SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolOperationsListOptionalParams): PagedAsyncIterableIterator<SqlPoolOperation>;
}

/** Optional parameters. */
export declare interface SqlPoolOperationsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolOperationsListNextResponse = SqlPoolBlobAuditingPolicySqlPoolOperationListResult;

/** Optional parameters. */
export declare interface SqlPoolOperationsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolOperationsListResponse = SqlPoolBlobAuditingPolicySqlPoolOperationListResult;

/** A SQL Analytics pool patch info */
export declare interface SqlPoolPatchInfo {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location?: string;
    /** SQL pool SKU */
    sku?: Sku;
    /** Maximum size in bytes */
    maxSizeBytes?: number;
    /** Collation mode */
    collation?: string;
    /** Source database to create from */
    sourceDatabaseId?: string;
    /** Backup database to restore from */
    recoverableDatabaseId?: string;
    /** Resource state */
    provisioningState?: string;
    /**
     * Resource status
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly status?: string;
    /** Snapshot time to restore */
    restorePointInTime?: Date;
    /**
     * Specifies the mode of sql pool creation.
     *
     * Default: regular sql pool creation.
     *
     * PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must be specified as the resource ID of the existing sql pool, and restorePointInTime must be specified.
     *
     * Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId  must be specified as the recoverableDatabaseId to restore.
     *
     * Restore: Creates a sql pool by restoring a backup of a deleted sql  pool. SourceDatabaseId should be the sql pool's original resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be specified.
     */
    createMode?: CreateMode;
    /**
     * Date the SQL pool was created
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationDate?: Date;
    /** The storage account type used to store backups for this sql pool. */
    storageAccountType?: StorageAccountType;
    /** Specifies the time that the sql pool was deleted */
    sourceDatabaseDeletionDate?: Date;
}

/** Interface representing a SqlPoolRecommendedSensitivityLabels. */
export declare interface SqlPoolRecommendedSensitivityLabels {
    /**
     * Update recommended sensitivity labels states of a given SQL Pool using an operations batch.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters A list of recommended sensitivity label update operations.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, sqlPoolName: string, parameters: RecommendedSensitivityLabelUpdateList, options?: SqlPoolRecommendedSensitivityLabelsUpdateOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SqlPoolRecommendedSensitivityLabelsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Interface representing a SqlPoolReplicationLinks. */
export declare interface SqlPoolReplicationLinks {
    /**
     * Lists a Sql pool's replication links.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolReplicationLinksListOptionalParams): PagedAsyncIterableIterator<ReplicationLink>;
    /**
     * Get SQL pool replication link by name.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param linkId The ID of the replication link.
     * @param options The options parameters.
     */
    getByName(resourceGroupName: string, workspaceName: string, sqlPoolName: string, linkId: string, options?: SqlPoolReplicationLinksGetByNameOptionalParams): Promise<SqlPoolReplicationLinksGetByNameResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolReplicationLinksGetByNameOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the getByName operation. */
export declare type SqlPoolReplicationLinksGetByNameResponse = ReplicationLink;

/** Optional parameters. */
export declare interface SqlPoolReplicationLinksListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolReplicationLinksListNextResponse = ReplicationLinkListResult;

/** Optional parameters. */
export declare interface SqlPoolReplicationLinksListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolReplicationLinksListResponse = ReplicationLinkListResult;

/** Interface representing a SqlPoolRestorePoints. */
export declare interface SqlPoolRestorePoints {
    /**
     * Get SQL pool backup information
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolRestorePointsListOptionalParams): PagedAsyncIterableIterator<RestorePoint>;
    /**
     * Creates a restore point for a data warehouse.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters The definition for creating the restore point of this Sql pool.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, parameters: CreateSqlPoolRestorePointDefinition, options?: SqlPoolRestorePointsCreateOptionalParams): Promise<PollerLike<PollOperationState<SqlPoolRestorePointsCreateResponse>, SqlPoolRestorePointsCreateResponse>>;
    /**
     * Creates a restore point for a data warehouse.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters The definition for creating the restore point of this Sql pool.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, parameters: CreateSqlPoolRestorePointDefinition, options?: SqlPoolRestorePointsCreateOptionalParams): Promise<SqlPoolRestorePointsCreateResponse>;
    /**
     * Gets a restore point.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param restorePointName The name of the restore point.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, restorePointName: string, options?: SqlPoolRestorePointsGetOptionalParams): Promise<SqlPoolRestorePointsGetResponse>;
    /**
     * Deletes a restore point.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param restorePointName The name of the restore point.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, sqlPoolName: string, restorePointName: string, options?: SqlPoolRestorePointsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SqlPoolRestorePointsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type SqlPoolRestorePointsCreateResponse = RestorePoint;

/** Optional parameters. */
export declare interface SqlPoolRestorePointsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SqlPoolRestorePointsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolRestorePointsGetResponse = RestorePoint;

/** Optional parameters. */
export declare interface SqlPoolRestorePointsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolRestorePointsListNextResponse = RestorePointListResult;

/** Optional parameters. */
export declare interface SqlPoolRestorePointsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolRestorePointsListResponse = RestorePointListResult;

/** Interface representing a SqlPools. */
export declare interface SqlPools {
    /**
     * List all SQL pools
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: SqlPoolsListByWorkspaceOptionalParams): PagedAsyncIterableIterator<SqlPool>;
    /**
     * Get SQL pool properties
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolsGetOptionalParams): Promise<SqlPoolsGetResponse>;
    /**
     * Apply a partial update to a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param sqlPoolInfo The updated SQL pool properties
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, sqlPoolName: string, sqlPoolInfo: SqlPoolPatchInfo, options?: SqlPoolsUpdateOptionalParams): Promise<SqlPoolsUpdateResponse>;
    /**
     * Create a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param sqlPoolInfo The SQL pool to create
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, sqlPoolInfo: SqlPool, options?: SqlPoolsCreateOptionalParams): Promise<PollerLike<PollOperationState<SqlPoolsCreateResponse>, SqlPoolsCreateResponse>>;
    /**
     * Create a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param sqlPoolInfo The SQL pool to create
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, sqlPoolInfo: SqlPool, options?: SqlPoolsCreateOptionalParams): Promise<SqlPoolsCreateResponse>;
    /**
     * Delete a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolsDeleteOptionalParams): Promise<PollerLike<PollOperationState<SqlPoolsDeleteResponse>, SqlPoolsDeleteResponse>>;
    /**
     * Delete a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolsDeleteOptionalParams): Promise<SqlPoolsDeleteResponse>;
    /**
     * Pause a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    beginPause(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolsPauseOptionalParams): Promise<PollerLike<PollOperationState<SqlPoolsPauseResponse>, SqlPoolsPauseResponse>>;
    /**
     * Pause a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    beginPauseAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolsPauseOptionalParams): Promise<SqlPoolsPauseResponse>;
    /**
     * Resume a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    beginResume(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolsResumeOptionalParams): Promise<PollerLike<PollOperationState<SqlPoolsResumeResponse>, SqlPoolsResumeResponse>>;
    /**
     * Resume a SQL pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    beginResumeAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolsResumeOptionalParams): Promise<SqlPoolsResumeResponse>;
    /**
     * Rename a SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters The resource move definition for renaming this Sql pool.
     * @param options The options parameters.
     */
    rename(resourceGroupName: string, workspaceName: string, sqlPoolName: string, parameters: ResourceMoveDefinition, options?: SqlPoolsRenameOptionalParams): Promise<void>;
}

/** A Sql pool schema resource. */
export declare type SqlPoolSchema = ProxyResource & {};

/** A list of Sql pool schemas. */
export declare interface SqlPoolSchemaListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlPoolSchema[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a SqlPoolSchemas. */
export declare interface SqlPoolSchemas {
    /**
     * Gets schemas of a given SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolSchemasListOptionalParams): PagedAsyncIterableIterator<SqlPoolSchema>;
    /**
     * Get Sql Pool schema
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, options?: SqlPoolSchemasGetOptionalParams): Promise<SqlPoolSchemasGetResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolSchemasGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolSchemasGetResponse = SqlPoolSchema;

/** Optional parameters. */
export declare interface SqlPoolSchemasListNextOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolSchemasListNextResponse = SqlPoolSchemaListResult;

/** Optional parameters. */
export declare interface SqlPoolSchemasListOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
}

/** Contains response data for the list operation. */
export declare type SqlPoolSchemasListResponse = SqlPoolSchemaListResult;

/** Optional parameters. */
export declare interface SqlPoolsCreateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the create operation. */
export declare type SqlPoolsCreateResponse = SqlPool;

/** Optional parameters. */
export declare interface SqlPoolsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type SqlPoolsDeleteResponse = Record<string, unknown>;

/** Interface representing a SqlPoolSecurityAlertPolicies. */
export declare interface SqlPoolSecurityAlertPolicies {
    /**
     * Get a list of Sql pool's security alert policies.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolSecurityAlertPoliciesListOptionalParams): PagedAsyncIterableIterator<SqlPoolSecurityAlertPolicy>;
    /**
     * Get a Sql pool's security alert policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, securityAlertPolicyName: SecurityAlertPolicyName, options?: SqlPoolSecurityAlertPoliciesGetOptionalParams): Promise<SqlPoolSecurityAlertPoliciesGetResponse>;
    /**
     * Create or update a Sql pool's security alert policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param parameters The Sql pool security alert policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, securityAlertPolicyName: SecurityAlertPolicyName, parameters: SqlPoolSecurityAlertPolicy, options?: SqlPoolSecurityAlertPoliciesCreateOrUpdateOptionalParams): Promise<SqlPoolSecurityAlertPoliciesCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolSecurityAlertPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SqlPoolSecurityAlertPoliciesCreateOrUpdateResponse = SqlPoolSecurityAlertPolicy;

/** Optional parameters. */
export declare interface SqlPoolSecurityAlertPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolSecurityAlertPoliciesGetResponse = SqlPoolSecurityAlertPolicy;

/** Optional parameters. */
export declare interface SqlPoolSecurityAlertPoliciesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolSecurityAlertPoliciesListNextResponse = ListSqlPoolSecurityAlertPolicies;

/** Optional parameters. */
export declare interface SqlPoolSecurityAlertPoliciesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolSecurityAlertPoliciesListResponse = ListSqlPoolSecurityAlertPolicies;

/** A Sql pool security alert policy. */
export declare type SqlPoolSecurityAlertPolicy = ProxyResource & {
    /** Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific Sql pool. */
    state?: SecurityAlertPolicyState;
    /** Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action */
    disabledAlerts?: string[];
    /** Specifies an array of e-mail addresses to which the alert is sent. */
    emailAddresses?: string[];
    /** Specifies that the alert is sent to the account administrators. */
    emailAccountAdmins?: boolean;
    /** Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs. */
    storageEndpoint?: string;
    /** Specifies the identifier key of the Threat Detection audit storage account. */
    storageAccountAccessKey?: string;
    /** Specifies the number of days to keep in the Threat Detection audit logs. */
    retentionDays?: number;
    /**
     * Specifies the UTC creation time of the policy.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly creationTime?: Date;
};

/** Interface representing a SqlPoolSensitivityLabels. */
export declare interface SqlPoolSensitivityLabels {
    /**
     * Gets SQL pool sensitivity labels.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    listCurrent(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolSensitivityLabelsListCurrentOptionalParams): PagedAsyncIterableIterator<SensitivityLabel>;
    /**
     * Gets sensitivity labels of a given SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    listRecommended(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolSensitivityLabelsListRecommendedOptionalParams): PagedAsyncIterableIterator<SensitivityLabel>;
    /**
     * Update sensitivity labels of a given SQL Pool using an operations batch.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param parameters A list of sensitivity label update operations.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, sqlPoolName: string, parameters: SensitivityLabelUpdateList, options?: SqlPoolSensitivityLabelsUpdateOptionalParams): Promise<void>;
    /**
     * Creates or updates the sensitivity label of a given column in a Sql pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param parameters The column sensitivity label resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, tableName: string, columnName: string, parameters: SensitivityLabel, options?: SqlPoolSensitivityLabelsCreateOrUpdateOptionalParams): Promise<SqlPoolSensitivityLabelsCreateOrUpdateResponse>;
    /**
     * Deletes the sensitivity label of a given column in a Sql pool
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, tableName: string, columnName: string, options?: SqlPoolSensitivityLabelsDeleteOptionalParams): Promise<void>;
    /**
     * Gets the sensitivity label of a given column
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param sensitivityLabelSource The source of the sensitivity label.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, tableName: string, columnName: string, sensitivityLabelSource: SensitivityLabelSource, options?: SqlPoolSensitivityLabelsGetOptionalParams): Promise<SqlPoolSensitivityLabelsGetResponse>;
    /**
     * Enables sensitivity recommendations on a given column (recommendations are enabled by default on all
     * columns)
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param options The options parameters.
     */
    enableRecommendation(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, tableName: string, columnName: string, options?: SqlPoolSensitivityLabelsEnableRecommendationOptionalParams): Promise<void>;
    /**
     * Disables sensitivity recommendations on a given column
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param columnName The name of the column.
     * @param options The options parameters.
     */
    disableRecommendation(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, tableName: string, columnName: string, options?: SqlPoolSensitivityLabelsDisableRecommendationOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SqlPoolSensitivityLabelsCreateOrUpdateResponse = SensitivityLabel;

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsDisableRecommendationOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsEnableRecommendationOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolSensitivityLabelsGetResponse = SensitivityLabel;

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsListCurrentNextOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
}

/** Contains response data for the listCurrentNext operation. */
export declare type SqlPoolSensitivityLabelsListCurrentNextResponse = SensitivityLabelListResult;

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsListCurrentOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
}

/** Contains response data for the listCurrent operation. */
export declare type SqlPoolSensitivityLabelsListCurrentResponse = SensitivityLabelListResult;

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsListRecommendedNextOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
    /** Specifies whether to include disabled recommendations or not. */
    includeDisabledRecommendations?: boolean;
    /** An OData query option to indicate how many elements to skip in the collection. */
    skipToken?: string;
}

/** Contains response data for the listRecommendedNext operation. */
export declare type SqlPoolSensitivityLabelsListRecommendedNextResponse = SensitivityLabelListResult;

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsListRecommendedOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
    /** Specifies whether to include disabled recommendations or not. */
    includeDisabledRecommendations?: boolean;
    /** An OData query option to indicate how many elements to skip in the collection. */
    skipToken?: string;
}

/** Contains response data for the listRecommended operation. */
export declare type SqlPoolSensitivityLabelsListRecommendedResponse = SensitivityLabelListResult;

/** Optional parameters. */
export declare interface SqlPoolSensitivityLabelsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SqlPoolsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolsGetResponse = SqlPool;

/** Optional parameters. */
export declare interface SqlPoolsListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type SqlPoolsListByWorkspaceNextResponse = SqlPoolInfoListResult;

/** Optional parameters. */
export declare interface SqlPoolsListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type SqlPoolsListByWorkspaceResponse = SqlPoolInfoListResult;

/** Optional parameters. */
export declare interface SqlPoolsPauseOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the pause operation. */
export declare type SqlPoolsPauseResponse = Record<string, unknown>;

/** Optional parameters. */
export declare interface SqlPoolsRenameOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SqlPoolsResumeOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the resume operation. */
export declare type SqlPoolsResumeResponse = Record<string, unknown>;

/** Optional parameters. */
export declare interface SqlPoolsUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the update operation. */
export declare type SqlPoolsUpdateResponse = SqlPool;

/** A Sql pool table resource. */
export declare type SqlPoolTable = ProxyResource & {};

/** Interface representing a SqlPoolTableColumns. */
export declare interface SqlPoolTableColumns {
    /**
     * Gets columns in a given table in a SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    listByTableName(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, tableName: string, options?: SqlPoolTableColumnsListByTableNameOptionalParams): PagedAsyncIterableIterator<SqlPoolColumn>;
}

/** Optional parameters. */
export declare interface SqlPoolTableColumnsListByTableNameNextOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
}

/** Contains response data for the listByTableNameNext operation. */
export declare type SqlPoolTableColumnsListByTableNameNextResponse = SqlPoolColumnListResult;

/** Optional parameters. */
export declare interface SqlPoolTableColumnsListByTableNameOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
}

/** Contains response data for the listByTableName operation. */
export declare type SqlPoolTableColumnsListByTableNameResponse = SqlPoolColumnListResult;

/** A list of Sql pool tables. */
export declare interface SqlPoolTableListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlPoolTable[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a SqlPoolTables. */
export declare interface SqlPoolTables {
    /**
     * Gets tables of a given schema in a SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param options The options parameters.
     */
    listBySchema(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, options?: SqlPoolTablesListBySchemaOptionalParams): PagedAsyncIterableIterator<SqlPoolTable>;
    /**
     * Get Sql pool table
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param schemaName The name of the schema.
     * @param tableName The name of the table.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, schemaName: string, tableName: string, options?: SqlPoolTablesGetOptionalParams): Promise<SqlPoolTablesGetResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolTablesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolTablesGetResponse = SqlPoolTable;

/** Optional parameters. */
export declare interface SqlPoolTablesListBySchemaNextOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
}

/** Contains response data for the listBySchemaNext operation. */
export declare type SqlPoolTablesListBySchemaNextResponse = SqlPoolTableListResult;

/** Optional parameters. */
export declare interface SqlPoolTablesListBySchemaOptionalParams extends coreClient.OperationOptions {
    /** An OData filter expression that filters elements in the collection. */
    filter?: string;
}

/** Contains response data for the listBySchema operation. */
export declare type SqlPoolTablesListBySchemaResponse = SqlPoolTableListResult;

/** Interface representing a SqlPoolTransparentDataEncryptions. */
export declare interface SqlPoolTransparentDataEncryptions {
    /**
     * Get list of SQL pool's transparent data encryption configurations.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolTransparentDataEncryptionsListOptionalParams): PagedAsyncIterableIterator<TransparentDataEncryption>;
    /**
     * Get a SQL pool's transparent data encryption configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param transparentDataEncryptionName The name of the transparent data encryption configuration.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, transparentDataEncryptionName: TransparentDataEncryptionName, options?: SqlPoolTransparentDataEncryptionsGetOptionalParams): Promise<SqlPoolTransparentDataEncryptionsGetResponse>;
    /**
     * Creates or updates a Sql pool's transparent data encryption configuration.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param transparentDataEncryptionName The name of the transparent data encryption configuration.
     * @param parameters The required parameters for creating or updating transparent data encryption.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, transparentDataEncryptionName: TransparentDataEncryptionName, parameters: TransparentDataEncryption, options?: SqlPoolTransparentDataEncryptionsCreateOrUpdateOptionalParams): Promise<SqlPoolTransparentDataEncryptionsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolTransparentDataEncryptionsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SqlPoolTransparentDataEncryptionsCreateOrUpdateResponse = TransparentDataEncryption;

/** Optional parameters. */
export declare interface SqlPoolTransparentDataEncryptionsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolTransparentDataEncryptionsGetResponse = TransparentDataEncryption;

/** Optional parameters. */
export declare interface SqlPoolTransparentDataEncryptionsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolTransparentDataEncryptionsListNextResponse = TransparentDataEncryptionListResult;

/** Optional parameters. */
export declare interface SqlPoolTransparentDataEncryptionsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolTransparentDataEncryptionsListResponse = TransparentDataEncryptionListResult;

/** The Sql pool usages. */
export declare interface SqlPoolUsage {
    /**
     * The name of the usage metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly name?: string;
    /**
     * The name of the resource.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly resourceName?: string;
    /**
     * The usage metric display name.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly displayName?: string;
    /**
     * The current value of the usage metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly currentValue?: number;
    /**
     * The current limit of the usage metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly limit?: number;
    /**
     * The units of the usage metric.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly unit?: string;
    /**
     * The next reset time for the usage metric (ISO8601 format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextResetTime?: Date;
}

/** The response to a list Sql pool usages request. */
export declare interface SqlPoolUsageListResult {
    /** The list of usages for the Sql pool. */
    value: SqlPoolUsage[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Interface representing a SqlPoolUsages. */
export declare interface SqlPoolUsages {
    /**
     * Gets SQL pool usages.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolUsagesListOptionalParams): PagedAsyncIterableIterator<SqlPoolUsage>;
}

/** Optional parameters. */
export declare interface SqlPoolUsagesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolUsagesListNextResponse = SqlPoolUsageListResult;

/** Optional parameters. */
export declare interface SqlPoolUsagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolUsagesListResponse = SqlPoolUsageListResult;

/** A Sql pool vulnerability assessment. */
export declare type SqlPoolVulnerabilityAssessment = ProxyResource & {
    /** A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set */
    storageContainerPath?: string;
    /** A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required. */
    storageContainerSasKey?: string;
    /** Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required. */
    storageAccountAccessKey?: string;
    /** The recurring scans settings */
    recurringScans?: VulnerabilityAssessmentRecurringScansProperties;
};

/** A list of the Sql pool's vulnerability assessments. */
export declare interface SqlPoolVulnerabilityAssessmentListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: SqlPoolVulnerabilityAssessment[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** A Sql pool vulnerability assessment rule baseline. */
export declare type SqlPoolVulnerabilityAssessmentRuleBaseline = ProxyResource & {
    /** The rule baseline result */
    baselineResults?: SqlPoolVulnerabilityAssessmentRuleBaselineItem[];
};

/** Properties for an Sql pool vulnerability assessment rule baseline's result. */
export declare interface SqlPoolVulnerabilityAssessmentRuleBaselineItem {
    /** The rule baseline result */
    result: string[];
}

/** Interface representing a SqlPoolVulnerabilityAssessmentRuleBaselines. */
export declare interface SqlPoolVulnerabilityAssessmentRuleBaselines {
    /**
     * Creates or updates a Sql pool's vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a
     *                     baseline on a Sql pool level rule and master for workspace level rule).
     * @param parameters The requested rule baseline resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, ruleId: string, baselineName: VulnerabilityAssessmentPolicyBaselineName, parameters: SqlPoolVulnerabilityAssessmentRuleBaseline, options?: SqlPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateOptionalParams): Promise<SqlPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResponse>;
    /**
     * Removes the database's vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a
     *                     baseline on a Sql pool level rule and master for workspace level rule).
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, ruleId: string, baselineName: VulnerabilityAssessmentPolicyBaselineName, options?: SqlPoolVulnerabilityAssessmentRuleBaselinesDeleteOptionalParams): Promise<void>;
    /**
     * Gets a SqlPool's vulnerability assessment rule baseline.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param ruleId The vulnerability assessment rule ID.
     * @param baselineName The name of the vulnerability assessment rule baseline (default implies a
     *                     baseline on a Sql pool level rule and master for server level rule).
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, ruleId: string, baselineName: VulnerabilityAssessmentPolicyBaselineName, options?: SqlPoolVulnerabilityAssessmentRuleBaselinesGetOptionalParams): Promise<SqlPoolVulnerabilityAssessmentRuleBaselinesGetResponse>;
}

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SqlPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResponse = SqlPoolVulnerabilityAssessmentRuleBaseline;

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentRuleBaselinesDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentRuleBaselinesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolVulnerabilityAssessmentRuleBaselinesGetResponse = SqlPoolVulnerabilityAssessmentRuleBaseline;

/** Interface representing a SqlPoolVulnerabilityAssessments. */
export declare interface SqlPoolVulnerabilityAssessments {
    /**
     * Lists the vulnerability assessment policies associated with a SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolVulnerabilityAssessmentsListOptionalParams): PagedAsyncIterableIterator<SqlPoolVulnerabilityAssessment>;
    /**
     * Gets the Sql pool's vulnerability assessment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, options?: SqlPoolVulnerabilityAssessmentsGetOptionalParams): Promise<SqlPoolVulnerabilityAssessmentsGetResponse>;
    /**
     * Creates or updates the Sql pool vulnerability assessment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param parameters The requested resource.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, parameters: SqlPoolVulnerabilityAssessment, options?: SqlPoolVulnerabilityAssessmentsCreateOrUpdateOptionalParams): Promise<SqlPoolVulnerabilityAssessmentsCreateOrUpdateResponse>;
    /**
     * Removes the database's vulnerability assessment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, options?: SqlPoolVulnerabilityAssessmentsDeleteOptionalParams): Promise<void>;
}

/** Interface representing a SqlPoolVulnerabilityAssessmentScans. */
export declare interface SqlPoolVulnerabilityAssessmentScans {
    /**
     * Lists the vulnerability assessment scans of a SQL pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, options?: SqlPoolVulnerabilityAssessmentScansListOptionalParams): PagedAsyncIterableIterator<VulnerabilityAssessmentScanRecord>;
    /**
     * Executes a Vulnerability Assessment database scan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param options The options parameters.
     */
    beginInitiateScan(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, scanId: string, options?: SqlPoolVulnerabilityAssessmentScansInitiateScanOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Executes a Vulnerability Assessment database scan.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param options The options parameters.
     */
    beginInitiateScanAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, scanId: string, options?: SqlPoolVulnerabilityAssessmentScansInitiateScanOptionalParams): Promise<void>;
    /**
     * Convert an existing scan result to a human readable format. If already exists nothing happens
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param options The options parameters.
     */
    export(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, scanId: string, options?: SqlPoolVulnerabilityAssessmentScansExportOptionalParams): Promise<SqlPoolVulnerabilityAssessmentScansExportResponse>;
    /**
     * Gets a vulnerability assessment scan record of a Sql pool.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, scanId: string, options?: SqlPoolVulnerabilityAssessmentScansGetOptionalParams): Promise<SqlPoolVulnerabilityAssessmentScansGetResponse>;
}

/** A Sql pool Vulnerability Assessment scan export resource. */
export declare type SqlPoolVulnerabilityAssessmentScansExport = ProxyResource & {
    /**
     * Location of the exported report (e.g. https://myStorage.blob.core.windows.net/VaScans/scans/serverName/databaseName/scan_scanId.xlsx).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly exportedReportLocation?: string;
};

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentScansExportOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the export operation. */
export declare type SqlPoolVulnerabilityAssessmentScansExportResponse = SqlPoolVulnerabilityAssessmentScansExport;

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentScansGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolVulnerabilityAssessmentScansGetResponse = VulnerabilityAssessmentScanRecord;

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentScansInitiateScanOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentScansListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolVulnerabilityAssessmentScansListNextResponse = VulnerabilityAssessmentScanRecordListResult;

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentScansListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolVulnerabilityAssessmentScansListResponse = VulnerabilityAssessmentScanRecordListResult;

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type SqlPoolVulnerabilityAssessmentsCreateOrUpdateResponse = SqlPoolVulnerabilityAssessment;

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolVulnerabilityAssessmentsGetResponse = SqlPoolVulnerabilityAssessment;

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolVulnerabilityAssessmentsListNextResponse = SqlPoolVulnerabilityAssessmentListResult;

/** Optional parameters. */
export declare interface SqlPoolVulnerabilityAssessmentsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolVulnerabilityAssessmentsListResponse = SqlPoolVulnerabilityAssessmentListResult;

/** Interface representing a SqlPoolWorkloadClassifier. */
export declare interface SqlPoolWorkloadClassifier {
    /**
     * Get list of  Sql pool's workload classifier for workload groups.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, options?: SqlPoolWorkloadClassifierListOptionalParams): PagedAsyncIterableIterator<WorkloadClassifier>;
    /**
     * Get a workload classifier of Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, workloadClassifierName: string, options?: SqlPoolWorkloadClassifierGetOptionalParams): Promise<SqlPoolWorkloadClassifierGetResponse>;
    /**
     * Create Or Update workload classifier for a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, workloadClassifierName: string, parameters: WorkloadClassifier, options?: SqlPoolWorkloadClassifierCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SqlPoolWorkloadClassifierCreateOrUpdateResponse>, SqlPoolWorkloadClassifierCreateOrUpdateResponse>>;
    /**
     * Create Or Update workload classifier for a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param parameters The properties of the workload classifier.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, workloadClassifierName: string, parameters: WorkloadClassifier, options?: SqlPoolWorkloadClassifierCreateOrUpdateOptionalParams): Promise<SqlPoolWorkloadClassifierCreateOrUpdateResponse>;
    /**
     * Remove workload classifier of a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, workloadClassifierName: string, options?: SqlPoolWorkloadClassifierDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Remove workload classifier of a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param workloadClassifierName The name of the workload classifier.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, workloadClassifierName: string, options?: SqlPoolWorkloadClassifierDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SqlPoolWorkloadClassifierCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SqlPoolWorkloadClassifierCreateOrUpdateResponse = WorkloadClassifier;

/** Optional parameters. */
export declare interface SqlPoolWorkloadClassifierDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SqlPoolWorkloadClassifierGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolWorkloadClassifierGetResponse = WorkloadClassifier;

/** Optional parameters. */
export declare interface SqlPoolWorkloadClassifierListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolWorkloadClassifierListNextResponse = WorkloadClassifierListResult;

/** Optional parameters. */
export declare interface SqlPoolWorkloadClassifierListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolWorkloadClassifierListResponse = WorkloadClassifierListResult;

/** Interface representing a SqlPoolWorkloadGroup. */
export declare interface SqlPoolWorkloadGroup {
    /**
     * Get list of  Sql pool's workload groups.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolWorkloadGroupListOptionalParams): PagedAsyncIterableIterator<WorkloadGroup>;
    /**
     * Get a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, options?: SqlPoolWorkloadGroupGetOptionalParams): Promise<SqlPoolWorkloadGroupGetResponse>;
    /**
     * Create Or Update a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param parameters The requested workload group state.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, parameters: WorkloadGroup, options?: SqlPoolWorkloadGroupCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SqlPoolWorkloadGroupCreateOrUpdateResponse>, SqlPoolWorkloadGroupCreateOrUpdateResponse>>;
    /**
     * Create Or Update a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param parameters The requested workload group state.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, parameters: WorkloadGroup, options?: SqlPoolWorkloadGroupCreateOrUpdateOptionalParams): Promise<SqlPoolWorkloadGroupCreateOrUpdateResponse>;
    /**
     * Remove Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, options?: SqlPoolWorkloadGroupDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Remove Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, options?: SqlPoolWorkloadGroupDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface SqlPoolWorkloadGroupCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type SqlPoolWorkloadGroupCreateOrUpdateResponse = WorkloadGroup;

/** Optional parameters. */
export declare interface SqlPoolWorkloadGroupDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface SqlPoolWorkloadGroupGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type SqlPoolWorkloadGroupGetResponse = WorkloadGroup;

/** Optional parameters. */
export declare interface SqlPoolWorkloadGroupListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type SqlPoolWorkloadGroupListNextResponse = WorkloadGroupListResult;

/** Optional parameters. */
export declare interface SqlPoolWorkloadGroupListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type SqlPoolWorkloadGroupListResponse = WorkloadGroupListResult;

/** Ssis environment. */
export declare type SsisEnvironment = SsisObjectMetadata & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Environment";
    /** Folder id which contains environment. */
    folderId?: number;
    /** Variable in environment */
    variables?: SsisVariable[];
};

/** Ssis environment reference. */
export declare interface SsisEnvironmentReference {
    /** Environment reference id. */
    id?: number;
    /** Environment folder name. */
    environmentFolderName?: string;
    /** Environment name. */
    environmentName?: string;
    /** Reference type */
    referenceType?: string;
}

/** Ssis folder. */
export declare type SsisFolder = SsisObjectMetadata & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Folder";
};

/** SSIS object metadata. */
export declare interface SsisObjectMetadata {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Folder" | "Project" | "Package" | "Environment";
    /** Metadata id. */
    id?: number;
    /** Metadata name. */
    name?: string;
    /** Metadata description. */
    description?: string;
}

/** A list of SSIS object metadata. */
export declare interface SsisObjectMetadataListResponse {
    /** List of SSIS object metadata. */
    value?: SsisObjectMetadataUnion[];
    /** The link to the next page of results, if any remaining results exist. */
    nextLink?: string;
}

/** The status of the operation. */
export declare interface SsisObjectMetadataStatusResponse {
    /** The status of the operation. */
    status?: string;
    /** The operation name. */
    name?: string;
    /** The operation properties. */
    properties?: string;
    /** The operation error message. */
    error?: string;
}

/**
 * Defines values for SsisObjectMetadataType. \
 * {@link KnownSsisObjectMetadataType} can be used interchangeably with SsisObjectMetadataType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Folder** \
 * **Project** \
 * **Package** \
 * **Environment**
 */
export declare type SsisObjectMetadataType = string;

export declare type SsisObjectMetadataUnion = SsisObjectMetadata | SsisFolder | SsisProject | SsisPackage | SsisEnvironment;

/** Ssis Package. */
export declare type SsisPackage = SsisObjectMetadata & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Package";
    /** Folder id which contains package. */
    folderId?: number;
    /** Project version which contains package. */
    projectVersion?: number;
    /** Project id which contains package. */
    projectId?: number;
    /** Parameters in package */
    parameters?: SsisParameter[];
};

/** Ssis parameter. */
export declare interface SsisParameter {
    /** Parameter id. */
    id?: number;
    /** Parameter name. */
    name?: string;
    /** Parameter description. */
    description?: string;
    /** Parameter type. */
    dataType?: string;
    /** Whether parameter is required. */
    required?: boolean;
    /** Whether parameter is sensitive. */
    sensitive?: boolean;
    /** Design default value of parameter. */
    designDefaultValue?: string;
    /** Default value of parameter. */
    defaultValue?: string;
    /** Default sensitive value of parameter. */
    sensitiveDefaultValue?: string;
    /** Parameter value type. */
    valueType?: string;
    /** Parameter value set. */
    valueSet?: boolean;
    /** Parameter reference variable. */
    variable?: string;
}

/** Ssis project. */
export declare type SsisProject = SsisObjectMetadata & {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    type: "Project";
    /** Folder id which contains project. */
    folderId?: number;
    /** Project version. */
    version?: number;
    /** Environment reference in project */
    environmentRefs?: SsisEnvironmentReference[];
    /** Parameters in project */
    parameters?: SsisParameter[];
};

/** Ssis variable. */
export declare interface SsisVariable {
    /** Variable id. */
    id?: number;
    /** Variable name. */
    name?: string;
    /** Variable description. */
    description?: string;
    /** Variable type. */
    dataType?: string;
    /** Whether variable is sensitive. */
    sensitive?: boolean;
    /** Variable value. */
    value?: string;
    /** Variable sensitive value. */
    sensitiveValue?: string;
}

/**
 * Defines values for State. \
 * {@link KnownState} can be used interchangeably with State,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Unavailable** \
 * **Running** \
 * **Deleting** \
 * **Deleted** \
 * **Stopping** \
 * **Stopped** \
 * **Starting** \
 * **Updating**
 */
export declare type State = string;

/**
 * Defines values for StateValue. \
 * {@link KnownStateValue} can be used interchangeably with StateValue,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Consistent** \
 * **InConsistent** \
 * **Updating**
 */
export declare type StateValue = string;

/**
 * Defines values for StorageAccountType. \
 * {@link KnownStorageAccountType} can be used interchangeably with StorageAccountType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **GRS** \
 * **LRS**
 */
export declare type StorageAccountType = string;

/** Azure Synapse nested resource, which belongs to a workspace. */
export declare type SubResource = AzureEntityResource & {};

export declare class SynapseManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    /**
     * Initializes a new instance of the SynapseManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId The ID of the target subscription.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: SynapseManagementClientOptionalParams);
    azureADOnlyAuthentications: AzureADOnlyAuthentications;
    operations: Operations;
    ipFirewallRules: IpFirewallRules;
    keys: Keys;
    privateEndpointConnections: PrivateEndpointConnections;
    privateLinkResources: PrivateLinkResources;
    privateLinkHubPrivateLinkResources: PrivateLinkHubPrivateLinkResources;
    privateLinkHubs: PrivateLinkHubs;
    privateEndpointConnectionsPrivateLinkHub: PrivateEndpointConnectionsPrivateLinkHub;
    sqlPools: SqlPools;
    sqlPoolMetadataSyncConfigs: SqlPoolMetadataSyncConfigs;
    sqlPoolOperationResults: SqlPoolOperationResults;
    sqlPoolGeoBackupPolicies: SqlPoolGeoBackupPolicies;
    sqlPoolDataWarehouseUserActivities: SqlPoolDataWarehouseUserActivities;
    sqlPoolRestorePoints: SqlPoolRestorePoints;
    sqlPoolReplicationLinks: SqlPoolReplicationLinks;
    sqlPoolMaintenanceWindows: SqlPoolMaintenanceWindows;
    sqlPoolMaintenanceWindowOptions: SqlPoolMaintenanceWindowOptions;
    sqlPoolTransparentDataEncryptions: SqlPoolTransparentDataEncryptions;
    sqlPoolBlobAuditingPolicies: SqlPoolBlobAuditingPolicies;
    sqlPoolOperations: SqlPoolOperations;
    sqlPoolUsages: SqlPoolUsages;
    sqlPoolSensitivityLabels: SqlPoolSensitivityLabels;
    sqlPoolRecommendedSensitivityLabels: SqlPoolRecommendedSensitivityLabels;
    sqlPoolSchemas: SqlPoolSchemas;
    sqlPoolTables: SqlPoolTables;
    sqlPoolTableColumns: SqlPoolTableColumns;
    sqlPoolConnectionPolicies: SqlPoolConnectionPolicies;
    sqlPoolVulnerabilityAssessments: SqlPoolVulnerabilityAssessments;
    sqlPoolVulnerabilityAssessmentScans: SqlPoolVulnerabilityAssessmentScans;
    sqlPoolSecurityAlertPolicies: SqlPoolSecurityAlertPolicies;
    sqlPoolVulnerabilityAssessmentRuleBaselines: SqlPoolVulnerabilityAssessmentRuleBaselines;
    extendedSqlPoolBlobAuditingPolicies: ExtendedSqlPoolBlobAuditingPolicies;
    dataMaskingPolicies: DataMaskingPolicies;
    dataMaskingRules: DataMaskingRules;
    sqlPoolColumns: SqlPoolColumns;
    sqlPoolWorkloadGroup: SqlPoolWorkloadGroup;
    sqlPoolWorkloadClassifier: SqlPoolWorkloadClassifier;
    workspaceManagedSqlServerBlobAuditingPolicies: WorkspaceManagedSqlServerBlobAuditingPolicies;
    workspaceManagedSqlServerExtendedBlobAuditingPolicies: WorkspaceManagedSqlServerExtendedBlobAuditingPolicies;
    workspaceManagedSqlServerSecurityAlertPolicy: WorkspaceManagedSqlServerSecurityAlertPolicy;
    workspaceManagedSqlServerVulnerabilityAssessments: WorkspaceManagedSqlServerVulnerabilityAssessments;
    workspaceManagedSqlServerEncryptionProtector: WorkspaceManagedSqlServerEncryptionProtector;
    workspaceManagedSqlServerUsages: WorkspaceManagedSqlServerUsages;
    workspaceManagedSqlServerRecoverableSqlPools: WorkspaceManagedSqlServerRecoverableSqlPools;
    workspaces: Workspaces;
    workspaceAadAdmins: WorkspaceAadAdmins;
    workspaceSqlAadAdmins: WorkspaceSqlAadAdmins;
    workspaceManagedIdentitySqlControlSettings: WorkspaceManagedIdentitySqlControlSettings;
    restorableDroppedSqlPools: RestorableDroppedSqlPools;
    bigDataPools: BigDataPools;
    library: Library;
    libraries: Libraries;
    integrationRuntimes: IntegrationRuntimes;
    integrationRuntimeNodeIpAddressOperations: IntegrationRuntimeNodeIpAddressOperations;
    integrationRuntimeObjectMetadata: IntegrationRuntimeObjectMetadata;
    integrationRuntimeNodes: IntegrationRuntimeNodes;
    integrationRuntimeCredentials: IntegrationRuntimeCredentials;
    integrationRuntimeConnectionInfos: IntegrationRuntimeConnectionInfos;
    integrationRuntimeAuthKeysOperations: IntegrationRuntimeAuthKeysOperations;
    integrationRuntimeMonitoringDataOperations: IntegrationRuntimeMonitoringDataOperations;
    integrationRuntimeStatusOperations: IntegrationRuntimeStatusOperations;
    sparkConfiguration: SparkConfiguration;
    sparkConfigurations: SparkConfigurations;
    kustoOperations: KustoOperations;
    kustoPools: KustoPools;
    kustoPoolChildResource: KustoPoolChildResource;
    kustoPoolAttachedDatabaseConfigurations: KustoPoolAttachedDatabaseConfigurations;
    kustoPoolDatabases: KustoPoolDatabases;
    kustoPoolDataConnections: KustoPoolDataConnections;
    kustoPoolPrincipalAssignments: KustoPoolPrincipalAssignments;
    kustoPoolDatabasePrincipalAssignments: KustoPoolDatabasePrincipalAssignments;
}

/** Optional parameters. */
export declare interface SynapseManagementClientOptionalParams extends coreClient.ServiceClientOptions {
    /** server parameter */
    $host?: string;
    /** Overrides client endpoint. */
    endpoint?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export declare interface SystemData {
    /** The identity that created the resource. */
    createdBy?: string;
    /** The type of identity that created the resource. */
    createdByType?: CreatedByType;
    /** The timestamp of resource creation (UTC). */
    createdAt?: Date;
    /** The identity that last modified the resource. */
    lastModifiedBy?: string;
    /** The type of identity that last modified the resource. */
    lastModifiedByType?: CreatedByType;
    /** The timestamp of resource last modification (UTC) */
    lastModifiedAt?: Date;
}

/** Tables that will be included and excluded in the follower database */
export declare interface TableLevelSharingProperties {
    /** List of tables to include in the follower database */
    tablesToInclude?: string[];
    /** List of tables to exclude from the follower database */
    tablesToExclude?: string[];
    /** List of external tables to include in the follower database */
    externalTablesToInclude?: string[];
    /** List of external tables exclude from the follower database */
    externalTablesToExclude?: string[];
    /** List of materialized views to include in the follower database */
    materializedViewsToInclude?: string[];
    /** List of materialized views exclude from the follower database */
    materializedViewsToExclude?: string[];
}

/** A database query. */
export declare interface TopQueries {
    /**
     * The function that is used to aggregate each query's metrics.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly aggregationFunction?: QueryAggregationFunction;
    /**
     * The execution type that is used to filter the query instances that are returned.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly executionType?: QueryExecutionType;
    /**
     * The duration of the interval (ISO8601 duration format).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly intervalType?: string;
    /**
     * The number of requested queries.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfTopQueries?: number;
    /**
     * The start time for queries that are returned (ISO8601 format)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly observationStartTime?: Date;
    /**
     * The end time for queries that are returned (ISO8601 format)
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly observationEndTime?: Date;
    /**
     * The type of metric to use for ordering the top metrics.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly observedMetric?: QueryObservedMetricType;
    /**
     * The list of queries.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly queries?: QueryStatistic[];
}

/** Represents the response to a get top queries request. */
export declare interface TopQueriesListResult {
    /** The list of top queries. */
    value: TopQueries[];
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export declare type TrackedResource = Resource & {
    /** Resource tags. */
    tags?: {
        [propertyName: string]: string;
    };
    /** The geo-location where the resource lives */
    location: string;
};

/** Represents a Sql pool transparent data encryption configuration. */
export declare type TransparentDataEncryption = ProxyResource & {
    /**
     * Resource location.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly location?: string;
    /** The status of the database transparent data encryption. */
    status?: TransparentDataEncryptionStatus;
};

/** A list of transparent data encryption configurations. */
export declare interface TransparentDataEncryptionListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: TransparentDataEncryption[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for TransparentDataEncryptionName. \
 * {@link KnownTransparentDataEncryptionName} can be used interchangeably with TransparentDataEncryptionName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **current**
 */
export declare type TransparentDataEncryptionName = string;

/** Defines values for TransparentDataEncryptionStatus. */
export declare type TransparentDataEncryptionStatus = "Enabled" | "Disabled";

/** Defines values for Type. */
export declare type Type = "Microsoft.Synapse/workspaces/kustoPools/databases" | "Microsoft.Synapse/workspaces/kustoPools/attachedDatabaseConfigurations";

/** Update integration runtime node request. */
export declare interface UpdateIntegrationRuntimeNodeRequest {
    /** The number of concurrent jobs permitted to run on the integration runtime node. Values between 1 and maxConcurrentJobs(inclusive) are allowed. */
    concurrentJobsLimit?: number;
}

/** Update integration runtime request. */
export declare interface UpdateIntegrationRuntimeRequest {
    /** Enables or disables the auto-update feature of the self-hosted integration runtime. See https://go.microsoft.com/fwlink/?linkid=854189. */
    autoUpdate?: IntegrationRuntimeAutoUpdate;
    /** The time offset (in hours) in the day, e.g., PT03H is 3 hours. The integration runtime auto update will happen on that time. */
    updateDelayOffset?: string;
}

/** User Assigned Managed Identity */
export declare interface UserAssignedManagedIdentity {
    /**
     * The client ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly clientId?: string;
    /**
     * The principal ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly principalId?: string;
}

/** Virtual Network Profile */
export declare interface VirtualNetworkProfile {
    /** Subnet ID used for computes in workspace */
    computeSubnetId?: string;
}

/**
 * Defines values for VulnerabilityAssessmentName. \
 * {@link KnownVulnerabilityAssessmentName} can be used interchangeably with VulnerabilityAssessmentName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **default**
 */
export declare type VulnerabilityAssessmentName = string;

/** Defines values for VulnerabilityAssessmentPolicyBaselineName. */
export declare type VulnerabilityAssessmentPolicyBaselineName = "master" | "default";

/** Properties of a Vulnerability Assessment recurring scans. */
export declare interface VulnerabilityAssessmentRecurringScansProperties {
    /** Recurring scans state. */
    isEnabled?: boolean;
    /** Specifies that the schedule scan notification will be is sent to the subscription administrators. */
    emailSubscriptionAdmins?: boolean;
    /** Specifies an array of e-mail addresses to which the scan notification is sent. */
    emails?: string[];
}

/** Properties of a vulnerability assessment scan error. */
export declare interface VulnerabilityAssessmentScanError {
    /**
     * The error code.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly code?: string;
    /**
     * The error message.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly message?: string;
}

/** A vulnerability assessment scan record. */
export declare type VulnerabilityAssessmentScanRecord = ProxyResource & {
    /**
     * The scan ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly scanId?: string;
    /**
     * The scan trigger type.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly triggerType?: VulnerabilityAssessmentScanTriggerType;
    /**
     * The scan status.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly state?: VulnerabilityAssessmentScanState;
    /**
     * The scan start time (UTC).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly startTime?: Date;
    /**
     * The scan end time (UTC).
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly endTime?: Date;
    /**
     * The scan errors.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly errors?: VulnerabilityAssessmentScanError[];
    /**
     * The scan results storage container path.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly storageContainerPath?: string;
    /**
     * The number of failed security checks.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly numberOfFailedSecurityChecks?: number;
};

/** A list of vulnerability assessment scan records. */
export declare interface VulnerabilityAssessmentScanRecordListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: VulnerabilityAssessmentScanRecord[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/**
 * Defines values for VulnerabilityAssessmentScanState. \
 * {@link KnownVulnerabilityAssessmentScanState} can be used interchangeably with VulnerabilityAssessmentScanState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Passed** \
 * **Failed** \
 * **FailedToRun** \
 * **InProgress**
 */
export declare type VulnerabilityAssessmentScanState = string;

/**
 * Defines values for VulnerabilityAssessmentScanTriggerType. \
 * {@link KnownVulnerabilityAssessmentScanTriggerType} can be used interchangeably with VulnerabilityAssessmentScanTriggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OnDemand** \
 * **Recurring**
 */
export declare type VulnerabilityAssessmentScanTriggerType = string;

/** Workload classifier operations for a data warehouse */
export declare type WorkloadClassifier = ProxyResource & {
    /** The workload classifier member name. */
    memberName?: string;
    /** The workload classifier label. */
    label?: string;
    /** The workload classifier context. */
    context?: string;
    /** The workload classifier start time for classification. */
    startTime?: string;
    /** The workload classifier end time for classification. */
    endTime?: string;
    /** The workload classifier importance. */
    importance?: string;
};

/** A list of workload classifiers for a workload group. */
export declare interface WorkloadClassifierListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadClassifier[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** Workload group operations for a sql pool */
export declare type WorkloadGroup = ProxyResource & {
    /** The workload group minimum percentage resource. */
    minResourcePercent?: number;
    /** The workload group cap percentage resource. */
    maxResourcePercent?: number;
    /** The workload group request minimum grant percentage. */
    minResourcePercentPerRequest?: number;
    /** The workload group request maximum grant percentage. */
    maxResourcePercentPerRequest?: number;
    /** The workload group importance level. */
    importance?: string;
    /** The workload group query execution timeout. */
    queryExecutionTimeout?: number;
};

/** A list of workload groups. */
export declare interface WorkloadGroupListResult {
    /**
     * Array of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly value?: WorkloadGroup[];
    /**
     * Link to retrieve next page of results.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly nextLink?: string;
}

/** A workspace */
export declare type Workspace = TrackedResource & {
    /** Identity of the workspace */
    identity?: ManagedIdentity;
    /** Workspace default data lake storage account details */
    defaultDataLakeStorage?: DataLakeStorageAccountDetails;
    /** SQL administrator login password */
    sqlAdministratorLoginPassword?: string;
    /** Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId. The resource group name must be no longer than 90 characters long, and must be alphanumeric characters (Char.IsLetterOrDigit()) and '-', '_', '(', ')' and'.'. Note that the name cannot end with '.' */
    managedResourceGroupName?: string;
    /**
     * Resource provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** Login for workspace SQL active directory administrator */
    sqlAdministratorLogin?: string;
    /** Virtual Network profile */
    virtualNetworkProfile?: VirtualNetworkProfile;
    /** Connectivity endpoints */
    connectivityEndpoints?: {
        [propertyName: string]: string;
    };
    /** Setting this to 'default' will ensure that all compute for this workspace is in a virtual network managed on behalf of the user. */
    managedVirtualNetwork?: string;
    /** Private endpoint connections to the workspace */
    privateEndpointConnections?: PrivateEndpointConnection[];
    /** The encryption details of the workspace */
    encryption?: EncryptionDetails;
    /**
     * The workspace unique identifier
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly workspaceUID?: string;
    /**
     * Workspace level configs and feature flags
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly extraProperties?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Managed Virtual Network Settings */
    managedVirtualNetworkSettings?: ManagedVirtualNetworkSettings;
    /** Git integration settings */
    workspaceRepositoryConfiguration?: WorkspaceRepositoryConfiguration;
    /** Purview Configuration */
    purviewConfiguration?: PurviewConfiguration;
    /**
     * The ADLA resource ID.
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly adlaResourceId?: string;
    /** Enable or Disable public network access to workspace */
    publicNetworkAccess?: WorkspacePublicNetworkAccess;
    /** Initial workspace AAD admin properties for a CSP subscription */
    cspWorkspaceAdminProperties?: CspWorkspaceAdminProperties;
    /**
     * Workspace settings
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly settings?: {
        [propertyName: string]: Record<string, unknown>;
    };
    /** Enable or Disable AzureADOnlyAuthentication on All Workspace subresource */
    azureADOnlyAuthentication?: boolean;
    /** Is trustedServiceBypassEnabled for the workspace */
    trustedServiceBypassEnabled?: boolean;
};

/** Workspace active directory administrator */
export declare type WorkspaceAadAdminInfo = ProxyResource & {
    /** Tenant ID of the workspace active directory administrator */
    tenantId?: string;
    /** Login of the workspace active directory administrator */
    login?: string;
    /** Workspace active directory administrator type */
    administratorType?: string;
    /** Object ID of the workspace active directory administrator */
    sid?: string;
};

/** Interface representing a WorkspaceAadAdmins. */
export declare interface WorkspaceAadAdmins {
    /**
     * Gets a workspace active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspaceAadAdminsGetOptionalParams): Promise<WorkspaceAadAdminsGetResponse>;
    /**
     * Creates or updates a workspace active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param aadAdminInfo Workspace active directory administrator properties
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, aadAdminInfo: WorkspaceAadAdminInfo, options?: WorkspaceAadAdminsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspaceAadAdminsCreateOrUpdateResponse>, WorkspaceAadAdminsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a workspace active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param aadAdminInfo Workspace active directory administrator properties
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, aadAdminInfo: WorkspaceAadAdminInfo, options?: WorkspaceAadAdminsCreateOrUpdateOptionalParams): Promise<WorkspaceAadAdminsCreateOrUpdateResponse>;
    /**
     * Deletes a workspace active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, options?: WorkspaceAadAdminsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a workspace active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspaceAadAdminsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkspaceAadAdminsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspaceAadAdminsCreateOrUpdateResponse = WorkspaceAadAdminInfo;

/** Optional parameters. */
export declare interface WorkspaceAadAdminsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkspaceAadAdminsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceAadAdminsGetResponse = WorkspaceAadAdminInfo;

/** List of workspaces */
export declare interface WorkspaceInfoListResult {
    /** Link to the next page of results */
    nextLink?: string;
    /** List of workspaces */
    value?: Workspace[];
}

/** Details of the customer managed key associated with the workspace */
export declare interface WorkspaceKeyDetails {
    /** Workspace Key sub-resource name */
    name?: string;
    /** Workspace Key sub-resource key vault url */
    keyVaultUrl?: string;
}

/** Interface representing a WorkspaceManagedIdentitySqlControlSettings. */
export declare interface WorkspaceManagedIdentitySqlControlSettings {
    /**
     * Get Managed Identity Sql Control Settings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspaceManagedIdentitySqlControlSettingsGetOptionalParams): Promise<WorkspaceManagedIdentitySqlControlSettingsGetResponse>;
    /**
     * Create or update Managed Identity Sql Control Settings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param managedIdentitySqlControlSettings Managed Identity Sql Control Settings
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, managedIdentitySqlControlSettings: ManagedIdentitySqlControlSettingsModel, options?: WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateResponse>, WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateResponse>>;
    /**
     * Create or update Managed Identity Sql Control Settings
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param managedIdentitySqlControlSettings Managed Identity Sql Control Settings
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, managedIdentitySqlControlSettings: ManagedIdentitySqlControlSettingsModel, options?: WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateOptionalParams): Promise<WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateResponse = ManagedIdentitySqlControlSettingsModel;

/** Optional parameters. */
export declare interface WorkspaceManagedIdentitySqlControlSettingsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceManagedIdentitySqlControlSettingsGetResponse = ManagedIdentitySqlControlSettingsModel;

/** Interface representing a WorkspaceManagedSqlServerBlobAuditingPolicies. */
export declare interface WorkspaceManagedSqlServerBlobAuditingPolicies {
    /**
     * List workspace managed sql server's blob auditing policies.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: WorkspaceManagedSqlServerBlobAuditingPoliciesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<ServerBlobAuditingPolicy>;
    /**
     * Get a workspace managed sql server's blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param blobAuditingPolicyName The name of the blob auditing policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, blobAuditingPolicyName: BlobAuditingPolicyName, options?: WorkspaceManagedSqlServerBlobAuditingPoliciesGetOptionalParams): Promise<WorkspaceManagedSqlServerBlobAuditingPoliciesGetResponse>;
    /**
     * Create or Update a workspace managed sql server's blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param blobAuditingPolicyName The name of the blob auditing policy.
     * @param parameters Properties of extended blob auditing policy.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, blobAuditingPolicyName: BlobAuditingPolicyName, parameters: ServerBlobAuditingPolicy, options?: WorkspaceManagedSqlServerBlobAuditingPoliciesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspaceManagedSqlServerBlobAuditingPoliciesCreateOrUpdateResponse>, WorkspaceManagedSqlServerBlobAuditingPoliciesCreateOrUpdateResponse>>;
    /**
     * Create or Update a workspace managed sql server's blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param blobAuditingPolicyName The name of the blob auditing policy.
     * @param parameters Properties of extended blob auditing policy.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, blobAuditingPolicyName: BlobAuditingPolicyName, parameters: ServerBlobAuditingPolicy, options?: WorkspaceManagedSqlServerBlobAuditingPoliciesCreateOrUpdateOptionalParams): Promise<WorkspaceManagedSqlServerBlobAuditingPoliciesCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerBlobAuditingPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspaceManagedSqlServerBlobAuditingPoliciesCreateOrUpdateResponse = ServerBlobAuditingPolicy;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerBlobAuditingPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceManagedSqlServerBlobAuditingPoliciesGetResponse = ServerBlobAuditingPolicy;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerBlobAuditingPoliciesListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type WorkspaceManagedSqlServerBlobAuditingPoliciesListByWorkspaceNextResponse = ServerBlobAuditingPolicyListResult;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerBlobAuditingPoliciesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type WorkspaceManagedSqlServerBlobAuditingPoliciesListByWorkspaceResponse = ServerBlobAuditingPolicyListResult;

/** Interface representing a WorkspaceManagedSqlServerEncryptionProtector. */
export declare interface WorkspaceManagedSqlServerEncryptionProtector {
    /**
     * Get list of encryption protectors for workspace managed sql server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: WorkspaceManagedSqlServerEncryptionProtectorListOptionalParams): PagedAsyncIterableIterator<EncryptionProtector>;
    /**
     * Get workspace managed sql server's encryption protector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param encryptionProtectorName The name of the encryption protector.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, encryptionProtectorName: EncryptionProtectorName, options?: WorkspaceManagedSqlServerEncryptionProtectorGetOptionalParams): Promise<WorkspaceManagedSqlServerEncryptionProtectorGetResponse>;
    /**
     * Updates workspace managed sql server's encryption protector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param encryptionProtectorName The name of the encryption protector.
     * @param parameters The requested encryption protector resource state.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, encryptionProtectorName: EncryptionProtectorName, parameters: EncryptionProtector, options?: WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateResponse>, WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateResponse>>;
    /**
     * Updates workspace managed sql server's encryption protector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param encryptionProtectorName The name of the encryption protector.
     * @param parameters The requested encryption protector resource state.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, encryptionProtectorName: EncryptionProtectorName, parameters: EncryptionProtector, options?: WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateOptionalParams): Promise<WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateResponse>;
    /**
     * Revalidates workspace managed sql server's existing encryption protector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param encryptionProtectorName The name of the encryption protector.
     * @param options The options parameters.
     */
    beginRevalidate(resourceGroupName: string, workspaceName: string, encryptionProtectorName: EncryptionProtectorName, options?: WorkspaceManagedSqlServerEncryptionProtectorRevalidateOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Revalidates workspace managed sql server's existing encryption protector.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param encryptionProtectorName The name of the encryption protector.
     * @param options The options parameters.
     */
    beginRevalidateAndWait(resourceGroupName: string, workspaceName: string, encryptionProtectorName: EncryptionProtectorName, options?: WorkspaceManagedSqlServerEncryptionProtectorRevalidateOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspaceManagedSqlServerEncryptionProtectorCreateOrUpdateResponse = EncryptionProtector;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerEncryptionProtectorGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceManagedSqlServerEncryptionProtectorGetResponse = EncryptionProtector;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerEncryptionProtectorListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkspaceManagedSqlServerEncryptionProtectorListNextResponse = EncryptionProtectorListResult;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerEncryptionProtectorListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkspaceManagedSqlServerEncryptionProtectorListResponse = EncryptionProtectorListResult;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerEncryptionProtectorRevalidateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Interface representing a WorkspaceManagedSqlServerExtendedBlobAuditingPolicies. */
export declare interface WorkspaceManagedSqlServerExtendedBlobAuditingPolicies {
    /**
     * List workspace managed sql server's extended blob auditing policies.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesListByWorkspaceOptionalParams): PagedAsyncIterableIterator<ExtendedServerBlobAuditingPolicy>;
    /**
     * Get a workspace SQL server's extended blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param blobAuditingPolicyName The name of the blob auditing policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, blobAuditingPolicyName: BlobAuditingPolicyName, options?: WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesGetOptionalParams): Promise<WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesGetResponse>;
    /**
     * Create or Update a workspace managed sql server's extended blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param blobAuditingPolicyName The name of the blob auditing policy.
     * @param parameters Properties of extended blob auditing policy.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, blobAuditingPolicyName: BlobAuditingPolicyName, parameters: ExtendedServerBlobAuditingPolicy, options?: WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesCreateOrUpdateResponse>, WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesCreateOrUpdateResponse>>;
    /**
     * Create or Update a workspace managed sql server's extended blob auditing policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param blobAuditingPolicyName The name of the blob auditing policy.
     * @param parameters Properties of extended blob auditing policy.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, blobAuditingPolicyName: BlobAuditingPolicyName, parameters: ExtendedServerBlobAuditingPolicy, options?: WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesCreateOrUpdateOptionalParams): Promise<WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesCreateOrUpdateResponse = ExtendedServerBlobAuditingPolicy;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesGetResponse = ExtendedServerBlobAuditingPolicy;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesListByWorkspaceNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspaceNext operation. */
export declare type WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesListByWorkspaceNextResponse = ExtendedServerBlobAuditingPolicyListResult;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesListByWorkspaceOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByWorkspace operation. */
export declare type WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesListByWorkspaceResponse = ExtendedServerBlobAuditingPolicyListResult;

/** Interface representing a WorkspaceManagedSqlServerRecoverableSqlPools. */
export declare interface WorkspaceManagedSqlServerRecoverableSqlPools {
    /**
     * Get list of recoverable sql pools for workspace managed sql server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: WorkspaceManagedSqlServerRecoverableSqlPoolsListOptionalParams): PagedAsyncIterableIterator<RecoverableSqlPool>;
    /**
     * Get recoverable sql pools for workspace managed sql server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName The name of the sql pool
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: WorkspaceManagedSqlServerRecoverableSqlPoolsGetOptionalParams): Promise<WorkspaceManagedSqlServerRecoverableSqlPoolsGetResponse>;
}

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerRecoverableSqlPoolsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceManagedSqlServerRecoverableSqlPoolsGetResponse = RecoverableSqlPool;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerRecoverableSqlPoolsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkspaceManagedSqlServerRecoverableSqlPoolsListNextResponse = RecoverableSqlPoolListResult;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerRecoverableSqlPoolsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkspaceManagedSqlServerRecoverableSqlPoolsListResponse = RecoverableSqlPoolListResult;

/** Interface representing a WorkspaceManagedSqlServerSecurityAlertPolicy. */
export declare interface WorkspaceManagedSqlServerSecurityAlertPolicy {
    /**
     * Get workspace managed sql server's threat detection policies.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: WorkspaceManagedSqlServerSecurityAlertPolicyListOptionalParams): PagedAsyncIterableIterator<ServerSecurityAlertPolicy>;
    /**
     * Get a workspace managed sql server's security alert policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, securityAlertPolicyName: SecurityAlertPolicyNameAutoGenerated, options?: WorkspaceManagedSqlServerSecurityAlertPolicyGetOptionalParams): Promise<WorkspaceManagedSqlServerSecurityAlertPolicyGetResponse>;
    /**
     * Create or Update a workspace managed sql server's threat detection policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param parameters The workspace managed sql server security alert policy.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, securityAlertPolicyName: SecurityAlertPolicyNameAutoGenerated, parameters: ServerSecurityAlertPolicy, options?: WorkspaceManagedSqlServerSecurityAlertPolicyCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspaceManagedSqlServerSecurityAlertPolicyCreateOrUpdateResponse>, WorkspaceManagedSqlServerSecurityAlertPolicyCreateOrUpdateResponse>>;
    /**
     * Create or Update a workspace managed sql server's threat detection policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param parameters The workspace managed sql server security alert policy.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, securityAlertPolicyName: SecurityAlertPolicyNameAutoGenerated, parameters: ServerSecurityAlertPolicy, options?: WorkspaceManagedSqlServerSecurityAlertPolicyCreateOrUpdateOptionalParams): Promise<WorkspaceManagedSqlServerSecurityAlertPolicyCreateOrUpdateResponse>;
}

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerSecurityAlertPolicyCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspaceManagedSqlServerSecurityAlertPolicyCreateOrUpdateResponse = ServerSecurityAlertPolicy;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerSecurityAlertPolicyGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceManagedSqlServerSecurityAlertPolicyGetResponse = ServerSecurityAlertPolicy;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerSecurityAlertPolicyListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkspaceManagedSqlServerSecurityAlertPolicyListNextResponse = ServerSecurityAlertPolicyListResult;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerSecurityAlertPolicyListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkspaceManagedSqlServerSecurityAlertPolicyListResponse = ServerSecurityAlertPolicyListResult;

/** Interface representing a WorkspaceManagedSqlServerUsages. */
export declare interface WorkspaceManagedSqlServerUsages {
    /**
     * Get list of server usages metric for workspace managed sql server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: WorkspaceManagedSqlServerUsagesListOptionalParams): PagedAsyncIterableIterator<ServerUsage>;
}

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerUsagesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkspaceManagedSqlServerUsagesListNextResponse = ServerUsageListResult;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerUsagesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkspaceManagedSqlServerUsagesListResponse = ServerUsageListResult;

/** Interface representing a WorkspaceManagedSqlServerVulnerabilityAssessments. */
export declare interface WorkspaceManagedSqlServerVulnerabilityAssessments {
    /**
     * Lists the vulnerability assessment policies associated with a workspace managed sql server.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, options?: WorkspaceManagedSqlServerVulnerabilityAssessmentsListOptionalParams): PagedAsyncIterableIterator<ServerVulnerabilityAssessment>;
    /**
     * Get workspace managed sql server's vulnerability assessment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, options?: WorkspaceManagedSqlServerVulnerabilityAssessmentsGetOptionalParams): Promise<WorkspaceManagedSqlServerVulnerabilityAssessmentsGetResponse>;
    /**
     * Create or Update workspace managed sql server's vulnerability assessment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param parameters Properties for vulnerability assessment.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, parameters: ServerVulnerabilityAssessment, options?: WorkspaceManagedSqlServerVulnerabilityAssessmentsCreateOrUpdateOptionalParams): Promise<WorkspaceManagedSqlServerVulnerabilityAssessmentsCreateOrUpdateResponse>;
    /**
     * Remove workspace managed sql server's vulnerability assessment.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, vulnerabilityAssessmentName: VulnerabilityAssessmentName, options?: WorkspaceManagedSqlServerVulnerabilityAssessmentsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerVulnerabilityAssessmentsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspaceManagedSqlServerVulnerabilityAssessmentsCreateOrUpdateResponse = ServerVulnerabilityAssessment;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerVulnerabilityAssessmentsDeleteOptionalParams extends coreClient.OperationOptions {
}

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerVulnerabilityAssessmentsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceManagedSqlServerVulnerabilityAssessmentsGetResponse = ServerVulnerabilityAssessment;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerVulnerabilityAssessmentsListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkspaceManagedSqlServerVulnerabilityAssessmentsListNextResponse = ServerVulnerabilityAssessmentListResult;

/** Optional parameters. */
export declare interface WorkspaceManagedSqlServerVulnerabilityAssessmentsListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkspaceManagedSqlServerVulnerabilityAssessmentsListResponse = ServerVulnerabilityAssessmentListResult;

/** Workspace patch details */
export declare interface WorkspacePatchInfo {
    /** Resource tags */
    tags?: {
        [propertyName: string]: string;
    };
    /** The identity of the workspace */
    identity?: ManagedIdentity;
    /** SQL administrator login password */
    sqlAdministratorLoginPassword?: string;
    /** Managed Virtual Network Settings */
    managedVirtualNetworkSettings?: ManagedVirtualNetworkSettings;
    /** Git integration settings */
    workspaceRepositoryConfiguration?: WorkspaceRepositoryConfiguration;
    /** Purview Configuration */
    purviewConfiguration?: PurviewConfiguration;
    /**
     * Resource provisioning state
     * NOTE: This property will not be serialized. It can only be populated by the server.
     */
    readonly provisioningState?: string;
    /** The encryption details of the workspace */
    encryption?: EncryptionDetails;
    /** Enable or Disable public network access to workspace */
    publicNetworkAccess?: WorkspacePublicNetworkAccess;
}

/**
 * Defines values for WorkspacePublicNetworkAccess. \
 * {@link KnownWorkspacePublicNetworkAccess} can be used interchangeably with WorkspacePublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export declare type WorkspacePublicNetworkAccess = string;

/** Git integration settings */
export declare interface WorkspaceRepositoryConfiguration {
    /** Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration */
    type?: string;
    /** GitHub Enterprise host name. For example: https://github.mydomain.com */
    hostName?: string;
    /** Account name */
    accountName?: string;
    /** VSTS project name */
    projectName?: string;
    /** Repository name */
    repositoryName?: string;
    /** Collaboration branch */
    collaborationBranch?: string;
    /** Root folder to use in the repository */
    rootFolder?: string;
    /** The last commit ID */
    lastCommitId?: string;
    /** The VSTS tenant ID */
    tenantId?: string;
}

/** Interface representing a Workspaces. */
export declare interface Workspaces {
    /**
     * Returns a list of workspaces in a resource group
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName: string, options?: WorkspacesListByResourceGroupOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Returns a list of workspaces in a subscription
     * @param options The options parameters.
     */
    list(options?: WorkspacesListOptionalParams): PagedAsyncIterableIterator<Workspace>;
    /**
     * Gets a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspacesGetOptionalParams): Promise<WorkspacesGetResponse>;
    /**
     * Updates a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param workspacePatchInfo Workspace patch request properties
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, workspaceName: string, workspacePatchInfo: WorkspacePatchInfo, options?: WorkspacesUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspacesUpdateResponse>, WorkspacesUpdateResponse>>;
    /**
     * Updates a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param workspacePatchInfo Workspace patch request properties
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, workspaceName: string, workspacePatchInfo: WorkspacePatchInfo, options?: WorkspacesUpdateOptionalParams): Promise<WorkspacesUpdateResponse>;
    /**
     * Creates or updates a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param workspaceInfo Workspace create or update request properties
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, workspaceInfo: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspacesCreateOrUpdateResponse>, WorkspacesCreateOrUpdateResponse>>;
    /**
     * Creates or updates a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param workspaceInfo Workspace create or update request properties
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, workspaceInfo: Workspace, options?: WorkspacesCreateOrUpdateOptionalParams): Promise<WorkspacesCreateOrUpdateResponse>;
    /**
     * Deletes a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<PollerLike<PollOperationState<WorkspacesDeleteResponse>, WorkspacesDeleteResponse>>;
    /**
     * Deletes a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspacesDeleteOptionalParams): Promise<WorkspacesDeleteResponse>;
}

/** Optional parameters. */
export declare interface WorkspacesCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspacesCreateOrUpdateResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export declare type WorkspacesDeleteResponse = Record<string, unknown>;

/** Optional parameters. */
export declare interface WorkspacesGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspacesGetResponse = Workspace;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroupNext operation. */
export declare type WorkspacesListByResourceGroupNextResponse = WorkspaceInfoListResult;

/** Optional parameters. */
export declare interface WorkspacesListByResourceGroupOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listByResourceGroup operation. */
export declare type WorkspacesListByResourceGroupResponse = WorkspaceInfoListResult;

/** Optional parameters. */
export declare interface WorkspacesListNextOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the listNext operation. */
export declare type WorkspacesListNextResponse = WorkspaceInfoListResult;

/** Optional parameters. */
export declare interface WorkspacesListOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the list operation. */
export declare type WorkspacesListResponse = WorkspaceInfoListResult;

/** Interface representing a WorkspaceSqlAadAdmins. */
export declare interface WorkspaceSqlAadAdmins {
    /**
     * Gets a workspace SQL active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, options?: WorkspaceSqlAadAdminsGetOptionalParams): Promise<WorkspaceSqlAadAdminsGetResponse>;
    /**
     * Creates or updates a workspace SQL active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param aadAdminInfo Workspace active directory administrator properties
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, aadAdminInfo: WorkspaceAadAdminInfo, options?: WorkspaceSqlAadAdminsCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<WorkspaceSqlAadAdminsCreateOrUpdateResponse>, WorkspaceSqlAadAdminsCreateOrUpdateResponse>>;
    /**
     * Creates or updates a workspace SQL active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param aadAdminInfo Workspace active directory administrator properties
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, aadAdminInfo: WorkspaceAadAdminInfo, options?: WorkspaceSqlAadAdminsCreateOrUpdateOptionalParams): Promise<WorkspaceSqlAadAdminsCreateOrUpdateResponse>;
    /**
     * Deletes a workspace SQL active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, options?: WorkspaceSqlAadAdminsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes a workspace SQL active directory admin
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, options?: WorkspaceSqlAadAdminsDeleteOptionalParams): Promise<void>;
}

/** Optional parameters. */
export declare interface WorkspaceSqlAadAdminsCreateOrUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export declare type WorkspaceSqlAadAdminsCreateOrUpdateResponse = WorkspaceAadAdminInfo;

/** Optional parameters. */
export declare interface WorkspaceSqlAadAdminsDeleteOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Optional parameters. */
export declare interface WorkspaceSqlAadAdminsGetOptionalParams extends coreClient.OperationOptions {
}

/** Contains response data for the get operation. */
export declare type WorkspaceSqlAadAdminsGetResponse = WorkspaceAadAdminInfo;

/** Optional parameters. */
export declare interface WorkspacesUpdateOptionalParams extends coreClient.OperationOptions {
    /** Delay to wait until next poll, in milliseconds. */
    updateIntervalInMs?: number;
    /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
    resumeFrom?: string;
}

/** Contains response data for the update operation. */
export declare type WorkspacesUpdateResponse = Workspace;

export { }
