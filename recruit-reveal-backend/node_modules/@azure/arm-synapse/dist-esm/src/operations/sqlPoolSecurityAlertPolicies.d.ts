import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SqlPoolSecurityAlertPolicies } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { SqlPoolSecurityAlertPolicy, SqlPoolSecurityAlertPoliciesListOptionalParams, SecurityAlertPolicyName, SqlPoolSecurityAlertPoliciesGetOptionalParams, SqlPoolSecurityAlertPoliciesGetResponse, SqlPoolSecurityAlertPoliciesCreateOrUpdateOptionalParams, SqlPoolSecurityAlertPoliciesCreateOrUpdateResponse } from "../models";
/** Class containing SqlPoolSecurityAlertPolicies operations. */
export declare class SqlPoolSecurityAlertPoliciesImpl implements SqlPoolSecurityAlertPolicies {
    private readonly client;
    /**
     * Initialize a new instance of the class SqlPoolSecurityAlertPolicies class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Get a list of Sql pool's security alert policies.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolSecurityAlertPoliciesListOptionalParams): PagedAsyncIterableIterator<SqlPoolSecurityAlertPolicy>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get a list of Sql pool's security alert policies.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    private _list;
    /**
     * Get a Sql pool's security alert policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, securityAlertPolicyName: SecurityAlertPolicyName, options?: SqlPoolSecurityAlertPoliciesGetOptionalParams): Promise<SqlPoolSecurityAlertPoliciesGetResponse>;
    /**
     * Create or update a Sql pool's security alert policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param securityAlertPolicyName The name of the security alert policy.
     * @param parameters The Sql pool security alert policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, securityAlertPolicyName: SecurityAlertPolicyName, parameters: SqlPoolSecurityAlertPolicy, options?: SqlPoolSecurityAlertPoliciesCreateOrUpdateOptionalParams): Promise<SqlPoolSecurityAlertPoliciesCreateOrUpdateResponse>;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=sqlPoolSecurityAlertPolicies.d.ts.map