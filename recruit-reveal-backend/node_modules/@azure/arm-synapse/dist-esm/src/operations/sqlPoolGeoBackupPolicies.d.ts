import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SqlPoolGeoBackupPolicies } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { GeoBackupPolicy, SqlPoolGeoBackupPoliciesListOptionalParams, GeoBackupPolicyName, SqlPoolGeoBackupPoliciesCreateOrUpdateOptionalParams, SqlPoolGeoBackupPoliciesCreateOrUpdateResponse, SqlPoolGeoBackupPoliciesGetOptionalParams, SqlPoolGeoBackupPoliciesGetResponse } from "../models";
/** Class containing SqlPoolGeoBackupPolicies operations. */
export declare class SqlPoolGeoBackupPoliciesImpl implements SqlPoolGeoBackupPolicies {
    private readonly client;
    /**
     * Initialize a new instance of the class SqlPoolGeoBackupPolicies class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Get list of SQL pool geo backup policies
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolGeoBackupPoliciesListOptionalParams): PagedAsyncIterableIterator<GeoBackupPolicy>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get list of SQL pool geo backup policies
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    private _list;
    /**
     * Updates a SQL Pool geo backup policy.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param geoBackupPolicyName The name of the geo backup policy.
     * @param parameters The required parameters for creating or updating the geo backup policy.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, geoBackupPolicyName: GeoBackupPolicyName, parameters: GeoBackupPolicy, options?: SqlPoolGeoBackupPoliciesCreateOrUpdateOptionalParams): Promise<SqlPoolGeoBackupPoliciesCreateOrUpdateResponse>;
    /**
     * Get the specified SQL pool geo backup policy
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param geoBackupPolicyName The name of the geo backup policy.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, geoBackupPolicyName: GeoBackupPolicyName, options?: SqlPoolGeoBackupPoliciesGetOptionalParams): Promise<SqlPoolGeoBackupPoliciesGetResponse>;
}
//# sourceMappingURL=sqlPoolGeoBackupPolicies.d.ts.map