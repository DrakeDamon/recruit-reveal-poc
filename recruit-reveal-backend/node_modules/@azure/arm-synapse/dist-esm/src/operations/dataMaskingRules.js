/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing DataMaskingRules operations. */
export class DataMaskingRulesImpl {
    /**
     * Initialize a new instance of the class DataMaskingRules class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets a list of Sql pool data masking rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    listBySqlPool(resourceGroupName, workspaceName, sqlPoolName, options) {
        const iter = this.listBySqlPoolPagingAll(resourceGroupName, workspaceName, sqlPoolName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listBySqlPoolPagingPage(resourceGroupName, workspaceName, sqlPoolName, options);
            }
        };
    }
    listBySqlPoolPagingPage(resourceGroupName, workspaceName, sqlPoolName, options) {
        return __asyncGenerator(this, arguments, function* listBySqlPoolPagingPage_1() {
            let result = yield __await(this._listBySqlPool(resourceGroupName, workspaceName, sqlPoolName, options));
            yield yield __await(result.value || []);
        });
    }
    listBySqlPoolPagingAll(resourceGroupName, workspaceName, sqlPoolName, options) {
        return __asyncGenerator(this, arguments, function* listBySqlPoolPagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listBySqlPoolPagingPage(resourceGroupName, workspaceName, sqlPoolName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Creates or updates a Sql pool data masking rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param dataMaskingRuleName The name of the data masking rule.
     * @param parameters The required parameters for creating or updating a data masking rule.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, workspaceName, sqlPoolName, dataMaskingRuleName, parameters, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sqlPoolName,
            dataMaskingRuleName,
            parameters,
            options
        }, createOrUpdateOperationSpec);
    }
    /**
     * Gets the specific Sql pool data masking rule.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param dataMaskingRuleName The name of the data masking rule.
     * @param options The options parameters.
     */
    get(resourceGroupName, workspaceName, sqlPoolName, dataMaskingRuleName, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            workspaceName,
            sqlPoolName,
            dataMaskingRuleName,
            options
        }, getOperationSpec);
    }
    /**
     * Gets a list of Sql pool data masking rules.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    _listBySqlPool(resourceGroupName, workspaceName, sqlPoolName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, workspaceName, sqlPoolName, options }, listBySqlPoolOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules/{dataMaskingRuleName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.DataMaskingRule
        },
        201: {
            bodyMapper: Mappers.DataMaskingRule
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    requestBody: Parameters.parameters14,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName,
        Parameters.dataMaskingPolicyName,
        Parameters.dataMaskingRuleName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules/{dataMaskingRuleName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DataMaskingRule
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName,
        Parameters.dataMaskingPolicyName,
        Parameters.dataMaskingRuleName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const listBySqlPoolOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.DataMaskingRuleListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.workspaceName,
        Parameters.sqlPoolName,
        Parameters.dataMaskingPolicyName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=dataMaskingRules.js.map