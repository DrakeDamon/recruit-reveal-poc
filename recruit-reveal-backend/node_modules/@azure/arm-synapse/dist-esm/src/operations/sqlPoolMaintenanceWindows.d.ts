import { SqlPoolMaintenanceWindows } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { SqlPoolMaintenanceWindowsGetOptionalParams, SqlPoolMaintenanceWindowsGetResponse, MaintenanceWindows, SqlPoolMaintenanceWindowsCreateOrUpdateOptionalParams } from "../models";
/** Class containing SqlPoolMaintenanceWindows operations. */
export declare class SqlPoolMaintenanceWindowsImpl implements SqlPoolMaintenanceWindows {
    private readonly client;
    /**
     * Initialize a new instance of the class SqlPoolMaintenanceWindows class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Get a SQL pool's Maintenance Windows.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param maintenanceWindowName Maintenance window name.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, maintenanceWindowName: string, options?: SqlPoolMaintenanceWindowsGetOptionalParams): Promise<SqlPoolMaintenanceWindowsGetResponse>;
    /**
     * Creates or updates a Sql pool's maintenance windows settings.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param maintenanceWindowName Maintenance window name.
     * @param parameters The required parameters for creating or updating Maintenance Windows settings
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, maintenanceWindowName: string, parameters: MaintenanceWindows, options?: SqlPoolMaintenanceWindowsCreateOrUpdateOptionalParams): Promise<void>;
}
//# sourceMappingURL=sqlPoolMaintenanceWindows.d.ts.map