import { CheckNameAvailabilityRequest, OperationsCheckNameAvailabilityOptionalParams, OperationsCheckNameAvailabilityResponse, OperationsListOptionalParams, OperationsListResponse, OperationsGetLocationHeaderResultOptionalParams, OperationsGetAzureAsyncHeaderResultOptionalParams, OperationsGetAzureAsyncHeaderResultResponse } from "../models";
/** Interface representing a Operations. */
export interface Operations {
    /**
     * Check whether a workspace name is available
     * @param request The check request
     * @param options The options parameters.
     */
    checkNameAvailability(request: CheckNameAvailabilityRequest, options?: OperationsCheckNameAvailabilityOptionalParams): Promise<OperationsCheckNameAvailabilityResponse>;
    /**
     * Get all available operations
     * @param options The options parameters.
     */
    list(options?: OperationsListOptionalParams): Promise<OperationsListResponse>;
    /**
     * Get the result of an operation
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param operationId Operation ID
     * @param options The options parameters.
     */
    getLocationHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options?: OperationsGetLocationHeaderResultOptionalParams): Promise<void>;
    /**
     * Get the status of an operation
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param operationId Operation ID
     * @param options The options parameters.
     */
    getAzureAsyncHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options?: OperationsGetAzureAsyncHeaderResultOptionalParams): Promise<OperationsGetAzureAsyncHeaderResultResponse>;
}
//# sourceMappingURL=operations.d.ts.map