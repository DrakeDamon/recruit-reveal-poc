import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Keys } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { Key, KeysListByWorkspaceOptionalParams, KeysGetOptionalParams, KeysGetResponse, KeysCreateOrUpdateOptionalParams, KeysCreateOrUpdateResponse, KeysDeleteOptionalParams, KeysDeleteResponse } from "../models";
/** Class containing Keys operations. */
export declare class KeysImpl implements Keys {
    private readonly client;
    /**
     * Initialize a new instance of the class Keys class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Returns a list of keys in a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    listByWorkspace(resourceGroupName: string, workspaceName: string, options?: KeysListByWorkspaceOptionalParams): PagedAsyncIterableIterator<Key>;
    private listByWorkspacePagingPage;
    private listByWorkspacePagingAll;
    /**
     * Returns a list of keys in a workspace
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param options The options parameters.
     */
    private _listByWorkspace;
    /**
     * Gets a workspace key
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param keyName The name of the workspace key
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, keyName: string, options?: KeysGetOptionalParams): Promise<KeysGetResponse>;
    /**
     * Creates or updates a workspace key
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param keyName The name of the workspace key
     * @param keyProperties Key put request properties
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName: string, workspaceName: string, keyName: string, keyProperties: Key, options?: KeysCreateOrUpdateOptionalParams): Promise<KeysCreateOrUpdateResponse>;
    /**
     * Deletes a workspace key
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param keyName The name of the workspace key
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, keyName: string, options?: KeysDeleteOptionalParams): Promise<KeysDeleteResponse>;
    /**
     * ListByWorkspaceNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param nextLink The nextLink from the previous successful call to the ListByWorkspace method.
     * @param options The options parameters.
     */
    private _listByWorkspaceNext;
}
//# sourceMappingURL=keys.d.ts.map