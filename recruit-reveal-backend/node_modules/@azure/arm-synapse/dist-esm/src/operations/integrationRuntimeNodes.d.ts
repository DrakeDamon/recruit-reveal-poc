import { IntegrationRuntimeNodes } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { IntegrationRuntimeNodesGetOptionalParams, IntegrationRuntimeNodesGetResponse, UpdateIntegrationRuntimeNodeRequest, IntegrationRuntimeNodesUpdateOptionalParams, IntegrationRuntimeNodesUpdateResponse, IntegrationRuntimeNodesDeleteOptionalParams } from "../models";
/** Class containing IntegrationRuntimeNodes operations. */
export declare class IntegrationRuntimeNodesImpl implements IntegrationRuntimeNodes {
    private readonly client;
    /**
     * Initialize a new instance of the class IntegrationRuntimeNodes class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Get an integration runtime node
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param nodeName Integration runtime node name
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, nodeName: string, options?: IntegrationRuntimeNodesGetOptionalParams): Promise<IntegrationRuntimeNodesGetResponse>;
    /**
     * Create an integration runtime node
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param nodeName Integration runtime node name
     * @param updateIntegrationRuntimeNodeRequest The parameters for updating an integration runtime node.
     * @param options The options parameters.
     */
    update(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, nodeName: string, updateIntegrationRuntimeNodeRequest: UpdateIntegrationRuntimeNodeRequest, options?: IntegrationRuntimeNodesUpdateOptionalParams): Promise<IntegrationRuntimeNodesUpdateResponse>;
    /**
     * Delete an integration runtime node
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param integrationRuntimeName Integration runtime name
     * @param nodeName Integration runtime node name
     * @param options The options parameters.
     */
    delete(resourceGroupName: string, workspaceName: string, integrationRuntimeName: string, nodeName: string, options?: IntegrationRuntimeNodesDeleteOptionalParams): Promise<void>;
}
//# sourceMappingURL=integrationRuntimeNodes.d.ts.map