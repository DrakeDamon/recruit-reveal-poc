import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SqlPoolWorkloadGroup } from "../operationsInterfaces";
import { SynapseManagementClient } from "../synapseManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { WorkloadGroup, SqlPoolWorkloadGroupListOptionalParams, SqlPoolWorkloadGroupGetOptionalParams, SqlPoolWorkloadGroupGetResponse, SqlPoolWorkloadGroupCreateOrUpdateOptionalParams, SqlPoolWorkloadGroupCreateOrUpdateResponse, SqlPoolWorkloadGroupDeleteOptionalParams } from "../models";
/** Class containing SqlPoolWorkloadGroup operations. */
export declare class SqlPoolWorkloadGroupImpl implements SqlPoolWorkloadGroup {
    private readonly client;
    /**
     * Initialize a new instance of the class SqlPoolWorkloadGroup class.
     * @param client Reference to the service client
     */
    constructor(client: SynapseManagementClient);
    /**
     * Get list of  Sql pool's workload groups.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    list(resourceGroupName: string, workspaceName: string, sqlPoolName: string, options?: SqlPoolWorkloadGroupListOptionalParams): PagedAsyncIterableIterator<WorkloadGroup>;
    private listPagingPage;
    private listPagingAll;
    /**
     * Get a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, options?: SqlPoolWorkloadGroupGetOptionalParams): Promise<SqlPoolWorkloadGroupGetResponse>;
    /**
     * Create Or Update a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param parameters The requested workload group state.
     * @param options The options parameters.
     */
    beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, parameters: WorkloadGroup, options?: SqlPoolWorkloadGroupCreateOrUpdateOptionalParams): Promise<PollerLike<PollOperationState<SqlPoolWorkloadGroupCreateOrUpdateResponse>, SqlPoolWorkloadGroupCreateOrUpdateResponse>>;
    /**
     * Create Or Update a Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param parameters The requested workload group state.
     * @param options The options parameters.
     */
    beginCreateOrUpdateAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, parameters: WorkloadGroup, options?: SqlPoolWorkloadGroupCreateOrUpdateOptionalParams): Promise<SqlPoolWorkloadGroupCreateOrUpdateResponse>;
    /**
     * Remove Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, options?: SqlPoolWorkloadGroupDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Remove Sql pool's workload group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param workloadGroupName The name of the workload group.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, workspaceName: string, sqlPoolName: string, workloadGroupName: string, options?: SqlPoolWorkloadGroupDeleteOptionalParams): Promise<void>;
    /**
     * Get list of  Sql pool's workload groups.
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param options The options parameters.
     */
    private _list;
    /**
     * ListNext
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param workspaceName The name of the workspace.
     * @param sqlPoolName SQL pool name
     * @param nextLink The nextLink from the previous successful call to the List method.
     * @param options The options parameters.
     */
    private _listNext;
}
//# sourceMappingURL=sqlPoolWorkloadGroup.d.ts.map